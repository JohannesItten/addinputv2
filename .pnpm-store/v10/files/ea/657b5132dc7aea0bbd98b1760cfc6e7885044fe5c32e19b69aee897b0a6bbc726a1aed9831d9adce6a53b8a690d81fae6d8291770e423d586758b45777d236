{"version":3,"file":"DisclosureContext.js","sourceRoot":"../../../../src","sources":["components/Disclosure/DisclosureContext.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,EAAC,SAAS,EAAC,6BAAoB;AAStC,MAAM,CAAC,MAAM,2BAA2B,GAAG,KAAK,CAAC,aAAa,CAS5D,SAAS,CAAC,CAAC;AACb,MAAM,CAAC,MAAM,uBAAuB,GAAG,KAAK,CAAC,aAAa,CAExD,SAAS,CAAC,CAAC;AAEb,MAAM,UAAU,kBAAkB,CAAC,KAA8B;IAC7D,MAAM,EACF,IAAI,EACJ,QAAQ,EACR,eAAe,EACf,aAAa,EACb,OAAO,EACP,WAAW,EACX,QAAQ,EACR,QAAQ,EAAE,kBAAkB,GAC/B,GAAG,KAAK,CAAC;IACV,MAAM,CAAC,QAAQ,EAAE,WAAW,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC;IAC/E,MAAM,cAAc,GAAG,kBAAkB,KAAK,SAAS,CAAC;IAExD,MAAM,YAAY,GAAG,GAAG,EAAE;QACtB,WAAW,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC;QAC7B,MAAM,QAAQ,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;QAClE,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACvB,CAAC,CAAC;IAEF,MAAM,YAAY,GAAG,SAAS,EAAE,CAAC;IACjC,MAAM,cAAc,GAAG,aAAa,YAAY,EAAE,CAAC;IAEnD,OAAO,CACH,KAAC,2BAA2B,CAAC,QAAQ,IACjC,KAAK,EAAE;YACH,IAAI;YACJ,QAAQ;YACR,OAAO;YACP,aAAa;YACb,WAAW;YACX,QAAQ,EAAE,cAAc,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,QAAQ;YACxD,YAAY;YACZ,cAAc;SACjB,YAED,KAAC,uBAAuB,CAAC,QAAQ,IAAC,KAAK,EAAE,YAAY,YAChD,KAAK,CAAC,QAAQ,GACgB,GACA,CAC1C,CAAC;AACN,CAAC;AAED,MAAM,UAAU,uBAAuB;IACnC,MAAM,KAAK,GAAG,KAAK,CAAC,UAAU,CAAC,2BAA2B,CAAC,CAAC;IAE5D,IAAI,KAAK,KAAK,SAAS,EAAE,CAAC;QACtB,MAAM,IAAI,KAAK,CAAC,gEAAgE,CAAC,CAAC;IACtF,CAAC;IAED,OAAO,KAAK,CAAC;AACjB,CAAC;AAED,MAAM,UAAU,mBAAmB;IAC/B,MAAM,KAAK,GAAG,KAAK,CAAC,UAAU,CAAC,uBAAuB,CAAC,CAAC;IAExD,IAAI,KAAK,KAAK,SAAS,EAAE,CAAC;QACtB,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;IAClF,CAAC;IAED,OAAO,KAAK,CAAC;AACjB,CAAC","sourcesContent":["'use client';\n\nimport * as React from 'react';\n\nimport {useUniqId} from '../../hooks';\n\nimport type {DisclosureProps} from './Disclosure';\n\ninterface DisclosureProviderProps\n    extends Required<Omit<DisclosureProps, 'className' | 'expanded' | 'qa'>> {\n    expanded: DisclosureProps['expanded'];\n}\n\nexport const DisclosureAttributesContext = React.createContext<\n    | (Required<\n          Omit<DisclosureProps, 'defaultExpanded' | 'className' | 'children' | 'onUpdate' | 'qa'>\n      > & {\n          expanded: boolean;\n          ariaControls: string;\n          ariaLabelledby: string;\n      })\n    | undefined\n>(undefined);\nexport const DisclosureToggleContext = React.createContext<\n    ((e: React.SyntheticEvent) => void) | undefined\n>(undefined);\n\nexport function DisclosureProvider(props: DisclosureProviderProps) {\n    const {\n        size,\n        disabled,\n        defaultExpanded,\n        arrowPosition,\n        summary,\n        keepMounted,\n        onUpdate,\n        expanded: controlledExpanded,\n    } = props;\n    const [expanded, setExpanded] = React.useState(() => Boolean(defaultExpanded));\n    const controlledMode = controlledExpanded !== undefined;\n\n    const handleToggle = () => {\n        setExpanded((prev) => !prev);\n        const newValue = controlledMode ? !controlledExpanded : !expanded;\n        onUpdate(newValue);\n    };\n\n    const ariaControls = useUniqId();\n    const ariaLabelledby = `disclosure${ariaControls}`;\n\n    return (\n        <DisclosureAttributesContext.Provider\n            value={{\n                size,\n                disabled,\n                summary,\n                arrowPosition,\n                keepMounted,\n                expanded: controlledMode ? controlledExpanded : expanded,\n                ariaControls,\n                ariaLabelledby,\n            }}\n        >\n            <DisclosureToggleContext.Provider value={handleToggle}>\n                {props.children}\n            </DisclosureToggleContext.Provider>\n        </DisclosureAttributesContext.Provider>\n    );\n}\n\nexport function useDisclosureAttributes() {\n    const state = React.useContext(DisclosureAttributesContext);\n\n    if (state === undefined) {\n        throw new Error('useDisclosureAttributes must be used within DisclosureProvider');\n    }\n\n    return state;\n}\n\nexport function useToggleDisclosure() {\n    const state = React.useContext(DisclosureToggleContext);\n\n    if (state === undefined) {\n        throw new Error('useToggleDisclosure must be used within DisclosureProvider');\n    }\n\n    return state;\n}\n"]}