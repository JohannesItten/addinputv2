{"version":3,"file":"MenuItem.js","sourceRoot":"../../../../../src","sources":["components/lab/Menu/MenuItem.tsx"],"names":[],"mappings":"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","sourcesContent":["'use client';\nimport * as React from 'react';\n\nimport {useFloatingTree, useListItem} from '@floating-ui/react';\nimport {ChevronLeft, ChevronRight} from '@gravity-ui/icons';\n\nimport {mergeRefs, useForkRef} from '../../../hooks';\nimport {BUTTON_ICON_SIZE_MAP} from '../../Button/constants';\nimport {Icon} from '../../Icon';\nimport {useDirection} from '../../theme';\nimport {block} from '../../utils/cn';\nimport {mergeProps} from '../../utils/mergeProps';\nimport {ListItemView} from '../ListItemView/ListItemView';\nimport type {ListItemViewProps} from '../ListItemView/ListItemView';\n\nimport {MenuContext} from './MenuContext';\nimport {MenuItemContext} from './MenuItemContext';\nimport type {\n    MenuItemButtonProps,\n    MenuItemComponentElementType,\n    MenuItemComponentProps,\n    MenuItemLinkProps,\n    MenuItemProps,\n    MenuProps,\n} from './types';\nimport {isComponentType} from './utils';\n\nimport './MenuItem.scss';\n\nfunction isMenuItemComponentProps<T extends MenuItemComponentElementType>(\n    p: MenuItemProps<T>,\n): p is MenuItemComponentProps<Exclude<T, undefined>> {\n    return p.component !== undefined;\n}\n\nfunction isMenuItemLinkProps<T extends MenuItemComponentElementType>(\n    p: MenuItemProps<T>,\n): p is MenuItemLinkProps {\n    return p.href !== undefined;\n}\n\nconst b = block('lab-menu-item');\n\nexport const MenuItem = React.forwardRef(\n    <T extends MenuItemComponentElementType>(\n        props: MenuItemProps<T>,\n        ref:\n            | React.Ref<HTMLButtonElement>\n            | React.Ref<HTMLAnchorElement>\n            | React.Ref<T extends string ? React.ComponentRef<T> : T>,\n    ) => {\n        const {\n            theme,\n            selected,\n            disabled,\n            icon,\n            arrow,\n            children,\n            className,\n            qa,\n            ...restComponentProps\n        } = props;\n        const [submenuOpen, setSubmenuOpen] = React.useState(false);\n        const [hasFocusInside, setHasFocusInside] = React.useState(false);\n\n        const isRTL = useDirection() === 'rtl';\n\n        const menuContext = React.useContext(MenuContext);\n        const menuItemContext = React.useContext(MenuItemContext);\n\n        if (!menuContext) {\n            throw new Error('<MenuItem> must be used within <Menu>');\n        }\n\n        const item = useListItem();\n        const tree = useFloatingTree();\n        const isActive = item.index === menuContext.activeIndex;\n        const tabIndex = (menuContext.inline && item.index === 0) || isActive ? 0 : -1;\n\n        let submenu: React.ReactElement<MenuProps> | null = null;\n        const preparedChildren: React.ReactNode[] = [];\n\n        if (icon) {\n            preparedChildren.push(\n                <div key=\"icon\" className={b('icon')} aria-hidden>\n                    {icon}\n                </div>,\n            );\n        }\n\n        for (const child of React.Children.toArray(children)) {\n            if (!menuContext.inline && isComponentType(child, 'Menu')) {\n                submenu = child;\n            } else {\n                preparedChildren.push(child);\n            }\n        }\n\n        if (arrow || submenu) {\n            preparedChildren.push(\n                <div key=\"arrow\" className={b('arrow')} aria-hidden>\n                    {arrow ? (\n                        arrow\n                    ) : (\n                        <Icon\n                            data={isRTL ? ChevronLeft : ChevronRight}\n                            size={BUTTON_ICON_SIZE_MAP[menuContext.size]}\n                        />\n                    )}\n                </div>,\n            );\n        }\n\n        const handleRef = useForkRef(ref as any, item.ref);\n\n        const handleClick = (event: React.MouseEvent) => {\n            props.onClick?.(event);\n\n            if (!submenu) {\n                tree?.events.emit('click');\n            }\n        };\n        const handleFocus = (event: React.FocusEvent) => {\n            props.onFocus?.(event);\n            setHasFocusInside(false);\n            menuItemContext?.setHasFocusInside(true);\n        };\n\n        let component: React.ElementType;\n        let componentProps: React.ComponentProps<typeof component>;\n        const commonComponentProps = {\n            role: 'menuitem',\n            tabIndex,\n            className: b(\n                {\n                    theme,\n                    size: menuContext.size,\n                },\n                className,\n            ),\n            'data-qa': qa,\n            ...menuContext.getItemProps({\n                ...restComponentProps,\n                onClick: handleClick,\n                onFocus: handleFocus,\n            }),\n        };\n\n        if (isMenuItemComponentProps(props)) {\n            component = props.component;\n            componentProps = {\n                ...commonComponentProps,\n                'aria-disabled': disabled ?? undefined,\n            };\n        } else if (isMenuItemLinkProps(props)) {\n            component = 'a';\n            componentProps = {\n                ...commonComponentProps,\n                rel: props.target === '_blank' && !props.rel ? 'noopener noreferrer' : props.rel,\n                'aria-disabled': disabled ?? undefined,\n            } satisfies React.ComponentProps<'a'>;\n        } else {\n            component = 'button';\n            componentProps = {\n                ...commonComponentProps,\n                type: 'button',\n                disabled,\n                'aria-disabled': disabled ?? undefined,\n                'aria-pressed': selected ?? undefined,\n            } satisfies React.ComponentProps<'button'>;\n        }\n\n        const content = (\n            <ListItemView\n                isContainer\n                component={component}\n                componentProps={componentProps}\n                ref={handleRef}\n                size={menuContext.size}\n                disabled={disabled}\n                active={isActive && !hasFocusInside}\n                hovered={hasFocusInside || (!isActive && submenuOpen)}\n                selected={selected}\n                selectionStyle=\"highlight\"\n            >\n                {preparedChildren}\n            </ListItemView>\n        );\n\n        const contextValue = React.useMemo(\n            () => ({\n                setHasFocusInside,\n            }),\n            [],\n        );\n\n        if (submenu) {\n            return (\n                <MenuItemContext.Provider value={contextValue}>\n                    {React.cloneElement<MenuProps>(submenu, {\n                        trigger: (triggerProps, triggerRef) => {\n                            return React.cloneElement<\n                                ListItemViewProps & {ref?: React.Ref<unknown>}\n                            >(content, {\n                                ref: mergeRefs(triggerRef, handleRef),\n                                componentProps: mergeProps(triggerProps, componentProps),\n                            });\n                        },\n                        onOpenChange: (open, event, reason) => {\n                            submenu.props.onOpenChange?.(open, event, reason);\n                            setSubmenuOpen(open);\n\n                            if (!open) {\n                                setHasFocusInside(false);\n                            }\n                        },\n                    })}\n                </MenuItemContext.Provider>\n            );\n        }\n\n        return content;\n    },\n) as (<T extends MenuItemComponentElementType, P extends MenuItemProps<T>>(\n    props: P extends {component: Exclude<T, undefined>}\n        ? MenuItemComponentProps<Exclude<T, undefined>> & {\n              ref?: React.Ref<T extends string ? React.ComponentRef<T> : T>;\n          }\n        : P extends {href: string}\n          ? MenuItemLinkProps & {ref?: React.Ref<HTMLAnchorElement>}\n          : MenuItemButtonProps & {ref?: React.Ref<HTMLButtonElement>},\n) => React.ReactElement) & {displayName?: string};\n\nMenuItem.displayName = 'Menu.Item';\n"]}