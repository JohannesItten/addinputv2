{"version":3,"file":"withTableSorting.js","sourceRoot":"../../../../../../src","sources":["components/Table/hoc/withTableSorting/withTableSorting.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,GAAG,sBAAmB;AAC7B,OAAO,OAAO,0BAAuB;AAErC,OAAO,EAAC,sBAAsB,EAAC,iEAA8D;AAC7F,OAAO,EAAC,KAAK,EAAC,6BAA0B;AACxC,OAAO,EAAC,gBAAgB,EAAC,2CAAwC;AACjE,OAAO,EAAC,KAAK,EAAC,uBAAoB;AAGlC,OAAO,EAAC,aAAa,EAAC,yCAAsC;AAE5D,gCAAiC;AAajC,MAAM,CAAC,MAAM,kBAAkB,GAAG,aAAa,CAAC;AAahD,MAAM,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC;AAEzB,MAAM,UAAU,gBAAgB,CAC5B,cAAsD;IAEtD,MAAM,aAAa,GAAG,gBAAgB,CAAC,cAAc,CAAC,CAAC;IACvD,MAAM,WAAW,GAAG,oBAAoB,aAAa,GAAG,CAAC;IAEzD,SAAS,sBAAsB,CAAC,KAAQ,EAAE,KAAQ,EAAE,QAAgB;QAChE,IAAI,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC,KAAK,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC,EAAE,CAAC;YAChD,OAAO,CAAC,CAAC;QACb,CAAC;aAAM,CAAC;YACJ,OAAO,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAChE,CAAC;IACL,CAAC;IAED,OAAO,KAAM,SAAQ,KAAK,CAAC,SAG1B;QACG,MAAM,CAAC,WAAW,GAAG,WAAW,CAAC;QAEjC,KAAK,GAA0B;YAC3B,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,gBAAgB,IAAI,EAAE;SAC1C,CAAC;QAEF,MAAM;YACF,MAAM,EAAC,OAAO,EAAE,GAAG,cAAc,EAAC,GAAG,IAAI,CAAC,KAAK,CAAC;YAEhD,OAAO,CACH,KAAC,cAAc,OACN,cAAqD,EAC1D,IAAI,EAAE,IAAI,CAAC,aAAa,EAAE,EAC1B,OAAO,EAAE,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,GACvC,CACL,CAAC;QACN,CAAC;QAEO,aAAa;YACjB,MAAM,EAAC,IAAI,EAAE,OAAO,EAAE,kBAAkB,GAAG,IAAI,CAAC,iBAAiB,EAAE,EAAC,GAAG,IAAI,CAAC,KAAK,CAAC;YAClF,MAAM,SAAS,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;YAEtC,IAAI,kBAAkB,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBAC/C,OAAO,IAAI,CAAC;YAChB,CAAC;YAED,OAAO,IAAI,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;gBACtC,IAAI,CAAC,GAAG,CAAC,CAAC;gBACV,OAAO,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC;oBAC1B,MAAM,KAAK,GAAG,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;oBAC7B,MAAM,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,KAAK,CAAC,MAAM,CAAC,CAAC;oBAC1D,MAAM,eAAe,GAAG,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC;oBAE3C,IAAI,CAAC,eAAe,EAAE,CAAC;wBACnB,SAAS;oBACb,CAAC;oBAED,MAAM,YAAY,GACd,OAAO,eAAe,KAAK,UAAU;wBACjC,CAAC,CAAC,eAAe,CAAC,KAAK,EAAE,KAAK,CAAC;wBAC/B,CAAC,CAAC,sBAAsB,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;oBAE7D,IAAI,YAAY,KAAK,CAAC,EAAE,CAAC;wBACrB,OAAO,KAAK,CAAC,KAAK,KAAK,KAAK,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC;oBAChE,CAAC;gBACL,CAAC;gBAED,OAAO,CAAC,CAAC;YACb,CAAC,CAAC,CAAC;QACP,CAAC;QAED,8DAA8D;QACtD,cAAc,GAAG,OAAO,CAAC,CAAC,OAA+B,EAAE,EAAE;YACjE,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;gBAC1B,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;gBAEzB,IAAI,IAAI,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC;oBACpB,OAAO;wBACH,GAAG,MAAM;wBACT,IAAI,EAAE;4BACF,GAAG,MAAM,CAAC,IAAI;4BACd,aAAa,EAAE,MAAM,CAAC,IAAI;yBAC7B;wBACD,IAAI,EAAE,GAAG,EAAE;4BACP,MAAM,SAAS,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;4BACtC,IAAI,SAAsC,CAAC;4BAE3C,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gCACvB,MAAM,KAAK,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,EAAE,CAAC,CAAC;gCAE5D,IAAI,KAAK,EAAE,CAAC;oCACR,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC;gCAC5B,CAAC;4BACL,CAAC;4BAED,MAAM,aAAa,GAAG,KAAK,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;4BACvD,MAAM,OAAO,GAAG;gCACZ,cAAmB,SAAS,EAAE,CAAC,CAAC,cAAc,CAAC,YAC1C,aAAa,IADT,SAAS,CAEZ;gCACN,cAAqB,SAAS,EAAE,CAAC,CAAC,gBAAgB,CAAC,YAC/C,KAAC,aAAa,IAAC,KAAK,EAAE,SAAS,GAAI,IAD9B,WAAW,CAEd;6BACT,CAAC;4BAEF,IAAI,MAAM,CAAC,KAAK,KAAK,OAAO,IAAI,MAAM,CAAC,KAAK,KAAK,KAAK,EAAE,CAAC;gCACrD,OAAO,CAAC,OAAO,EAAE,CAAC;4BACtB,CAAC;4BAED,MAAM,OAAO,GAAG,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;4BAC9D,MAAM,SAAS,GAAG,sBAAsB,CAAC,OAAO,CAAC,CAAC;4BAElD,OAAO,CACH,cACI,IAAI,EAAC,QAAQ,EACb,QAAQ,EAAE,CAAC,EACX,SAAS,EAAE,CAAC,CAAC,MAAM,EAAE,EAAC,MAAM,EAAE,OAAO,CAAC,SAAS,CAAC,EAAC,CAAC,EAClD,OAAO,EAAE,OAAO,EAChB,SAAS,EAAE,SAAS,YAEnB,OAAO,GACN,CACT,CAAC;wBACN,CAAC;qBACoB,CAAC;gBAC9B,CAAC;qBAAM,CAAC;oBACJ,OAAO,MAAM,CAAC;gBAClB,CAAC;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEK,qBAAqB,GAAG,CAAC,MAA4B,EAAE,KAAuB,EAAE,EAAE;YACtF,MAAM,SAAS,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;YACtC,MAAM,iBAAiB,GAAG,SAAS,CAAC,SAAS,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,MAAM,KAAK,MAAM,CAAC,EAAE,CAAC,CAAC;YACrF,MAAM,YAAY,GAAG,SAAS,CAAC,iBAAiB,CAAC,CAAC;YAClD,MAAM,cAAc,GAAG,IAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;YAEvE,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;gBAClB,IAAI,CAAC,qBAAqB,CAAC,cAAc,CAAC,CAAC;gBAC3C,OAAO;YACX,CAAC;YAED,IAAI,YAAY,EAAE,CAAC;gBACf,IAAI,CAAC,qBAAqB,CAAC;oBACvB,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE,iBAAiB,CAAC;oBACxC,GAAG,SAAS,CAAC,KAAK,CAAC,iBAAiB,GAAG,CAAC,CAAC;oBACzC,GAAG,cAAc;iBACpB,CAAC,CAAC;YACP,CAAC;iBAAM,CAAC;gBACJ,IAAI,CAAC,qBAAqB,CAAC,CAAC,GAAG,SAAS,EAAE,GAAG,cAAc,CAAC,CAAC,CAAC;YAClE,CAAC;QACL,CAAC,CAAC;QAEM,YAAY;YAChB,MAAM,EAAC,SAAS,EAAC,GAAG,IAAI,CAAC,KAAK,CAAC;YAC/B,MAAM,EAAC,IAAI,EAAC,GAAG,IAAI,CAAC,KAAK,CAAC;YAE1B,OAAO,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC,CAAC,SAAU,CAAC,CAAC,CAAC,IAAI,CAAC;QACxD,CAAC;QAEO,qBAAqB,CAAC,YAAuB;YACjD,MAAM,EAAC,iBAAiB,EAAC,GAAG,IAAI,CAAC,KAAK,CAAC;YAEvC,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,EAAE,CAAC;gBAC5B,IAAI,CAAC,QAAQ,CAAC,EAAC,IAAI,EAAE,YAAY,EAAC,CAAC,CAAC;YACxC,CAAC;YAED,IAAI,iBAAiB,EAAE,CAAC;gBACpB,iBAAiB,CAAC,YAAY,CAAC,CAAC;YACpC,CAAC;QACL,CAAC;QAEO,iBAAiB;YACrB,MAAM,EAAC,SAAS,EAAE,iBAAiB,EAAC,GAAG,IAAI,CAAC,KAAK,CAAC;YAClD,OAAO,OAAO,CAAC,SAAS,IAAI,iBAAiB,CAAC,CAAC;QACnD,CAAC;QAEO,yBAAyB,CAAC,MAA4B;YAC1D,OAAO,MAAM,CAAC,IAAI,EAAE,gBAAgB,IAAI,KAAK,CAAC;QAClD,CAAC;QAEO,oBAAoB,CACxB,MAA4B,EAC5B,YAA8B;YAE9B,MAAM,YAAY,GAAG,IAAI,CAAC,yBAAyB,CAAC,MAAM,CAAC,CAAC;YAC5D,MAAM,UAAU,GACZ,YAAY,KAAK,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC;YACtF,MAAM,YAAY,GAAG,UAAU,CAAC,OAAO,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;YAC7D,MAAM,SAAS,GAAG,CAAC,YAAY,GAAG,CAAC,CAAC,GAAG,UAAU,CAAC,MAAM,CAAC;YACzD,MAAM,SAAS,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC;YAExC,IAAI,CAAC,SAAS,EAAE,CAAC;gBACb,OAAO,EAAE,CAAC;YACd,CAAC;YAED,OAAO,CAAC,EAAC,MAAM,EAAE,MAAM,CAAC,EAAE,EAAE,KAAK,EAAE,SAA4B,EAAC,CAAC,CAAC;QACtE,CAAC;KACJ,CAAC;AACN,CAAC","sourcesContent":["'use client';\n\nimport * as React from 'react';\n\nimport get from 'lodash/get';\nimport memoize from 'lodash/memoize';\n\nimport {createOnKeyDownHandler} from '../../../../hooks/useActionHandlers/useActionHandlers';\nimport {block} from '../../../utils/cn';\nimport {getComponentName} from '../../../utils/getComponentName';\nimport {Table} from '../../Table';\nimport type {TableColumnConfig, TableDataItem, TableProps} from '../../Table';\n\nimport {SortIndicator} from './SortIndicator/SortIndicator';\n\nimport './withTableSorting.scss';\n\ntype ColumnSortOrder = 'asc' | 'desc';\n\ninterface ColumnSortState {\n    column: string;\n    order: ColumnSortOrder;\n}\n\ntype SortState = ColumnSortState[];\n\nexport type TableSortState = SortState;\nexport type TableColumnSortState = ColumnSortState;\nexport const TableSortIndicator = SortIndicator;\n\nexport interface WithTableSortingProps {\n    defaultSortState?: SortState;\n    sortState?: SortState;\n    onSortStateChange?: (sortState: SortState) => void;\n    disableDataSorting?: boolean;\n}\n\ninterface WithTableSortingState {\n    sort: SortState;\n}\n\nconst b = block('table');\n\nexport function withTableSorting<I extends TableDataItem, E extends {} = {}>(\n    TableComponent: React.ComponentType<TableProps<I> & E>,\n): React.ComponentType<TableProps<I> & WithTableSortingProps & E> {\n    const componentName = getComponentName(TableComponent);\n    const displayName = `withTableSorting(${componentName})`;\n\n    function defaultCompareFunction(itemA: I, itemB: I, columnId: string) {\n        if (get(itemA, columnId) === get(itemB, columnId)) {\n            return 0;\n        } else {\n            return get(itemA, columnId) > get(itemB, columnId) ? 1 : -1;\n        }\n    }\n\n    return class extends React.Component<\n        TableProps<I> & WithTableSortingProps & E,\n        WithTableSortingState\n    > {\n        static displayName = displayName;\n\n        state: WithTableSortingState = {\n            sort: this.props.defaultSortState ?? [],\n        };\n\n        render() {\n            const {columns, ...restTableProps} = this.props;\n\n            return (\n                <TableComponent\n                    {...(restTableProps as Omit<TableProps<I>, 'columns'> & E)}\n                    data={this.getSortedData()}\n                    columns={this.enhanceColumns(columns)}\n                />\n            );\n        }\n\n        private getSortedData() {\n            const {data, columns, disableDataSorting = this.isControlledState()} = this.props;\n            const sortState = this.getSortState();\n\n            if (disableDataSorting || sortState.length === 0) {\n                return data;\n            }\n\n            return data.slice().sort((itemA, itemB) => {\n                let i = 0;\n                while (i < sortState.length) {\n                    const state = sortState[i++];\n                    const column = columns.find((c) => c.id === state.column);\n                    const compareFunction = column?.meta?.sort;\n\n                    if (!compareFunction) {\n                        continue;\n                    }\n\n                    const compareValue =\n                        typeof compareFunction === 'function'\n                            ? compareFunction(itemA, itemB)\n                            : defaultCompareFunction(itemA, itemB, state.column);\n\n                    if (compareValue !== 0) {\n                        return state.order === 'asc' ? compareValue : -compareValue;\n                    }\n                }\n\n                return 0;\n            });\n        }\n\n        // eslint-disable-next-line @typescript-eslint/member-ordering\n        private enhanceColumns = memoize((columns: TableColumnConfig<I>[]) => {\n            return columns.map((column) => {\n                const meta = column.meta;\n\n                if (meta && meta.sort) {\n                    return {\n                        ...column,\n                        meta: {\n                            ...column.meta,\n                            _originalName: column.name,\n                        },\n                        name: () => {\n                            const sortState = this.getSortState();\n                            let sortOrder: ColumnSortOrder | undefined;\n\n                            if (sortState.length > 0) {\n                                const state = sortState.find((s) => s.column === column.id);\n\n                                if (state) {\n                                    sortOrder = state.order;\n                                }\n                            }\n\n                            const originContent = Table.getHeadCellContent(column);\n                            const content = [\n                                <div key=\"content\" className={b('sort-content')}>\n                                    {originContent}\n                                </div>,\n                                <div key=\"indicator\" className={b('sort-indicator')}>\n                                    <SortIndicator order={sortOrder} />\n                                </div>,\n                            ];\n\n                            if (column.align === 'right' || column.align === 'end') {\n                                content.reverse();\n                            }\n\n                            const onClick = this.handleColumnSortClick.bind(this, column);\n                            const onKeyDown = createOnKeyDownHandler(onClick);\n\n                            return (\n                                <div\n                                    role=\"button\"\n                                    tabIndex={0}\n                                    className={b('sort', {active: Boolean(sortOrder)})}\n                                    onClick={onClick}\n                                    onKeyDown={onKeyDown}\n                                >\n                                    {content}\n                                </div>\n                            );\n                        },\n                    } as TableColumnConfig<I>;\n                } else {\n                    return column;\n                }\n            });\n        });\n\n        private handleColumnSortClick = (column: TableColumnConfig<I>, event: React.MouseEvent) => {\n            const sortState = this.getSortState();\n            const currentStateIndex = sortState.findIndex((state) => state.column === column.id);\n            const currentState = sortState[currentStateIndex];\n            const nextColumnSort = this.getNextSortForColumn(column, currentState);\n\n            if (!event.shiftKey) {\n                this.handleSortStateChange(nextColumnSort);\n                return;\n            }\n\n            if (currentState) {\n                this.handleSortStateChange([\n                    ...sortState.slice(0, currentStateIndex),\n                    ...sortState.slice(currentStateIndex + 1),\n                    ...nextColumnSort,\n                ]);\n            } else {\n                this.handleSortStateChange([...sortState, ...nextColumnSort]);\n            }\n        };\n\n        private getSortState() {\n            const {sortState} = this.props;\n            const {sort} = this.state;\n\n            return this.isControlledState() ? sortState! : sort;\n        }\n\n        private handleSortStateChange(newSortState: SortState) {\n            const {onSortStateChange} = this.props;\n\n            if (!this.isControlledState()) {\n                this.setState({sort: newSortState});\n            }\n\n            if (onSortStateChange) {\n                onSortStateChange(newSortState);\n            }\n        }\n\n        private isControlledState() {\n            const {sortState, onSortStateChange} = this.props;\n            return Boolean(sortState && onSortStateChange);\n        }\n\n        private getColumnDefaultSortOrder(column: TableColumnConfig<I>): ColumnSortOrder {\n            return column.meta?.defaultSortOrder || 'asc';\n        }\n\n        private getNextSortForColumn(\n            column: TableColumnConfig<I>,\n            currentState?: ColumnSortState,\n        ): ColumnSortState[] {\n            const defaultOrder = this.getColumnDefaultSortOrder(column);\n            const orderStack =\n                defaultOrder === 'desc' ? ['desc', 'asc', undefined] : ['asc', 'desc', undefined];\n            const currentIndex = orderStack.indexOf(currentState?.order);\n            const nextIndex = (currentIndex + 1) % orderStack.length;\n            const nextOrder = orderStack[nextIndex];\n\n            if (!nextOrder) {\n                return [];\n            }\n\n            return [{column: column.id, order: nextOrder as ColumnSortOrder}];\n        }\n    };\n}\n"]}