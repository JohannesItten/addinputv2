{"version":3,"file":"useRadio.js","sourceRoot":"../../../../../src","sources":["hooks/private/useRadio/useRadio.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,EAAC,kBAAkB,EAAE,UAAU,EAAE,SAAS,EAAC,uBAAc;AAEhE,OAAO,EAAC,WAAW,EAAC,wDAA+C;AACnE,OAAO,EAAC,mBAAmB,EAAC,wCAA+B;AAS3D,MAAM,UAAU,QAAQ,CAAC,EACrB,IAAI,EACJ,KAAK,EACL,OAAO,EACP,cAAc,EACd,QAAQ,EACR,UAAU,EACV,YAAY,EACZ,QAAQ,EACR,QAAQ,EACR,OAAO,EACP,MAAM,EACN,EAAE,GACU;IACZ,MAAM,SAAS,GAAG,SAAS,EAAE,CAAC;IAC9B,MAAM,eAAe,GAAG,KAAK,CAAC,MAAM,CAAmB,IAAI,CAAC,CAAC;IAC7D,MAAM,CAAC,SAAS,EAAE,eAAe,CAAC,GAAG,kBAAkB,CACnD,OAAO,EACP,cAAc,IAAI,KAAK,EACvB,QAAQ,CACX,CAAC;IAEF,MAAM,YAAY,GAAG,mBAAmB,CAAC,EAAC,YAAY,EAAE,SAAS,EAAE,OAAO,EAAE,eAAe,EAAC,CAAC,CAAC;IAE9F,MAAM,SAAS,GAAG,UAAU,CAAC,UAAU,EAAE,eAAe,EAAE,YAAY,CAAC,CAAC;IAExE,MAAM,YAAY,GAAG,CAAC,KAA0C,EAAE,EAAE;QAChE,eAAe,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QAEtC,IAAI,QAAQ,EAAE,CAAC;YACX,QAAQ,CAAC,KAAK,CAAC,CAAC;QACpB,CAAC;IACL,CAAC,CAAC;IAEF,MAAM,eAAe,GAAG,CAAC,KAA0C,EAAE,EAAE;QACnE,WAAW,CAAC,OAAO,CAAC;YAChB,WAAW,EAAE,OAAO;YACpB,OAAO,EAAE,OAAO;YAChB,QAAQ,EAAE,KAAK;SAClB,CAAC,CAAC;IACP,CAAC,CAAC;IAEF,MAAM,UAAU,GAC4B;QACxC,GAAG,YAAY;QACf,IAAI,EAAE,IAAI,IAAI,SAAS;QACvB,KAAK;QACL,EAAE;QACF,OAAO;QACP,MAAM;QACN,QAAQ;QACR,IAAI,EAAE,OAAO;QACb,QAAQ,EAAE,YAAY;QACtB,eAAe,EAAE,eAAe;QAChC,OAAO;QACP,cAAc,EAAE,cAAc;QAC9B,cAAc,EAAE,SAAS;QACzB,GAAG,EAAE,SAAS;KACjB,CAAC;IAEF,OAAO,EAAC,OAAO,EAAE,SAAS,EAAE,UAAU,EAAC,CAAC;AAC5C,CAAC","sourcesContent":["import * as React from 'react';\n\nimport {useControlledState, useForkRef, useUniqId} from '../..';\nimport type {ControlProps} from '../../../components/types';\nimport {eventBroker} from '../../../components/utils/event-broker';\nimport {useFormResetHandler} from '../useFormResetHandler';\n\nexport type UseRadioProps = ControlProps;\n\nexport type UseRadioResult = {\n    checked: boolean;\n    inputProps: React.InputHTMLAttributes<HTMLInputElement> & React.RefAttributes<HTMLInputElement>;\n};\n\nexport function useRadio({\n    name,\n    value,\n    checked,\n    defaultChecked,\n    disabled,\n    controlRef,\n    controlProps,\n    onUpdate,\n    onChange,\n    onFocus,\n    onBlur,\n    id,\n}: UseRadioProps): UseRadioResult {\n    const controlId = useUniqId();\n    const innerControlRef = React.useRef<HTMLInputElement>(null);\n    const [isChecked, setCheckedState] = useControlledState(\n        checked,\n        defaultChecked ?? false,\n        onUpdate,\n    );\n\n    const formFieldRef = useFormResetHandler({initialValue: isChecked, onReset: setCheckedState});\n\n    const handleRef = useForkRef(controlRef, innerControlRef, formFieldRef);\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setCheckedState(event.target.checked);\n\n        if (onChange) {\n            onChange(event);\n        }\n    };\n\n    const onChangeCapture = (event: React.ChangeEvent<HTMLInputElement>) => {\n        eventBroker.publish({\n            componentId: 'Radio',\n            eventId: 'click',\n            domEvent: event,\n        });\n    };\n\n    const inputProps: React.InputHTMLAttributes<HTMLInputElement> &\n        React.RefAttributes<HTMLInputElement> = {\n        ...controlProps,\n        name: name || controlId,\n        value,\n        id,\n        onFocus,\n        onBlur,\n        disabled,\n        type: 'radio',\n        onChange: handleChange,\n        onChangeCapture: onChangeCapture,\n        checked,\n        defaultChecked: defaultChecked,\n        'aria-checked': isChecked,\n        ref: handleRef,\n    };\n\n    return {checked: isChecked, inputProps};\n}\n"]}