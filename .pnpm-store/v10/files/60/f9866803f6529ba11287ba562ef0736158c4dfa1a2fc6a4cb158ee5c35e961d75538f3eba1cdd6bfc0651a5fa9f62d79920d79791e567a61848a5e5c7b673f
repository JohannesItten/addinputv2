{"version":3,"file":"useCurrentActiveMediaQuery.js","sourceRoot":"../../../../../src","sources":["components/layout/hooks/useCurrentActiveMediaQuery.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport type {MediaProps, MediaType} from '../types';\n\nexport const mockMediaQueryList: MediaQueryList = {\n    media: '',\n    matches: false,\n    onchange: () => {},\n    addListener: () => {},\n    removeListener: () => {},\n    addEventListener: () => {},\n    removeEventListener: () => {},\n    dispatchEvent: (_: Event) => true,\n};\n\nexport const makeCurrentActiveMediaExpressions = (\n    mediaToValue: MediaProps<number>,\n): MediaProps<string> => ({\n    xs: `(max-width: ${mediaToValue.s - 1}px)`,\n    s: `(min-width: ${mediaToValue.s}px) and (max-width: ${mediaToValue.m - 1}px)`,\n    m: `(min-width: ${mediaToValue.m}px) and (max-width: ${mediaToValue.l - 1}px)`,\n    l: `(min-width: ${mediaToValue.l}px) and (max-width: ${mediaToValue.xl - 1}px)`,\n    xl: `(min-width: ${mediaToValue.xl}px) and (max-width: ${mediaToValue.xxl - 1}px)`,\n    xxl: `(min-width: ${mediaToValue.xxl}px) and (max-width: ${mediaToValue.xxxl - 1}px)`,\n    xxxl: `(min-width: ${mediaToValue.xxxl}px)`,\n});\n\nconst safeMatchMedia = (query: string): MediaQueryList => {\n    if (typeof window === 'undefined' || typeof window.matchMedia !== 'function') {\n        return mockMediaQueryList;\n    }\n\n    return window.matchMedia(query);\n};\n\nclass Queries {\n    private fix: boolean;\n    private queryListsDecl: [MediaType, MediaQueryList][] = [];\n\n    constructor(breakpointsMap: MediaProps<number>, fixBreakpoints: boolean) {\n        const mediaToExpressionMap = makeCurrentActiveMediaExpressions(breakpointsMap);\n\n        this.fix = fixBreakpoints;\n        this.queryListsDecl = [\n            // order important here\n            ['xs', safeMatchMedia(mediaToExpressionMap.xs)],\n            ['s', safeMatchMedia(mediaToExpressionMap.s)],\n            ['m', safeMatchMedia(mediaToExpressionMap.m)],\n            ['l', safeMatchMedia(mediaToExpressionMap.l)],\n            ['xl', safeMatchMedia(mediaToExpressionMap.xl)],\n            ['xxl', safeMatchMedia(mediaToExpressionMap.xxl)],\n            ['xxxl', safeMatchMedia(mediaToExpressionMap.xxxl)],\n        ];\n    }\n\n    getCurrentActiveMedia(): MediaType {\n        const activeMedia = this.queryListsDecl.find(([_, queryList]) => queryList.matches)?.[0];\n\n        if (!activeMedia) {\n            return this.fix ? 'xs' : 's';\n        } else if (activeMedia === 'xs' && !this.fix) {\n            return 's';\n        }\n\n        return activeMedia;\n    }\n\n    addListeners(fn: () => void) {\n        this.queryListsDecl.forEach(([_, queryList]) => queryList.addEventListener('change', fn));\n    }\n\n    removeListeners(fn: () => void) {\n        this.queryListsDecl.forEach(([_, queryList]) =>\n            queryList.removeEventListener('change', fn),\n        );\n    }\n}\n\n/**\n * @private\n */\nexport const useCurrentActiveMediaQuery = (\n    breakpointsMap: MediaProps<number>,\n    fixBreakpoints: boolean,\n    initialMediaQuery?: MediaType,\n) => {\n    const [state, _setState] = React.useState<MediaType>(\n        initialMediaQuery ?? (fixBreakpoints ? 'xs' : 's'),\n    );\n\n    React.useLayoutEffect(() => {\n        const queries = new Queries(breakpointsMap, fixBreakpoints);\n\n        const setState = () => {\n            _setState(queries.getCurrentActiveMedia());\n        };\n\n        queries.addListeners(setState);\n\n        setState();\n\n        return () => {\n            queries.removeListeners(setState);\n        };\n    }, [breakpointsMap, fixBreakpoints]);\n\n    return state;\n};\n"]}