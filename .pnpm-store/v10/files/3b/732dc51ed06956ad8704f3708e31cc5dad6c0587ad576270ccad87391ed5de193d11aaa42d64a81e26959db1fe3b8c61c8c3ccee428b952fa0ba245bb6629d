{"version":3,"file":"TextArea.js","sourceRoot":"../../../../../src","sources":["components/controls/TextArea/TextArea.tsx"],"names":[],"mappings":"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","sourcesContent":["'use client';\n\nimport * as React from 'react';\n\nimport {useControlledState, useForkRef, useUniqId} from '../../../hooks';\nimport {useFormResetHandler} from '../../../hooks/private';\nimport {block} from '../../utils/cn';\nimport {ClearButton, mapTextInputSizeToButtonSize} from '../common';\nimport {OuterAdditionalContent} from '../common/OuterAdditionalContent/OuterAdditionalContent';\nimport type {\n    BaseInputControlProps,\n    InputControlPin,\n    InputControlSize,\n    InputControlView,\n} from '../types';\nimport {errorPropsMapper, getInputControlState, prepareAutoComplete} from '../utils';\n\nimport {TextAreaControl} from './TextAreaControl';\n\nimport './TextArea.scss';\n\nconst b = block('text-area');\n\nexport type TextAreaProps = BaseInputControlProps<HTMLTextAreaElement> & {\n    /** The control's html attributes */\n    controlProps?: React.TextareaHTMLAttributes<HTMLTextAreaElement>;\n    /** The number of visible text lines for the control. If not specified, the hight will be automatically calculated based on the content */\n    rows?: number;\n    /** The number of minimum visible text lines for the control. Ignored if `rows` is specified */\n    minRows?: number;\n    /** The number of maximum visible text lines for the control. Ignored if `rows` is specified */\n    maxRows?: number;\n    /** An optional element displayed under the lower right corner of the control and sharing the place with the error container */\n    note?: React.ReactNode;\n};\nexport type TextAreaPin = InputControlPin;\nexport type TextAreaSize = InputControlSize;\nexport type TextAreaView = InputControlView;\n\nexport const TextArea = React.forwardRef<HTMLSpanElement, TextAreaProps>(\n    function TextArea(props, ref) {\n        const {\n            view = 'normal',\n            size = 'm',\n            pin = 'round-round',\n            name,\n            value,\n            defaultValue,\n            disabled,\n            readOnly,\n            hasClear = false,\n            error,\n            errorMessage: errorMessageProp,\n            validationState: validationStateProp,\n            autoComplete,\n            id: idProp,\n            tabIndex,\n            style,\n            className,\n            qa,\n            controlProps,\n            note,\n            onUpdate,\n            onChange,\n        } = props;\n\n        const {errorMessage, validationState} = errorPropsMapper({\n            error,\n            errorMessage: errorMessageProp,\n            validationState: validationStateProp,\n        });\n\n        const [inputValue, setInputValue] = useControlledState(value, defaultValue ?? '', onUpdate);\n        const innerControlRef = React.useRef<HTMLTextAreaElement | HTMLInputElement>(null);\n        const fieldRef = useFormResetHandler({initialValue: inputValue, onReset: setInputValue});\n        const handleRef = useForkRef(props.controlRef, innerControlRef, fieldRef);\n        const [hasVerticalScrollbar, setHasVerticalScrollbar] = React.useState(false);\n        const state = getInputControlState(validationState);\n        const innerId = useUniqId();\n\n        const isErrorMsgVisible = validationState === 'invalid' && Boolean(errorMessage);\n        const isClearControlVisible = Boolean(hasClear && !disabled && !readOnly && inputValue);\n        const id = idProp || innerId;\n\n        const errorMessageId = useUniqId();\n        const noteId = useUniqId();\n        const ariaDescribedBy = [\n            controlProps?.['aria-describedby'],\n            note ? noteId : undefined,\n            isErrorMsgVisible ? errorMessageId : undefined,\n        ]\n            .filter(Boolean)\n            .join(' ');\n\n        const commonProps = {\n            id,\n            tabIndex,\n            name,\n            onChange(event: React.ChangeEvent<HTMLTextAreaElement>) {\n                setInputValue(event.target.value);\n                if (onChange) {\n                    onChange(event);\n                }\n            },\n            autoComplete: prepareAutoComplete(autoComplete),\n            controlProps: {\n                ...controlProps,\n                'aria-describedby': ariaDescribedBy || undefined,\n                'aria-invalid': validationState === 'invalid' || undefined,\n            },\n        };\n\n        const handleClear = (event: React.MouseEvent<HTMLSpanElement>) => {\n            const control = innerControlRef.current;\n\n            if (control) {\n                control.focus();\n\n                const syntheticEvent = Object.create(event);\n                syntheticEvent.target = control;\n                syntheticEvent.currentTarget = control;\n\n                control.value = '';\n\n                if (onChange) {\n                    onChange(syntheticEvent);\n                }\n            }\n\n            setInputValue('');\n        };\n\n        React.useEffect(() => {\n            const control = innerControlRef.current;\n\n            if (control) {\n                const currHasVerticalScrollbar = control.scrollHeight > control.clientHeight;\n\n                if (hasVerticalScrollbar !== currHasVerticalScrollbar) {\n                    setHasVerticalScrollbar(currHasVerticalScrollbar);\n                }\n            }\n        }, [inputValue, hasVerticalScrollbar]);\n\n        return (\n            <span\n                ref={ref}\n                style={style}\n                className={b(\n                    {\n                        view,\n                        size,\n                        disabled,\n                        state,\n                        pin: view === 'clear' ? undefined : pin,\n                        'has-clear': isClearControlVisible,\n                        'has-scrollbar': hasVerticalScrollbar,\n                    },\n                    className,\n                )}\n                data-qa={qa}\n            >\n                <span className={b('content')}>\n                    <TextAreaControl {...props} {...commonProps} controlRef={handleRef} />\n                    {isClearControlVisible && (\n                        <ClearButton\n                            className={b('clear', {size})}\n                            size={mapTextInputSizeToButtonSize(size)}\n                            onClick={handleClear}\n                        />\n                    )}\n                </span>\n                <OuterAdditionalContent\n                    errorMessage={isErrorMsgVisible ? errorMessage : null}\n                    errorMessageId={errorMessageId}\n                    note={note}\n                    noteId={noteId}\n                />\n            </span>\n        );\n    },\n);\n"]}