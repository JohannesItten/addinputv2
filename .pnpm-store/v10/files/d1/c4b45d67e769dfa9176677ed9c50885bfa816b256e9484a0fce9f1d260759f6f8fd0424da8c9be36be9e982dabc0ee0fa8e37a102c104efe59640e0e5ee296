{"version":3,"file":"xpath.js","sourceRoot":"../../../../src","sources":["components/utils/xpath.ts"],"names":[],"mappings":";;AA2BA,4CAKC;AAuCD,4BAYC;;AAnFD,sEAA8B;AAE9B,0DAA0D;AAyB1D,SAAgB,gBAAgB,CAC5B,YAAiC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG;IAE7C,OAAO,CAAC,WAAW,EAAE,QAAQ,EAAE,EAAE,CAC7B,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;AACvE,CAAC;AAED,SAAS,SAAS,CAAC,IAAU;IACzB,OAAO,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,YAAY,CAAC;AAC/C,CAAC;AAED,SAAS,cAAc,CAAC,IAAiB,EAAE,OAA6B;IACpE,IAAI,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC;QAC5B,OAAO,EAAE,CAAC;IACd,CAAC;IACD,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;IAEvC,IAAI,KAAK,GAAG,IAAI,GAAG,EAAE,CAAC;IAEtB,MAAM,WAAW,GAAG,IAAI,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IAC7F,IAAI,WAAW,EAAE,CAAC;QACd,KAAK,IAAI,SAAS,WAAW,IAAI,CAAC;IACtC,CAAC;SAAM,CAAC;QACJ,MAAM,OAAO,GAAa,EAAE,CAAC;QAC7B,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,EAAE;YACjC,MAAM,YAAY,GAAG,OAAO,CAAC,cAAc,CAAC,EAAC,GAAG,IAAA,4BAAU,EAAC,SAAS,CAAC,EAAE,GAAG,EAAC,EAAE,SAAS,CAAC,CAAC;YACxF,IAAI,YAAY,EAAE,CAAC;gBACf,OAAO,CAAC,IAAI,CAAC,IAAA,6BAAW,EAAC,YAAY,CAAC,CAAC,CAAC;YAC5C,CAAC;QACL,CAAC,CAAC,CAAC;QACH,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;YACjB,KAAK,IAAI,YAAY,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC;QAC/C,CAAC;IACL,CAAC;IAED,OAAO,cAAc,CAAC,IAAI,CAAC,aAAa,EAAE,OAAO,CAAC,GAAG,KAAK,CAAC;AAC/D,CAAC;AAED,MAAM,mBAAmB,GAAyB;IAC9C,cAAc,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG;IAC5B,WAAW,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG;IACzB,SAAS,EAAE,KAAK;CACnB,CAAC;AAEF,SAAgB,QAAQ,CAAC,KAA2B,EAAE,OAAsB;IACxE,MAAM,eAAe,GAAG;QACpB,GAAG,mBAAmB;QACtB,GAAG,CAAC,OAAO,IAAI,EAAE,CAAC;KACrB,CAAC;IAEF,MAAM,KAAK,GAAG,cAAc,CAAC,KAAK,CAAC,aAAa,IAAI,KAAK,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;IAEnF,OAAO;QACH,KAAK;QACL,IAAI,EAAE,IAAA,qBAAG,EAAC,KAAK,CAAC;KACnB,CAAC;AACN,CAAC","sourcesContent":["import md5 from 'blueimp-md5';\n\nimport {formatClass, parseClass} from './class-transform';\nimport type {ElementClass} from './class-transform';\n\nexport interface ElementClassWithInfo extends ElementClass {\n    tag: string;\n}\n\nexport type XpathClassConverter = (\n    parsedClass: ElementClassWithInfo,\n    strClass: string,\n) => ElementClass | undefined;\n\nexport type XpathIdConverter = (id: string) => string | undefined;\n\nexport interface XpathOptions {\n    /** Function for converting and filtering classes */\n    classConverter?: XpathClassConverter;\n    /** Function for converting and filtering ids */\n    idConverter?: XpathIdConverter;\n    /** Flag for managing replaces from tag[@class='...'] to tag[@id='...'] if id is exist */\n    withoutId?: boolean;\n}\n\ntype InternalXpathOptions = Required<XpathOptions>;\n\nexport function withoutClassMods(\n    converter: XpathClassConverter = (arg) => arg,\n): XpathClassConverter {\n    return (parsedClass, strClass) =>\n        parsedClass.mod ? undefined : converter(parsedClass, strClass);\n}\n\nfunction isElement(node: Node): node is Element {\n    return node.nodeType === Node.ELEMENT_NODE;\n}\n\nfunction getXpathByNode(node: Node | null, options: InternalXpathOptions): string {\n    if (!node || !isElement(node)) {\n        return '';\n    }\n    const tag = node.tagName.toLowerCase();\n\n    let token = `/${tag}`;\n\n    const convertedId = node.id && !options.withoutId ? options.idConverter(node.id) : undefined;\n    if (convertedId) {\n        token += `[@id='${convertedId}']`;\n    } else {\n        const classes: string[] = [];\n        node.classList.forEach((className) => {\n            const currentClass = options.classConverter({...parseClass(className), tag}, className);\n            if (currentClass) {\n                classes.push(formatClass(currentClass));\n            }\n        });\n        if (classes.length) {\n            token += `[@class='${classes.join(' ')}']`;\n        }\n    }\n\n    return getXpathByNode(node.parentElement, options) + token;\n}\n\nconst defaultXpathOptions: InternalXpathOptions = {\n    classConverter: (arg) => arg,\n    idConverter: (arg) => arg,\n    withoutId: false,\n};\n\nexport function getXpath(event: React.SyntheticEvent, options?: XpathOptions) {\n    const internalOptions = {\n        ...defaultXpathOptions,\n        ...(options || {}),\n    };\n\n    const xpath = getXpathByNode(event.currentTarget || event.target, internalOptions);\n\n    return {\n        xpath,\n        hash: md5(xpath),\n    };\n}\n"]}