{"version":3,"file":"useSystemTheme.js","sourceRoot":"../../../../src","sources":["components/theme/useSystemTheme.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,EAAC,iBAAiB,EAAE,cAAc,EAAE,kBAAkB,EAAC,yBAAsB;AAGpF,SAAS,WAAW,CAChB,OAAuB,EACvB,OAA6C;IAE7C,MAAM,cAAc,GAAG,OAAO,OAAO,CAAC,gBAAgB,KAAK,UAAU,CAAC;IAEtE,IAAI,cAAc,EAAE,CAAC;QACjB,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IACjC,CAAC;SAAM,CAAC;QACJ,OAAO,CAAC,gBAAgB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IAChD,CAAC;IAED,OAAO,GAAG,EAAE;QACR,IAAI,cAAc,EAAE,CAAC;YACjB,OAAO,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QACpC,CAAC;aAAM,CAAC;YACJ,OAAO,CAAC,mBAAmB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QACnD,CAAC;IACL,CAAC,CAAC;AACN,CAAC;AAED,MAAM,UAAU,cAAc;IAC1B,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAY,cAAc,EAAE,CAAC,CAAC;IAEtE,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACjB,IAAI,CAAC,kBAAkB,EAAE,CAAC;YACtB,OAAO,SAAS,CAAC;QACrB,CAAC;QAED,SAAS,QAAQ,CAAC,KAA0B;YACxC,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;QAC/C,CAAC;QAED,MAAM,OAAO,GAAG,iBAAiB,EAAE,CAAC;QACpC,MAAM,WAAW,GAAG,WAAW,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;QAEnD,OAAO,GAAG,EAAE,CAAC,WAAW,EAAE,CAAC;IAC/B,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,OAAO,KAAK,CAAC;AACjB,CAAC","sourcesContent":["import * as React from 'react';\n\nimport {getDarkMediaMatch, getSystemTheme, supportsMatchMedia} from './dom-helpers';\nimport type {ThemeType} from './types';\n\nfunction addListener(\n    matcher: MediaQueryList,\n    handler: (event: MediaQueryListEvent) => void,\n): VoidFunction {\n    const isLegacyMethod = typeof matcher.addEventListener !== 'function';\n\n    if (isLegacyMethod) {\n        matcher.addListener(handler);\n    } else {\n        matcher.addEventListener('change', handler);\n    }\n\n    return () => {\n        if (isLegacyMethod) {\n            matcher.removeListener(handler);\n        } else {\n            matcher.removeEventListener('change', handler);\n        }\n    };\n}\n\nexport function useSystemTheme(): ThemeType {\n    const [theme, setTheme] = React.useState<ThemeType>(getSystemTheme());\n\n    React.useEffect(() => {\n        if (!supportsMatchMedia) {\n            return undefined;\n        }\n\n        function onChange(event: MediaQueryListEvent) {\n            setTheme(event.matches ? 'dark' : 'light');\n        }\n\n        const matcher = getDarkMediaMatch();\n        const unsubscribe = addListener(matcher, onChange);\n\n        return () => unsubscribe();\n    }, []);\n\n    return theme;\n}\n"]}