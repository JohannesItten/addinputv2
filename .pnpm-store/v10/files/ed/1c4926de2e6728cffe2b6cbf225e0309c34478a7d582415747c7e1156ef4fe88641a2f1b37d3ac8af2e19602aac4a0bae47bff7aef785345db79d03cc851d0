{"version":3,"file":"getListParsedState.js","sourceRoot":"../../../../../src","sources":["components/useList/utils/getListParsedState.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n    InitialListParsedState,\n    ListFlattenItemType,\n    ListItemId,\n    ListItemType,\n    ListTreeItemType,\n    ParsedState,\n} from '../types';\n\nimport {getListItemId} from './getListItemId';\nimport {getGroupItemId, parseGroupItemId} from './groupItemId';\nimport {isTreeItemGuard} from './isTreeItemGuard';\n\ninterface TraverseItemProps<T> {\n    item: ListFlattenItemType<T>;\n    index: number;\n}\ninterface TraverseTreeItemProps<T> {\n    /**\n     * For example T is entity type with id what represents db id\n     * So now you can use it id as a list item id in internal state\n     */\n    getItemId?(item: T): ListItemId;\n    item: ListTreeItemType<T>;\n    index: number;\n    parentId?: ListItemId;\n    parentGroupedId?: string;\n}\n\ntype ListParsedStateResult<T> = ParsedState<T> & {\n    initialState: InitialListParsedState;\n};\n\nexport interface GetListParsedStateProps<T> {\n    items: ListItemType<T>[];\n    defaultExpandedState?: 'closed' | 'expanded';\n    /**\n     * For example T is entity type with id what represents db id\n     * So now you can use it id as a list item id in internal state\n     */\n    getItemId?: (item: T) => ListItemId;\n}\nexport function getListParsedState<T>({\n    items,\n    defaultExpandedState = 'expanded',\n    getItemId,\n}: GetListParsedStateProps<T>): ListParsedStateResult<T> {\n    const result: ListParsedStateResult<T> = {\n        itemsById: {},\n        groupsState: {},\n        itemsState: {},\n        initialState: {\n            disabledById: {},\n            selectedById: {},\n            expandedById: {},\n        },\n    };\n\n    const traverseItem = ({item, index}: TraverseItemProps<T>) => {\n        const id = getListItemId({groupedId: String(index), item, getItemId});\n\n        result.itemsById[id] = item;\n\n        if (!result.itemsState[id]) {\n            result.itemsState[id] = {\n                indentation: 0,\n            };\n        }\n\n        if (item && typeof item === 'object') {\n            if ('selected' in item && typeof item.selected === 'boolean') {\n                result.initialState.selectedById[id] = item.selected;\n            }\n\n            if ('disabled' in item && typeof item.disabled === 'boolean') {\n                result.initialState.disabledById[id] = item.disabled;\n            }\n        }\n    };\n\n    const traverseTreeItem = ({\n        item,\n        index,\n        parentGroupedId,\n        parentId,\n    }: TraverseTreeItemProps<T>) => {\n        const groupedId = getGroupItemId(index, parentGroupedId);\n        const id = getListItemId({groupedId, item, getItemId});\n\n        if (parentId) {\n            result.groupsState[parentId].childrenIds.push(id);\n        }\n\n        result.itemsById[id] = item.data;\n\n        if (!result.itemsState[id]) {\n            result.itemsState[id] = {\n                indentation: 0,\n            };\n        }\n\n        if (typeof parentId !== 'undefined') {\n            result.itemsState[id].parentId = parentId;\n        }\n\n        if (typeof item.selected !== 'undefined') {\n            result.initialState.selectedById[id] = item.selected;\n        }\n\n        if (typeof item.disabled !== 'undefined') {\n            result.initialState.disabledById[id] = item.disabled;\n        }\n\n        if (groupedId) {\n            result.itemsState[id].indentation = parseGroupItemId(groupedId).length - 1;\n        }\n\n        if (item.children) {\n            result.groupsState[id] = {\n                childrenIds: [],\n            };\n\n            if (result.initialState.expandedById) {\n                if (typeof item.expanded === 'undefined') {\n                    result.initialState.expandedById[id] = defaultExpandedState === 'expanded';\n                } else {\n                    result.initialState.expandedById[id] = item.expanded;\n                }\n            }\n\n            item.children.forEach((treeItem, index) => {\n                traverseTreeItem({\n                    item: treeItem,\n                    index,\n                    parentGroupedId: groupedId,\n                    parentId: id,\n                });\n            });\n        }\n    };\n\n    items.forEach((item, index) =>\n        isTreeItemGuard(item) ? traverseTreeItem({item, index}) : traverseItem({item, index}),\n    );\n\n    return result;\n}\n"]}