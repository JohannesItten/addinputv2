{"version":3,"file":"types.js","sourceRoot":"../../../../src","sources":["components/Alert/types.ts"],"names":[],"mappings":"","sourcesContent":["import type * as React from 'react';\n\nimport type {ButtonProps} from '../Button';\nimport type {QAProps} from '../types';\n\nexport type AlertTheme = 'clear' | 'normal' | 'info' | 'success' | 'warning' | 'danger' | 'utility';\nexport type AlertView = 'filled' | 'outlined';\nexport type AlertLayout = 'vertical' | 'horizontal';\nexport type AlertCorners = 'rounded' | 'square';\n\nexport type AlertContextType = {\n    /**\n     * Override actions position\n     *\n     * variants:\n     * - `vertical` - bottom (default);\n     * - `horizontal` - right;\n     */\n    layout: AlertLayout;\n    view: AlertView;\n};\n\nexport type AlertContextProviderProps = React.PropsWithChildren<AlertContextType>;\n\nexport interface AlertProps extends QAProps, Partial<AlertContextType> {\n    title?: React.ReactNode;\n    message?: React.ReactNode;\n    theme?: AlertTheme;\n    /**\n     * Override default icons\n     */\n    icon?: React.ReactNode;\n    /**\n     * @default - normal\n     */\n    corners?: AlertCorners;\n    onClose?: () => void;\n    /**\n     * Add you Actions to alert component:\n     * - by declaration:\n     * ```tsx\n     * actions: [{text: '...', handler: () => {}}]\n     * ```\n     * - custom component with predicted way:\n     * ```tsx\n     * actions: (\n     *  <Alert.Actions>\n     *      <Alert.Action onClick={...}>...</Alert.Action>\n     *  </Alert.Actions>\n     * )\n     * ```\n     * - full custom:\n     * ```tsx\n     * actions: (\n     *  <Flex>\n     *      <img src={...} />\n     *      <Text>...</Text>\n     *  </Flex>\n     * )\n     * ```\n     */\n    actions?: React.ReactNode | AlertAction[];\n    /**\n     * Center all content in vertical direction,\n     * useful if for some reason you actions takes more space then text\n     * or needed icon to be on the middle of the card\n     *\n     * @default - 'baseline'\n     */\n    align?: 'center' | 'baseline';\n    style?: React.CSSProperties;\n    className?: string;\n}\n\nexport interface AlertAction {\n    text: string;\n    handler?: () => void;\n}\n\nexport interface AlertIconProps {\n    theme: AlertTheme;\n    view?: AlertView;\n    size?: number;\n    className?: string;\n}\n\nexport interface AlertActionsProps {\n    className?: string;\n    items?: AlertAction[];\n    children?: React.ReactNode | React.ReactNode[];\n}\nexport type AlertActionProps = ButtonProps;\nexport interface AlertTitleProps {\n    className?: string;\n    text: string;\n}\n"]}