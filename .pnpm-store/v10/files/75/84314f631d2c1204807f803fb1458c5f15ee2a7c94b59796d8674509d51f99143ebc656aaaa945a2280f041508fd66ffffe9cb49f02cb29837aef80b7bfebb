{"version":3,"file":"ListItemView.js","sourceRoot":"../../../../../src","sources":["components/lab/ListItemView/ListItemView.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport {Check} from '@gravity-ui/icons';\nimport {focusable} from 'tabbable';\n\nimport {useForkRef} from '../../../hooks';\nimport {ArrowToggle} from '../../ArrowToggle';\nimport {Button} from '../../Button';\nimport {Icon} from '../../Icon';\nimport type {DOMProps} from '../../types';\nimport {block} from '../../utils/cn';\nimport {filterDOMProps} from '../../utils/filterDOMProps';\n\nimport './ListItemView.scss';\n\nconst b = block('lab-list-item-view');\n\nexport interface ListItemViewProps<T extends React.ElementType = 'div'> extends DOMProps {\n    id?: string;\n    children: React.ReactNode;\n    size?: 's' | 'm' | 'l' | 'xl';\n    selected?: boolean;\n    active?: boolean;\n    hovered?: boolean;\n    onClick?: (e: React.MouseEvent) => void;\n    disabled?: boolean;\n    selectionStyle?: 'check' | 'highlight' | 'none';\n    collapsible?: boolean;\n    collapsed?: boolean;\n    onCollapseChange?: (collapsed: boolean) => void;\n    draggable?: boolean;\n    nestedLevel?: number;\n    startContent?: React.ReactNode;\n    description?: React.ReactNode;\n    endContent?: React.ReactNode;\n    isContainer?: boolean;\n    component?: T;\n    componentProps?: React.ComponentProps<T>;\n}\n\nexport const ListItemView = React.forwardRef(ListItemViewComponent) as <\n    T extends React.ElementType = 'div',\n>(\n    props: ListItemViewProps<T> & Omit<React.ComponentPropsWithRef<T>, keyof ListItemViewProps<T>>,\n) => React.ReactElement;\n\nexport function ListItemViewComponent(\n    props: ListItemViewProps & Omit<React.ComponentPropsWithoutRef<'div'>, keyof ListItemViewProps>,\n    ref: React.ForwardedRef<HTMLDivElement>,\n) {\n    const {\n        size,\n        active,\n        selected,\n        hovered,\n        disabled,\n        onClick,\n        selectionStyle,\n        className,\n        style,\n        collapsed,\n        onCollapseChange,\n        children,\n        isContainer = false,\n        component: Component = 'div',\n        componentProps,\n        collapsible: _collapsible,\n        description,\n        draggable: _draggable,\n        startContent: _startContent,\n        endContent: _endContent,\n        nestedLevel: _nestedLevel,\n    } = props;\n    const containerRef = React.useRef(null);\n    const componentRef = useForkRef(containerRef, ref);\n    return (\n        <Component\n            ref={componentRef}\n            {...componentProps}\n            {...filterDOMProps(props)}\n            className={b(\n                {\n                    size,\n                    selected: selected && selectionStyle === 'highlight',\n                    disabled,\n                    active,\n                    hovered: typeof hovered === 'boolean' && (hovered ? 'yes' : 'no'),\n                    'is-container': isContainer,\n                    'has-description': Boolean(description),\n                },\n                componentProps?.className ?? className,\n            )}\n            style={componentProps?.style ?? style}\n            onClick={(e) => {\n                if (disabled) {\n                    e.preventDefault();\n                    return;\n                }\n                const target = e.target;\n                if (\n                    target instanceof Element &&\n                    containerRef.current &&\n                    focusable(containerRef.current).some((el) => el.contains(target))\n                ) {\n                    return;\n                }\n\n                if (\n                    typeof onClick === 'function' ||\n                    typeof componentProps?.onClick === 'function'\n                ) {\n                    onClick?.(e);\n                    componentProps?.onClick?.(e);\n                } else if (typeof onCollapseChange === 'function') {\n                    onCollapseChange(!collapsed);\n                }\n            }}\n        >\n            {isContainer ? (\n                children\n            ) : (\n                <ListItemViewContent {...props}>{children}</ListItemViewContent>\n            )}\n        </Component>\n    );\n}\n\nfunction ListItemViewContent({\n    selected,\n    disabled,\n    selectionStyle,\n    draggable,\n    nestedLevel,\n    collapsible,\n    collapsed,\n    onCollapseChange,\n    startContent,\n    children,\n    description,\n    endContent,\n}: ListItemViewProps) {\n    return (\n        <React.Fragment>\n            {draggable ? <Slot name=\"drag-handle\" /> : null}\n            {nestedLevel ? <Slot name=\"spacer\" style={{'--_--nested-level': nestedLevel}} /> : null}\n            {collapsible ? (\n                <Slot name=\"collapsed-toggle\">\n                    <Button\n                        className={b('collapsible')}\n                        view=\"flat\"\n                        tabIndex={-1}\n                        disabled={disabled}\n                        onClick={() => {\n                            onCollapseChange?.(!collapsed);\n                        }}\n                        aria-hidden=\"true\"\n                    >\n                        <Button.Icon>\n                            <ArrowToggle\n                                className={b('arrow', {direction: collapsed ? 'bottom' : 'top'})}\n                            />\n                        </Button.Icon>\n                    </Button>\n                </Slot>\n            ) : null}\n            {selectionStyle === 'check' && (\n                <Slot name=\"checked\">\n                    <div className={b('checked')}>\n                        {selected ? <Icon data={Check} className={b('icon')} /> : null}\n                    </div>\n                </Slot>\n            )}\n            {startContent ? <Slot name=\"start-content\">{startContent}</Slot> : null}\n            <Slot name=\"content\">{children}</Slot>\n            {description ? <Slot name=\"description\">{description}</Slot> : null}\n            {endContent ? <Slot name=\"end-content\">{endContent}</Slot> : null}\n        </React.Fragment>\n    );\n}\n\nfunction Slot({\n    name,\n    children,\n    className,\n    style,\n}: {\n    name:\n        | 'drag-handle'\n        | 'spacer'\n        | 'collapsed-toggle'\n        | 'checked'\n        | 'start-content'\n        | 'content'\n        | 'description'\n        | 'end-content'\n        | 'container';\n    children?: React.ReactNode;\n} & DOMProps) {\n    return (\n        <div className={b('slot', {name}, className)} style={style}>\n            {children}\n        </div>\n    );\n}\n"]}