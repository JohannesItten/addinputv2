{"version":3,"file":"index.js","sourceRoot":"../../../../../../src","sources":["components/Select/hooks-public/useSelectOptions/index.ts"],"names":[],"mappings":";;AAuCA,4DAMC;AAED,4CAaC;;AA5DD,qDAA+B;AAE/B,kDAA4C;AAE5C,0CAAyE;AAczE,SAAS,gBAAgB,CAAC,OAAyC;IAC/D,OAAO,OAAO,CAAE,OAA0B,CAAC,uBAAW,CAAC,CAAC,CAAC;AAC7D,CAAC;AAED;;;;;;;;;;;;;;;;GAgBG;AACH,SAAgB,wBAAwB,CAAI,OAAyB;IACjE,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,EAAE,CAAC;QAC7B,MAAM,KAAK,CAAC,2DAA2D,CAAC,CAAC;IAC7E,CAAC;IAED,OAAO,OAAO,CAAC,uBAAW,CAAC,CAAC,eAAe,CAAC;AAChD,CAAC;AAED,SAAgB,gBAAgB,CAAgB,KAA+B;IAC3E,MAAM,EAAC,MAAM,GAAG,EAAE,EAAE,UAAU,EAAE,YAAY,EAAC,GAAG,KAAK,CAAC;IACtD,MAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE;QAC/B,OAAO,gBAAgB,CAAC,KAAK,CAAC,OAAO,CAAC;YAClC,CAAC,CAAC,KAAK,CAAC,OAAO;YACf,CAAC,CAAE,IAAA,yBAAiB,EAAC,KAAK,CAAC,OAAO,CAAoB,CAAC;IAC/D,CAAC,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;IACpB,MAAM,eAAe,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE;QACvC,OAAO,UAAU,CAAC,CAAC,CAAC,IAAA,iCAAyB,EAAC,EAAC,OAAO,EAAE,MAAM,EAAE,YAAY,EAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;IAC7F,CAAC,EAAE,CAAC,MAAM,EAAE,UAAU,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC,CAAC;IAChD,OAAO,CAAC,uBAAW,CAAC,CAAC,iBAAiB,CAAC,GAAG,eAAe,CAAC;IAE1D,OAAO,OAAO,CAAC;AACnB,CAAC","sourcesContent":["import * as React from 'react';\n\nimport {FLATTEN_KEY} from '../../constants';\nimport type {SelectOptions, SelectProps} from '../../types';\nimport {getFilteredFlattenOptions, getFlattenOptions} from '../../utils';\nimport type {FlattenOptions} from '../../utils';\n\nexport interface UseSelectOptionsProps<T = any> {\n    /** [Select options](https://gravity-ui.com/components/uikit/select#options). */\n    options: SelectOptions<T>;\n    /** Value to filter options. Used with `filterable: true` only. */\n    filter?: string;\n    /** Indicates that `filter` and `filterOption` properties can be used. */\n    filterable?: boolean;\n    /** Used to compare option with filter. Used with `filterable: true` only. */\n    filterOption?: SelectProps['filterOption'];\n}\n\nfunction isFlattenOptions(options: UseSelectOptionsProps['options']): options is FlattenOptions {\n    return Boolean((options as FlattenOptions)[FLATTEN_KEY]);\n}\n\n/**\n * Helps to manage options data before passing it into `Select` component.\n *\n * @param {SelectOptions} options\n * @returns preprared options for `Select` component.\n *\n * @example\n *\n * import {Select, getSelectFilteredOptions, useSelectOptions} from '@gravity-ui/uikit';\n *\n * function App() {\n *   const options = useSelectOptions({options: [{value: '1'}, {value: '2'}]});\n *   const filteredOptions = getSelectFilteredOptions(options);\n *   // Do some staff with prepared options\n *   return <Select options={options} />\n * }\n */\nexport function getSelectFilteredOptions<T>(options: SelectOptions<T>): SelectOptions<T> {\n    if (!isFlattenOptions(options)) {\n        throw Error('You should use options generated by useSelectOptions hook');\n    }\n\n    return options[FLATTEN_KEY].filteredOptions;\n}\n\nexport function useSelectOptions<T extends any>(props: UseSelectOptionsProps<T>): SelectOptions<T> {\n    const {filter = '', filterable, filterOption} = props;\n    const options = React.useMemo(() => {\n        return isFlattenOptions(props.options)\n            ? props.options\n            : (getFlattenOptions(props.options) as FlattenOptions);\n    }, [props.options]);\n    const filteredOptions = React.useMemo(() => {\n        return filterable ? getFilteredFlattenOptions({options, filter, filterOption}) : options;\n    }, [filter, filterable, filterOption, options]);\n    options[FLATTEN_KEY]['filteredOptions'] = filteredOptions;\n\n    return options;\n}\n"]}