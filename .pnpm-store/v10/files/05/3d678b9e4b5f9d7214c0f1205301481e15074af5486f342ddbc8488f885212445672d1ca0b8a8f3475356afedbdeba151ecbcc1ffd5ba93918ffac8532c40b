{"version":3,"file":"types.js","sourceRoot":"../../../../src","sources":["components/Select/types.ts"],"names":[],"mappings":"","sourcesContent":["import type * as React from 'react';\n\nimport type {UseOpenProps} from '../../hooks/useSelect/types';\nimport type {PopupPlacement} from '../Popup';\nimport type {InputControlPin, InputControlSize, InputControlView} from '../controls';\nimport type {AriaLabelingProps, ControlGroupOption, QAProps} from '../types';\n\nimport type {Option, OptionGroup} from './tech-components';\n\nexport type SelectRenderClearArgs = {\n    renderIcon?: () => React.ReactNode;\n};\n\nexport type SelectRenderTriggerProps = AriaLabelingProps &\n    Pick<\n        React.ButtonHTMLAttributes<HTMLElement>,\n        | 'id'\n        | 'type'\n        | 'role'\n        | 'aria-controls'\n        | 'aria-haspopup'\n        | 'aria-expanded'\n        | 'aria-activedescendant'\n        | 'onClick'\n        | 'onKeyDown'\n        | 'disabled'\n    >;\n\nexport type SelectRenderControlProps<T extends HTMLElement = HTMLElement> = {\n    onClear: () => void;\n    renderClear: (args: SelectRenderClearArgs) => React.ReactNode;\n    renderCounter: () => React.ReactNode;\n    ref: React.Ref<T>;\n    open: boolean;\n    disabled?: boolean;\n    triggerProps: SelectRenderTriggerProps;\n};\n\nexport type SelectRenderControlOptions = {\n    value: SelectProps['value'];\n};\nexport type SelectRenderControl<T extends HTMLElement = HTMLElement> = (\n    props: SelectRenderControlProps<T>,\n    options: SelectRenderControlOptions,\n) => React.ReactElement;\n\nexport type SelectRenderOptionViewParams = {\n    itemHeight: number;\n};\n\nexport type SelectRenderOption<T> = (\n    option: SelectOption<T>,\n    options: SelectRenderOptionViewParams,\n) => React.ReactElement;\n\nexport type SelectRenderOptionGroup<T> = (\n    option: Pick<SelectOptionGroup<T>, 'label'>,\n    options: SelectRenderOptionViewParams,\n) => React.ReactElement;\n\nexport type SelectRenderPopup = (popupItems: {\n    renderFilter: () => React.JSX.Element | null;\n    renderList: () => React.JSX.Element;\n}) => React.ReactElement;\n\nexport type SelectFilterInputProps = {value: string} & Pick<\n    React.InputHTMLAttributes<HTMLInputElement>,\n    | 'placeholder'\n    | 'onKeyDown'\n    | 'onChange'\n    | 'size'\n    | 'aria-label'\n    | 'aria-controls'\n    | 'aria-activedescendant'\n>;\nexport type SelectRenderFilter = (props: {\n    /** @deprecated use inputProps instead */\n    onChange: (filter: string) => void;\n    /** @deprecated use inputProps instead */\n    onKeyDown: (e: React.KeyboardEvent<HTMLElement>) => void;\n    /** @deprecated use inputProps instead */\n    value: string;\n    ref: React.Ref<HTMLInputElement>;\n    style: React.CSSProperties;\n    inputProps: SelectFilterInputProps;\n}) => React.ReactElement;\n\nexport type SelectSize = InputControlSize;\n\nexport type SelectRenderCounter = (\n    originalComponent: React.ReactElement<SelectCounterProps>,\n    counterProps: SelectCounterProps,\n) => React.ReactElement;\n\nexport type SelectProps<T = any> = AriaLabelingProps &\n    QAProps &\n    UseOpenProps & {\n        onUpdate?: (value: string[]) => void;\n        renderControl?: SelectRenderControl;\n        renderFilter?: SelectRenderFilter;\n        renderOption?: SelectRenderOption<T>;\n        renderOptionGroup?: SelectRenderOptionGroup<T>;\n        renderSelectedOption?: (option: SelectOption<T>, index: number) => React.ReactElement;\n        renderEmptyOptions?: ({filter}: {filter: string}) => React.ReactElement;\n        renderPopup?: SelectRenderPopup;\n        renderCounter?: SelectRenderCounter;\n        getOptionHeight?: (option: SelectOption<T>, index: number) => number;\n        getOptionGroupHeight?: (option: SelectOptionGroup<T>, index: number) => number;\n        filterOption?: (option: SelectOption<T>, filter: string) => boolean;\n        view?: InputControlView;\n        size?: SelectSize;\n        pin?: InputControlPin;\n        width?: 'auto' | 'max' | number;\n        popupWidth?: 'fit' | number;\n        virtualizationThreshold?: number;\n        className?: string;\n        controlClassName?: string;\n        popupClassName?: string;\n        popupPlacement?: PopupPlacement;\n        label?: string;\n        placeholder?: React.ReactNode;\n        filterPlaceholder?: string;\n        value?: string[];\n        defaultValue?: string[];\n        options?: (SelectOption<T> | SelectOptionGroup<T>)[];\n        /**\n         * @deprecated Prop `error` has a lower priority than `errorMessage`. Use `errorMessage` instead\n         */\n        error?: string | boolean;\n        /** Determines content of the error message */\n        errorMessage?: React.ReactNode;\n        /** Determines whether the error message will be placed under the input field as text or in the tooltip */\n        errorPlacement?: 'outside' | 'inside';\n        /** Describes the validation state */\n        validationState?: 'invalid';\n        multiple?: boolean;\n        filterable?: boolean;\n        filter?: string;\n        onFilterChange?: (filter: string) => void;\n        disablePortal?: boolean;\n        hasClear?: boolean;\n        onFocus?: (e: React.FocusEvent) => void;\n        onBlur?: (e: React.FocusEvent) => void;\n        loading?: boolean;\n        onLoadMore?: () => void;\n        children?:\n            | React.ReactElement<SelectOption<T>, typeof Option>\n            | React.ReactElement<SelectOption<T>, typeof Option>[]\n            | React.ReactElement<SelectOptionGroup<T>, typeof OptionGroup>\n            | React.ReactElement<SelectOptionGroup<T>, typeof OptionGroup>[];\n        id?: string;\n        /**Shows selected options count if multiple selection is avalable */\n        hasCounter?: boolean;\n        title?: string;\n        name?: string;\n        form?: string;\n        disabled?: boolean;\n    };\n\nexport type SelectOption<T = any> = QAProps &\n    ControlGroupOption & {\n        text?: string;\n        data?: T;\n    };\n\nexport type SelectOptionGroup<T = any> = {\n    /** Label is a string which displayed above the options group.\n     * If label is empty string, group item height will be 0 and only border will be displayed */\n    label: string;\n    data?: T;\n    options?: SelectOption<T>[];\n    children?:\n        | React.ReactElement<SelectOption, typeof Option>\n        | React.ReactElement<SelectOption, typeof Option>[];\n};\n\ntype SelectClearIconProps = {\n    size: SelectSize;\n    renderIcon: SelectRenderClearArgs['renderIcon'];\n};\n\nexport type SelectClearProps = SelectClearIconProps & {\n    onClick: (e: React.MouseEvent) => void;\n    /**\n     * select control (button) has styles on focus, focus-in with animation on click event\n     * to prevent this on click by clear icon need to set class on button\n     * with disabling animation on button\n     * @param e\n     */\n    onMouseEnter: (e: React.MouseEvent) => void;\n    onMouseLeave: (e: React.MouseEvent) => void;\n};\n\nexport type SelectCounterProps = {\n    /** amount of selected elements to show */\n    count: number;\n    /** size of the parent element */\n    size: SelectSize;\n    /** disabled state of the parent element*/\n    disabled?: boolean;\n};\n\nexport type SelectOptions<T = any> = NonNullable<SelectProps<T>['options']>;\n"]}