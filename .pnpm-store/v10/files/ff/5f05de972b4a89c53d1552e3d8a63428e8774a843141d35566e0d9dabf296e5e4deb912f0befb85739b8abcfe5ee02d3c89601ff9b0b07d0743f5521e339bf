{"version":3,"file":"useDropdownActions.js","sourceRoot":"../../../../../../src","sources":["components/ActionsPanel/components/hooks/useDropdownActions.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;AAEb,wEAAqC;AAa9B,MAAM,kBAAkB,GAAG,CAAC,EAC/B,aAAa,EACb,WAAW,EACX,aAAa,GACO,EAAE,EAAE;IACxB,MAAM,OAAO,GAAG;QACZ,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QAC9D,GAAG,WAAW;KACjB,CAAC;IACF,MAAM,MAAM,GAAG,IAAA,iBAAO,EAAC,OAAO,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAEnE,MAAM,UAAU,GAAG,IAAI,GAAG,EAAU,CAAC;IACrC,MAAM,aAAa,GAA8C,EAAE,CAAC;IAEpE,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE,CAAC;QAC3B,MAAM,KAAK,GAAG,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC;QACpC,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE,CAAC;YAC/B,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YACzC,SAAS;QACb,CAAC;QACD,IAAI,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC;YACxB,SAAS;QACb,CAAC;QACD,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACtB,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,aAAa,EAAE,EAAE,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;IAC1F,CAAC;IAED,OAAO,aAAa,CAAC;AACzB,CAAC,CAAC;AA5BW,QAAA,kBAAkB,sBA4B7B","sourcesContent":["'use client';\n\nimport groupBy from 'lodash/groupBy';\n\nimport type {DropdownMenuItem} from '../../../DropdownMenu';\nimport type {ActionsPanelItem} from '../../types';\n\nimport type {VisibilityMap} from './types';\n\ntype UseDropdownActionsArg = {\n    buttonActions: ActionsPanelItem[];\n    restActions: ActionsPanelItem[];\n    visibilityMap: VisibilityMap;\n};\n\nexport const useDropdownActions = ({\n    buttonActions,\n    restActions,\n    visibilityMap,\n}: UseDropdownActionsArg) => {\n    const actions = [\n        ...buttonActions.filter((action) => !visibilityMap[action.id]),\n        ...restActions,\n    ];\n    const groups = groupBy(actions, (action) => action.dropdown.group);\n\n    const usedGroups = new Set<string>();\n    const dropdownItems: (DropdownMenuItem | DropdownMenuItem[])[] = [];\n\n    for (const action of actions) {\n        const group = action.dropdown.group;\n        if (typeof group === 'undefined') {\n            dropdownItems.push(action.dropdown.item);\n            continue;\n        }\n        if (usedGroups.has(group)) {\n            continue;\n        }\n        usedGroups.add(group);\n        dropdownItems.push(groups[group].map((groupedAction) => groupedAction.dropdown.item));\n    }\n\n    return dropdownItems;\n};\n"]}