{"version":3,"file":"Virtualizer.js","sourceRoot":"../../../../../src","sources":["components/lab/Virtualizer/Virtualizer.tsx"],"names":[],"mappings":"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","sourcesContent":["'use client';\n\nimport * as React from 'react';\n\nimport type {\n    Range,\n    Rect,\n    VirtualItem,\n    Virtualizer as VirtualizerInstance,\n} from '@tanstack/react-virtual';\nimport {defaultRangeExtractor, useVirtualizer} from '@tanstack/react-virtual';\n\nimport {useForkRef} from '../../../hooks';\nimport type {Key} from '../../types';\n\nimport {useLoadMore} from './useLoadMore';\nimport type {Loadable} from './useLoadMore';\n\ntype Item = {index: number; key: Key};\n\nexport type ScrollAlignment = 'start' | 'center' | 'end' | 'auto';\n\nexport interface VirtualizerApi {\n    scrollToOffset: (offset: number, align?: ScrollAlignment) => void;\n    scrollToIndex: (index: number, align?: ScrollAlignment) => void;\n    scrollOffset: number | null;\n    scrollRect: Rect | null;\n}\n\ninterface VirtualizerProps extends Loadable, React.HTMLAttributes<HTMLDivElement> {\n    /** The ref of the virtualizer api. */\n    apiRef?: React.Ref<VirtualizerApi>;\n    /** The ref of the scroll container element. */\n    containerRef?: React.Ref<HTMLElement>;\n    /** The number of first level items in the list. */\n    count: number;\n    /** The size of the item in the list. Size should include all children. For children items parentKey is passed. */\n    getItemSize: (index: number, parentKey?: Key) => number;\n    /** The key of the item in the list. For children items parentKey is passed. */\n    getItemKey: (index: number, parentKey?: Key) => Key;\n    /** Disables virtualization of the list. This might be useful for small lists. */\n    disableVirtualization?: boolean;\n    /** Renders the row of the list. */\n    renderRow: (\n        /** The item of the row.\n         * @param item.index The index of the item in current level.\n         * @param item.key The key of the item in the list.\n         */\n        item: Item,\n        /** The key of the parent item in the list. */\n        parentKey: Key | undefined,\n        /** Renders the children of the row.\n         * @param options.count The number of children items.\n         * @param options.height The self height of the row.\n         */\n        renderChildren: (options: {count: number; height: number}) => React.ReactNode,\n    ) => React.ReactNode;\n    /** The indexes of the persisted items. Each item is an array of indexes in the hierarchy. */\n    persistedIndexes?: Array<number[]>;\n}\n\nexport function Virtualizer({\n    apiRef,\n    containerRef,\n    count,\n    getItemSize,\n    getItemKey,\n    disableVirtualization,\n    renderRow,\n    loading,\n    onLoadMore,\n    persistedIndexes,\n    ...props\n}: VirtualizerProps) {\n    const scrollContainerRef = React.useRef<HTMLDivElement>(null);\n    const ref = useForkRef(containerRef, scrollContainerRef);\n\n    const {rangeExtractor, persistedChildren} =\n        getRangeExtractorAndChildrenIndexes(persistedIndexes);\n    const virtualizer = useVirtualizer({\n        count,\n        getScrollElement: () => scrollContainerRef.current,\n        getItemKey,\n        estimateSize: getItemSize,\n        rangeExtractor,\n        overscan: disableVirtualization ? count : 0,\n    });\n\n    React.useImperativeHandle(\n        apiRef,\n        () => ({\n            scrollToOffset: (offset: number, align: ScrollAlignment = 'auto') => {\n                virtualizer.scrollToOffset(virtualizer.getOffsetForAlignment(offset, align));\n            },\n            scrollToIndex: (index: number, align: ScrollAlignment = 'auto') => {\n                virtualizer.scrollToIndex(index, {align});\n            },\n            get scrollOffset() {\n                return virtualizer.scrollOffset;\n            },\n            get scrollRect() {\n                return virtualizer.scrollRect;\n            },\n        }),\n        [virtualizer],\n    );\n\n    const visibleItems = virtualizer.getVirtualItems();\n\n    useLoadMore(scrollContainerRef, {onLoadMore, loading});\n\n    return (\n        <div\n            {...props}\n            ref={ref}\n            style={{\n                ...props.style,\n                overflow: 'auto',\n                contain: disableVirtualization ? undefined : 'strict',\n            }}\n        >\n            {renderRows({\n                totalHeight: virtualizer.getTotalSize(),\n                start: 0,\n                items: visibleItems,\n                scrollContainer: virtualizer.scrollElement,\n                parentKey: undefined,\n                renderRow,\n                getItemSize,\n                getItemKey,\n                disableVirtualization,\n                persistedChildren,\n                measureElement: virtualizer.measureElement,\n            })}\n        </div>\n    );\n}\n\nfunction renderRows({\n    totalHeight,\n    start,\n    parentKey,\n    getItemSize,\n    getItemKey,\n    renderRow,\n    items,\n    scrollContainer,\n    disableVirtualization,\n    persistedChildren,\n    measureElement,\n}: {\n    totalHeight: number;\n    start: number;\n    parentKey?: Key;\n    getItemSize: (index: number, key?: Key) => number;\n    getItemKey: (index: number, key?: Key) => Key;\n    renderRow: (\n        item: Item,\n        parentKey: Key | undefined,\n        renderChildren: (options: {count: number; height: number}) => React.ReactNode,\n    ) => React.ReactNode;\n    items: VirtualItem[];\n    scrollContainer: HTMLElement | null;\n    disableVirtualization?: boolean;\n    persistedChildren?: Map<number, Array<number[]>>;\n    measureElement?: VirtualizerInstance<HTMLElement, Element>['measureElement'];\n}) {\n    return (\n        <div\n            role=\"presentation\"\n            style={\n                disableVirtualization\n                    ? {contentVisibility: 'auto', containIntrinsicBlockSize: totalHeight}\n                    : {\n                          height: totalHeight,\n                          width: '100%',\n                          position: 'relative',\n                      }\n            }\n        >\n            {items.map((virtualRow) => (\n                <div\n                    ref={measureElement}\n                    data-key={virtualRow.key}\n                    data-index={virtualRow.index}\n                    key={virtualRow.key}\n                    role=\"presentation\"\n                    style={\n                        disableVirtualization\n                            ? undefined\n                            : {\n                                  position: 'absolute',\n                                  top: virtualRow.start - start,\n                                  left: 0,\n                                  width: '100%',\n                              }\n                    }\n                >\n                    {renderRow(virtualRow as Item, parentKey, ({height, count}) => (\n                        <ChildrenVirtualizer\n                            key={virtualRow.key}\n                            count={count}\n                            parentKey={virtualRow.key as Key}\n                            start={virtualRow.start + height}\n                            getItemSize={getItemSize}\n                            getItemKey={getItemKey}\n                            renderRow={renderRow}\n                            scrollContainer={scrollContainer}\n                            disableVirtualization={disableVirtualization}\n                            persistedIndexes={persistedChildren?.get(virtualRow.index)}\n                        />\n                    ))}\n                </div>\n            ))}\n        </div>\n    );\n}\n\nfunction ChildrenVirtualizer(props: {\n    start: number;\n    scrollContainer: HTMLElement | null;\n    count: number;\n    getItemSize: (index: number, key?: Key) => number;\n    getItemKey: (index: number, key?: Key) => Key;\n    parentKey: Key;\n    renderRow: (\n        item: Item,\n        parentKey: Key | undefined,\n        renderChildren: (options: {count: number; height: number}) => React.ReactNode,\n    ) => React.ReactNode;\n    disableVirtualization?: boolean;\n    persistedIndexes?: Array<number[]>;\n}) {\n    const {\n        start,\n        scrollContainer,\n        count,\n        getItemSize,\n        getItemKey,\n        renderRow,\n        parentKey,\n        disableVirtualization,\n        persistedIndexes,\n    } = props;\n    const {rangeExtractor, persistedChildren} =\n        getRangeExtractorAndChildrenIndexes(persistedIndexes);\n    const virtualizer = useVirtualizer({\n        count,\n        getScrollElement: () => scrollContainer,\n        estimateSize: (index) => getItemSize(index, parentKey),\n        getItemKey: (index) => getItemKey(index, parentKey),\n        scrollToFn: () => {}, // parent element controls scroll, so disable it here\n        paddingStart: start,\n        rangeExtractor,\n        overscan: 0,\n        enabled: !disableVirtualization,\n    });\n\n    let items = virtualizer.getVirtualItems();\n    let height = virtualizer.getTotalSize() - start;\n    if (disableVirtualization) {\n        height = 0;\n        items = new Array(count).fill(0).map((_, index) => {\n            height += getItemSize(index, parentKey);\n            return {\n                index,\n                key: getItemKey(index),\n                start: 0,\n                end: 0,\n                size: 0,\n                lane: 0,\n            };\n        });\n    }\n\n    return renderRows({\n        getItemKey,\n        getItemSize,\n        totalHeight: height,\n        start,\n        items,\n        scrollContainer,\n        parentKey,\n        renderRow,\n        disableVirtualization,\n        persistedChildren,\n    });\n}\n\nfunction getRangeExtractorAndChildrenIndexes(persistedIndexes?: Array<number[]>) {\n    if (!persistedIndexes) {\n        return {};\n    }\n    const persistedChildren = new Map<number, Array<number[]>>();\n    const persist: number[] = [];\n    for (const [index, ...childrenIndexes] of persistedIndexes) {\n        if (index >= 0) {\n            persist.push(index);\n            const children = persistedChildren.get(index) ?? [];\n            children.push(childrenIndexes);\n            persistedChildren.set(index, children);\n        }\n    }\n\n    if (persist.length === 0) {\n        return {};\n    }\n\n    const rangeExtractor = (range: Range) => {\n        const next = new Set(\n            persist.filter((i) => i < range.count).concat(defaultRangeExtractor(range)),\n        );\n        return Array.from(next).sort((a, b) => a - b);\n    };\n\n    return {rangeExtractor, persistedChildren};\n}\n"]}