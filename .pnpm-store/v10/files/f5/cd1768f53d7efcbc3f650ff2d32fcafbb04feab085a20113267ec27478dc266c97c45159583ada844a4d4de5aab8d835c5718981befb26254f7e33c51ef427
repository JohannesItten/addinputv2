{"version":3,"file":"Row.js","sourceRoot":"../../../../../src","sources":["components/layout/Row/Row.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAKb,OAAO,EAAC,KAAK,EAAC,0BAAuB;AACrC,OAAO,EAAC,gBAAgB,EAAC,qCAAkC;AAE3D,OAAO,EAAC,UAAU,EAAC,0BAAiB;AAEpC,mBAAoB;AAEpB,MAAM,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;AAgBvB;;;;;;;;;;;;;;;GAeG;AACH,MAAM,CAAC,MAAM,GAAG,GAAG,CAAC,EAAC,QAAQ,EAAE,KAAK,EAAE,SAAS,EAAE,KAAK,EAAE,QAAQ,EAAE,EAAE,EAAW,EAAE,EAAE;IAC/E,MAAM,EAAC,oBAAoB,EAAC,GAAG,gBAAgB,EAAE,CAAC;IAElD,IAAI,CAAqB,CAAC;IAC1B,IAAI,EAAsB,CAAC;IAE3B,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;QAC5B,MAAM,GAAG,GAAG,oBAAoB,CAAC,KAAK,CAAC,CAAC;QAExC,IAAI,OAAO,GAAG,KAAK,WAAW,EAAE,CAAC;YAC7B,CAAC,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC;QACxB,CAAC;IACL,CAAC;SAAM,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE,CAAC;QACtC,CAAC,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;IAC1B,CAAC;IAED,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE,CAAC;QAC/B,MAAM,GAAG,GAAG,oBAAoB,CAAC,QAAQ,CAAC,CAAC;QAE3C,IAAI,OAAO,GAAG,KAAK,WAAW,EAAE,CAAC;YAC7B,EAAE,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC;QACzB,CAAC;IACL,CAAC;SAAM,IAAI,OAAO,QAAQ,KAAK,WAAW,EAAE,CAAC;QACzC,EAAE,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;IAC1B,CAAC;IAED,OAAO,CACH,cACI,KAAK,EAAE,KAAK,EACZ,SAAS,EAAE,CAAC,CACR;YACI,CAAC;YACD,EAAE;SACL,EACD,SAAS,CACZ,aACQ,EAAE,YAEV,QAAQ,GACP,CACT,CAAC;AACN,CAAC,CAAC","sourcesContent":["'use client';\n\nimport type * as React from 'react';\n\nimport type {QAProps} from '../../types';\nimport {block} from '../../utils/cn';\nimport {useLayoutContext} from '../hooks/useLayoutContext';\nimport type {MediaPartial, Space} from '../types';\nimport {makeCssMod} from '../utils';\n\nimport './Row.scss';\n\nconst b = block('row');\n\nexport interface RowProps extends QAProps {\n    style?: React.CSSProperties;\n    /**\n     * Vertical and horizontal `space` between children `<Col />` components.\n     */\n    space?: Space | MediaPartial<Space>;\n    /**\n     * Override default (space) vertical gaps between children if it wrap on next line\n     */\n    spaceRow?: Space | MediaPartial<Space>;\n    className?: string;\n    children?: React.ReactNode;\n}\n\n/**\n * Defines the margins between columns (`<Col />`).\n *\n * Required to use with `<Col />` component\n *\n * ```tsx\n * import {Row, Col} from '@gravity-ui/uikit';\n *\n * <Row space=\"5\">\n *  <Col>col</Col>\n *  <Col>col</Col>\n * </Row>\n * ```\n * ---\n * Storybook - https://preview.gravity-ui.com/uikit/?path=/docs/components-layout--docs#row\n */\nexport const Row = ({children, style, className, space, spaceRow, qa}: RowProps) => {\n    const {getClosestMediaProps} = useLayoutContext();\n\n    let s: string | undefined;\n    let sr: string | undefined;\n\n    if (typeof space === 'object') {\n        const res = getClosestMediaProps(space);\n\n        if (typeof res !== 'undefined') {\n            s = makeCssMod(res);\n        }\n    } else if (typeof space !== 'undefined') {\n        s = makeCssMod(space);\n    }\n\n    if (typeof spaceRow === 'object') {\n        const res = getClosestMediaProps(spaceRow);\n\n        if (typeof res !== 'undefined') {\n            sr = makeCssMod(res);\n        }\n    } else if (typeof spaceRow !== 'undefined') {\n        sr = String(spaceRow);\n    }\n\n    return (\n        <div\n            style={style}\n            className={b(\n                {\n                    s,\n                    sr,\n                },\n                className,\n            )}\n            data-qa={qa}\n        >\n            {children}\n        </div>\n    );\n};\n"]}