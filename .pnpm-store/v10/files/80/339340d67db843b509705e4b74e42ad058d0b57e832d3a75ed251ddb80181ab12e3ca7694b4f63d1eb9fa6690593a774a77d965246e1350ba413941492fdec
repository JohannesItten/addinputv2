{"version":3,"file":"useCheckbox.js","sourceRoot":"../../../../../src","sources":["hooks/private/useCheckbox/useCheckbox.ts"],"names":[],"mappings":";;AAcA,kCA4EC;;AA1FD,qDAA+B;AAE/B,sCAAqD;AAErD,kFAAmE;AACnE,yEAA2D;AAS3D,SAAgB,WAAW,CAAC,EACxB,IAAI,EACJ,KAAK,EACL,EAAE,EACF,cAAc,EACd,OAAO,EACP,aAAa,EACb,QAAQ,EACR,QAAQ,EACR,UAAU,EACV,YAAY,EACZ,OAAO,EACP,MAAM,EACN,QAAQ,GACO;IACf,MAAM,eAAe,GAAG,KAAK,CAAC,MAAM,CAAmB,IAAI,CAAC,CAAC;IAC7D,MAAM,CAAC,SAAS,EAAE,eAAe,CAAC,GAAG,IAAA,sBAAkB,EACnD,OAAO,EACP,cAAc,IAAI,KAAK,EACvB,QAAQ,CACX,CAAC;IAEF,MAAM,YAAY,GAAG,aAAa,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC;IACrD,MAAM,gBAAgB,GAAG,aAAa,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC;IAE7D,MAAM,QAAQ,GAAG,IAAA,yCAAmB,EAAC,EAAC,YAAY,EAAE,SAAS,EAAE,OAAO,EAAE,eAAe,EAAC,CAAC,CAAC;IAE1F,MAAM,SAAS,GAAG,IAAA,cAAU,EAAC,UAAU,EAAE,eAAe,EAAE,QAAQ,CAAC,CAAC;IAEpE,KAAK,CAAC,eAAe,CAAC,GAAG,EAAE;QACvB,IAAI,eAAe,CAAC,OAAO,EAAE,CAAC;YAC1B,eAAe,CAAC,OAAO,CAAC,aAAa,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;QACnE,CAAC;IACL,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC;IAEpB,MAAM,YAAY,GAAG,CAAC,KAA0C,EAAE,EAAE;QAChE,eAAe,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QAEtC,IAAI,QAAQ,EAAE,CAAC;YACX,QAAQ,CAAC,KAAK,CAAC,CAAC;QACpB,CAAC;IACL,CAAC,CAAC;IAEF,MAAM,kBAAkB,GAAG,KAAK,CAAC,WAAW,CACxC,CAAC,KAAyE,EAAE,EAAE;QAC1E,0BAAW,CAAC,OAAO,CAAC;YAChB,WAAW,EAAE,UAAU;YACvB,OAAO,EAAE,OAAO;YAChB,QAAQ,EAAE,KAAK;YACf,IAAI,EAAE;gBACF,OAAO,EAAE,KAAK,CAAC,MAAM,CAAC,OAAO;aAChC;SACJ,CAAC,CAAC;IACP,CAAC,EACD,EAAE,CACL,CAAC;IAEF,MAAM,UAAU,GAC4B;QACxC,GAAG,YAAY;QACf,IAAI;QACJ,KAAK;QACL,EAAE;QACF,OAAO;QACP,MAAM;QACN,QAAQ;QACR,IAAI,EAAE,UAAU;QAChB,QAAQ,EAAE,YAAY;QACtB,cAAc,EAAE,kBAAkB;QAClC,cAAc,EAAE,cAAc;QAC9B,OAAO,EAAE,YAAY;QACrB,cAAc,EAAE,gBAAgB;QAChC,GAAG,EAAE,SAAS;KACjB,CAAC;IAEF,OAAO,EAAC,OAAO,EAAE,SAAS,EAAE,UAAU,EAAC,CAAC;AAC5C,CAAC","sourcesContent":["import * as React from 'react';\n\nimport {useControlledState, useForkRef} from '../..';\nimport type {ControlProps} from '../../../components/types';\nimport {eventBroker} from '../../../components/utils/event-broker';\nimport {useFormResetHandler} from '../useFormResetHandler';\n\nexport type UseCheckboxProps = ControlProps;\n\nexport type UseCheckboxResult = {\n    checked: boolean;\n    inputProps: React.InputHTMLAttributes<HTMLInputElement> & React.RefAttributes<HTMLInputElement>;\n};\n\nexport function useCheckbox({\n    name,\n    value,\n    id,\n    defaultChecked,\n    checked,\n    indeterminate,\n    onUpdate,\n    onChange,\n    controlRef,\n    controlProps,\n    onFocus,\n    onBlur,\n    disabled,\n}: UseCheckboxProps): UseCheckboxResult {\n    const innerControlRef = React.useRef<HTMLInputElement>(null);\n    const [isChecked, setCheckedState] = useControlledState(\n        checked,\n        defaultChecked ?? false,\n        onUpdate,\n    );\n\n    const inputChecked = indeterminate ? false : checked;\n    const inputAriaChecked = indeterminate ? 'mixed' : isChecked;\n\n    const fieldRef = useFormResetHandler({initialValue: isChecked, onReset: setCheckedState});\n\n    const handleRef = useForkRef(controlRef, innerControlRef, fieldRef);\n\n    React.useLayoutEffect(() => {\n        if (innerControlRef.current) {\n            innerControlRef.current.indeterminate = Boolean(indeterminate);\n        }\n    }, [indeterminate]);\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setCheckedState(event.target.checked);\n\n        if (onChange) {\n            onChange(event);\n        }\n    };\n\n    const handleClickCapture = React.useCallback(\n        (event: React.MouseEvent<HTMLInputElement> & {target: {checked?: boolean}}) => {\n            eventBroker.publish({\n                componentId: 'Checkbox',\n                eventId: 'click',\n                domEvent: event,\n                meta: {\n                    checked: event.target.checked,\n                },\n            });\n        },\n        [],\n    );\n\n    const inputProps: React.InputHTMLAttributes<HTMLInputElement> &\n        React.RefAttributes<HTMLInputElement> = {\n        ...controlProps,\n        name,\n        value,\n        id,\n        onFocus,\n        onBlur,\n        disabled,\n        type: 'checkbox',\n        onChange: handleChange,\n        onClickCapture: handleClickCapture,\n        defaultChecked: defaultChecked,\n        checked: inputChecked,\n        'aria-checked': inputAriaChecked,\n        ref: handleRef,\n    };\n\n    return {checked: isChecked, inputProps};\n}\n"]}