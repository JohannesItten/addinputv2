{"version":3,"file":"useSelect.js","sourceRoot":"../../../../src","sources":["hooks/useSelect/useSelect.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,EAAC,kBAAkB,EAAC,uCAA8B;AAGzD,OAAO,EAAC,YAAY,EAAC,0BAAuB;AAE5C,MAAM,CAAC,MAAM,SAAS,GAAG,CAAoB,EACzC,WAAW,EACX,OAAO,EACP,YAAY,EACZ,IAAI,EACJ,KAAK,EAAE,UAAU,EACjB,YAAY,GAAG,EAAE,EACjB,QAAQ,EACR,QAAQ,EACR,QAAQ,GACK,EAAsB,EAAE;IACrC,MAAM,CAAC,KAAK,EAAE,aAAa,CAAC,GAAG,kBAAkB,CAAC,UAAU,EAAE,YAAY,EAAE,QAAQ,CAAC,CAAC;IACtF,MAAM,CAAC,WAAW,EAAE,cAAc,CAAC,GAAG,KAAK,CAAC,QAAQ,EAAU,CAAC;IAC/D,MAAM,EAAC,UAAU,EAAE,GAAG,SAAS,EAAC,GAAG,YAAY,CAAC;QAC5C,WAAW;QACX,OAAO;QACP,YAAY;QACZ,IAAI;KACP,CAAC,CAAC;IAEH,MAAM,QAAQ,GAAG,KAAK,CAAC,WAAW,CAC9B,CAAC,CAAW,EAAE,EAAE;QACZ,IAAI,CAAC,QAAQ,EAAE,CAAC;YACZ,aAAa,CAAC,CAAC,CAAC,CAAC;QACrB,CAAC;IACL,CAAC,EACD,CAAC,aAAa,EAAE,QAAQ,CAAC,CAC5B,CAAC;IAEF,MAAM,qBAAqB,GAAG,KAAK,CAAC,WAAW,CAC3C,CAAC,MAA0B,EAAE,EAAE;QAC3B,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;YAChC,MAAM,SAAS,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACjC,QAAQ,CAAC,SAAS,CAAC,CAAC;QACxB,CAAC;QAED,UAAU,CAAC,KAAK,CAAC,CAAC;IACtB,CAAC,EACD,CAAC,KAAK,EAAE,QAAQ,EAAE,UAAU,CAAC,CAChC,CAAC;IAEF,MAAM,uBAAuB,GAAG,KAAK,CAAC,WAAW,CAC7C,CAAC,MAA0B,EAAE,EAAE;QAC3B,MAAM,eAAe,GAAG,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACrD,MAAM,SAAS,GAAG,eAAe;YAC7B,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,EAAE,CAAC,WAAW,KAAK,MAAM,CAAC,KAAK,CAAC;YAC7D,CAAC,CAAC,CAAC,GAAG,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;QAE/B,QAAQ,CAAC,SAAS,CAAC,CAAC;IACxB,CAAC,EACD,CAAC,KAAK,EAAE,QAAQ,CAAC,CACpB,CAAC;IAEF,MAAM,eAAe,GAAG,KAAK,CAAC,WAAW,CACrC,CAAC,MAA0B,EAAE,EAAE;QAC3B,IAAI,QAAQ,EAAE,CAAC;YACX,uBAAuB,CAAC,MAAM,CAAC,CAAC;QACpC,CAAC;aAAM,CAAC;YACJ,qBAAqB,CAAC,MAAM,CAAC,CAAC;QAClC,CAAC;IACL,CAAC,EACD,CAAC,QAAQ,EAAE,qBAAqB,EAAE,uBAAuB,CAAC,CAC7D,CAAC;IAEF,MAAM,gBAAgB,GAAG,KAAK,CAAC,WAAW,CAAC,GAAG,EAAE;QAC5C,QAAQ,CAAC,EAAE,CAAC,CAAC;IACjB,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;IAEf,OAAO;QACH,KAAK;QACL,WAAW;QACX,QAAQ;QACR,eAAe;QACf,gBAAgB;QAChB,UAAU;QACV,cAAc;QACd,GAAG,SAAS;KACf,CAAC;AACN,CAAC,CAAC","sourcesContent":["import * as React from 'react';\n\nimport {useControlledState} from '../useControlledState';\n\nimport type {UseSelectOption, UseSelectProps, UseSelectResult} from './types';\nimport {useOpenState} from './useOpenState';\n\nexport const useSelect = <T extends unknown>({\n    defaultOpen,\n    onClose,\n    onOpenChange,\n    open,\n    value: valueProps,\n    defaultValue = [],\n    multiple,\n    onUpdate,\n    disabled,\n}: UseSelectProps): UseSelectResult<T> => {\n    const [value, setValueInner] = useControlledState(valueProps, defaultValue, onUpdate);\n    const [activeIndex, setActiveIndex] = React.useState<number>();\n    const {toggleOpen, ...openState} = useOpenState({\n        defaultOpen,\n        onClose,\n        onOpenChange,\n        open,\n    });\n\n    const setValue = React.useCallback(\n        (v: string[]) => {\n            if (!disabled) {\n                setValueInner(v);\n            }\n        },\n        [setValueInner, disabled],\n    );\n\n    const handleSingleSelection = React.useCallback(\n        (option: UseSelectOption<T>) => {\n            if (!value.includes(option.value)) {\n                const nextValue = [option.value];\n                setValue(nextValue);\n            }\n\n            toggleOpen(false);\n        },\n        [value, setValue, toggleOpen],\n    );\n\n    const handleMultipleSelection = React.useCallback(\n        (option: UseSelectOption<T>) => {\n            const alreadySelected = value.includes(option.value);\n            const nextValue = alreadySelected\n                ? value.filter((iteratedVal) => iteratedVal !== option.value)\n                : [...value, option.value];\n\n            setValue(nextValue);\n        },\n        [value, setValue],\n    );\n\n    const handleSelection = React.useCallback(\n        (option: UseSelectOption<T>) => {\n            if (multiple) {\n                handleMultipleSelection(option);\n            } else {\n                handleSingleSelection(option);\n            }\n        },\n        [multiple, handleSingleSelection, handleMultipleSelection],\n    );\n\n    const handleClearValue = React.useCallback(() => {\n        setValue([]);\n    }, [setValue]);\n\n    return {\n        value,\n        activeIndex,\n        setValue,\n        handleSelection,\n        handleClearValue,\n        toggleOpen,\n        setActiveIndex,\n        ...openState,\n    };\n};\n"]}