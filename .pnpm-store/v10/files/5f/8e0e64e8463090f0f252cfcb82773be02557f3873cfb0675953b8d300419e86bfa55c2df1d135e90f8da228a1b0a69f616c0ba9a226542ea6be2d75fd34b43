{"version":3,"file":"DropdownMenuNavigationContext.js","sourceRoot":"../../../../src","sources":["components/DropdownMenu/DropdownMenuNavigationContext.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAQ/B,MAAM,YAAY,GAAa,EAAE,CAAC;AAElC,MAAM,CAAC,MAAM,6BAA6B,GAAG,KAAK,CAAC,aAAa,CAC5D;IACI,cAAc,EAAE,YAAY;IAC5B,iBAAiB,EAAE,GAAG,EAAE,GAAE,CAAC;IAC3B,SAAS,EAAE,EAAC,OAAO,EAAE,IAAI,EAAC;CAC7B,CACJ,CAAC;AAQF,MAAM,CAAC,MAAM,qCAAqC,GAAG,CAAC,EAClD,SAAS,EACT,QAAQ,EACR,QAAQ,GACiC,EAAE,EAAE;IAC7C,MAAM,CAAC,cAAc,EAAE,iBAAiB,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAW,YAAY,CAAC,CAAC;IAEnF,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACjB,IAAI,QAAQ,EAAE,CAAC;YACX,iBAAiB,CAAC,YAAY,CAAC,CAAC;QACpC,CAAC;IACL,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;IAEf,MAAM,YAAY,GAAG,KAAK,CAAC,OAAO,CAC9B,GAAG,EAAE,CAAC,CAAC;QACH,cAAc;QACd,iBAAiB;QACjB,SAAS;KACZ,CAAC,EACF,CAAC,cAAc,EAAE,SAAS,CAAC,CAC9B,CAAC;IAEF,OAAO,CACH,KAAC,6BAA6B,CAAC,QAAQ,IAAC,KAAK,EAAE,YAAY,YACtD,QAAQ,GAC4B,CAC5C,CAAC;AACN,CAAC,CAAC","sourcesContent":["'use client';\n\nimport * as React from 'react';\n\nexport type DropdownMenuNavigationContextType = {\n    activeMenuPath: number[];\n    setActiveMenuPath: (path: number[]) => void;\n    anchorRef: React.RefObject<HTMLDivElement>;\n};\n\nconst rootMenuPath: number[] = [];\n\nexport const DropdownMenuNavigationContext = React.createContext<DropdownMenuNavigationContextType>(\n    {\n        activeMenuPath: rootMenuPath,\n        setActiveMenuPath: () => {},\n        anchorRef: {current: null},\n    },\n);\n\nexport type DropdownMenuNavigationContextProviderProps = {\n    anchorRef: React.RefObject<HTMLDivElement>;\n    children: React.ReactNode;\n    disabled: boolean;\n};\n\nexport const DropdownMenuNavigationContextProvider = ({\n    anchorRef,\n    children,\n    disabled,\n}: DropdownMenuNavigationContextProviderProps) => {\n    const [activeMenuPath, setActiveMenuPath] = React.useState<number[]>(rootMenuPath);\n\n    React.useEffect(() => {\n        if (disabled) {\n            setActiveMenuPath(rootMenuPath);\n        }\n    }, [disabled]);\n\n    const contextValue = React.useMemo(\n        () => ({\n            activeMenuPath,\n            setActiveMenuPath,\n            anchorRef,\n        }),\n        [activeMenuPath, anchorRef],\n    );\n\n    return (\n        <DropdownMenuNavigationContext.Provider value={contextValue}>\n            {children}\n        </DropdownMenuNavigationContext.Provider>\n    );\n};\n"]}