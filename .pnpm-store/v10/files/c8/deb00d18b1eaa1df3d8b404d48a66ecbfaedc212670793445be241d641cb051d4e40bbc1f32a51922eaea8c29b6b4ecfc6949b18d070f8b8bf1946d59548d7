{"version":3,"file":"useConditionallyControlledState.js","sourceRoot":"../../../../../src","sources":["hooks/private/useConditionallyControlledState/useConditionallyControlledState.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,oBAAoB,EAAC,yCAAgC;AAO7D,MAAM,UAAU,+BAA+B,CAC3C,QAAY,EACZ,WAA4E,EAC5E,YAA4B,EAC5B,YAAY,GAAG,QAAQ,KAAK,SAAS,IAAI,WAAW,KAAK,SAAS;IAElE,MAAM,KAAK,GAAG,oBAAoB,CAAI,CAAC,QAAQ,IAAI,YAAY,CAAM,EAAE,WAAW,CAAC,CAAC;IAEpF,IAAI,YAAY,EAAE,CAAC;QACf,OAAO,CAAC,QAAQ,EAAE,WAAW,CAA6C,CAAC;IAC/E,CAAC;IAED,OAAO,KAAK,CAAC;AACjB,CAAC","sourcesContent":["import {useStateWithCallback} from '../useStateWithCallback';\n\nexport type UseConditionallyControlledStateResult<T extends unknown> = [\n    T,\n    React.Dispatch<React.SetStateAction<T>>,\n];\n\nexport function useConditionallyControlledState<T>(\n    property?: T,\n    setProperty?: React.Dispatch<React.SetStateAction<T>> | ((value: T) => void),\n    initialState?: T | (() => T),\n    isControlled = property !== undefined && setProperty !== undefined,\n): UseConditionallyControlledStateResult<T> {\n    const state = useStateWithCallback<T>((property || initialState) as T, setProperty);\n\n    if (isControlled) {\n        return [property, setProperty] as UseConditionallyControlledStateResult<T>;\n    }\n\n    return state;\n}\n"]}