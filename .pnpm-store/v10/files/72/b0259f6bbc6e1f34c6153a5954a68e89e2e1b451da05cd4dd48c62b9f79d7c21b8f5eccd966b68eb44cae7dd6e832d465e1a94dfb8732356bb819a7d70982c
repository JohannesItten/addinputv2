{"version":3,"file":"TabList.js","sourceRoot":"../../../../src","sources":["components/tabs/TabList.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,EAAC,cAAc,EAAE,SAAS,EAAC,6BAAoB;AAEtD,OAAO,EAAC,UAAU,EAAC,iCAA8B;AACjD,OAAO,EAAC,UAAU,EAAC,8BAA2B;AAG9C,uBAAwB;AAExB,MAAM,CAAC,MAAM,OAAO,GAAG,KAAK,CAAC,UAAU,CAA+B,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;IACjF,MAAM,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;IAChD,MAAM,EAAE,GAAG,SAAS,EAAE,CAAC;IACvB,MAAM,YAAY,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;IACvC,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAExD,MAAM,EAAC,gBAAgB,EAAC,GAAG,cAAc,CAAC;QACtC,mBAAmB,EAAE,YAAY;KACpC,CAAC,CAAC;IAEH,MAAM,iBAAiB,GAAG,KAAK,CAAC,OAAO,CACnC,GAAG,EAAE,CAAC,CAAC;QACH,KAAK,EAAE,UAAU,EAAE,KAAK,IAAI,KAAK,CAAC,KAAK;QACvC,QAAQ,EAAE,UAAU,EAAE,QAAQ,IAAI,KAAK,CAAC,QAAQ;QAChD,EAAE,EAAE,UAAU,EAAE,EAAE,IAAI,EAAE;QACxB,UAAU,EAAE,UAAU,EAAE,UAAU,IAAI,KAAK;QAC3C,SAAS;KACZ,CAAC,EACF,CAAC,UAAU,EAAE,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,QAAQ,EAAE,EAAE,EAAE,SAAS,CAAC,CAC3D,CAAC;IAEF,OAAO,CACH,KAAC,UAAU,CAAC,QAAQ,IAAC,KAAK,EAAE,iBAAiB,YACzC,cAAK,GAAG,EAAE,GAAG,KAAM,YAAY,KAAM,gBAAgB,YAChD,KAAK,CAAC,QAAQ,GACb,GACY,CACzB,CAAC;AACN,CAAC,CAAC,CAAC;AAEH,OAAO,CAAC,WAAW,GAAG,SAAS,CAAC","sourcesContent":["'use client';\n\nimport * as React from 'react';\n\nimport {useFocusWithin, useUniqId} from '../../hooks';\n\nimport {TabContext} from './contexts/TabContext';\nimport {useTabList} from './hooks/useTabList';\nimport type {TabListProps} from './types';\n\nimport './TabList.scss';\n\nexport const TabList = React.forwardRef<HTMLDivElement, TabListProps>((props, ref) => {\n    const tabContext = React.useContext(TabContext);\n    const id = useUniqId();\n    const tabListProps = useTabList(props);\n    const [isFocused, setIsFocused] = React.useState(false);\n\n    const {focusWithinProps} = useFocusWithin({\n        onFocusWithinChange: setIsFocused,\n    });\n\n    const innerContextValue = React.useMemo(\n        () => ({\n            value: tabContext?.value ?? props.value,\n            onUpdate: tabContext?.onUpdate ?? props.onUpdate,\n            id: tabContext?.id ?? id,\n            isProvider: tabContext?.isProvider ?? false,\n            isFocused,\n        }),\n        [tabContext, props.value, props.onUpdate, id, isFocused],\n    );\n\n    return (\n        <TabContext.Provider value={innerContextValue}>\n            <div ref={ref} {...tabListProps} {...focusWithinProps}>\n                {props.children}\n            </div>\n        </TabContext.Provider>\n    );\n});\n\nTabList.displayName = 'TabList';\n"]}