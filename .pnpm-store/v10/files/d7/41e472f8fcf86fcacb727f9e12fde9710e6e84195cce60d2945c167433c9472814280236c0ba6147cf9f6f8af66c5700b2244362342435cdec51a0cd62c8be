{"version":3,"file":"types.js","sourceRoot":"../../../../src","sources":["components/Progress/types.ts"],"names":[],"mappings":"AA8DA,MAAM,UAAU,mBAAmB,CAAC,KAAoB;IACpD,OAAQ,KAAgC,CAAC,KAAK,KAAK,SAAS,CAAC;AACjE,CAAC","sourcesContent":["import type * as React from 'react';\n\nimport type {QAProps} from '../types';\n\nexport type ProgressTheme = 'default' | 'success' | 'warning' | 'danger' | 'info' | 'misc';\nexport type ProgressSize = 'xs' | 's' | 'm';\nexport type ProgressValue = number;\n\nexport interface Stack {\n    value: ProgressValue;\n    color?: string;\n    title?: string;\n    theme?: ProgressTheme;\n    loading?: boolean;\n    className?: string;\n    content?: React.ReactNode;\n}\n\nexport interface ProgressColorStops {\n    theme: ProgressTheme;\n    stop: number;\n}\n\ninterface ProgressGeneralProps extends QAProps {\n    /** ClassName of element */\n    className?: string;\n}\n\nexport interface ProgressDefaultProps {\n    /** Text inside progress bar */\n    text: React.ReactNode;\n    /** Theme */\n    theme: ProgressTheme;\n    /** Size. Text of progress bar is displayed in `m` size only. */\n    size: ProgressSize;\n    /** Loading. –êdds loading animation */\n    loading?: boolean;\n}\n\nexport interface ProgressWithValueProps\n    extends ProgressGeneralProps,\n        Partial<ProgressDefaultProps> {\n    /** Current progress value. Available range is from 0 to 100. If `stack` property is passed `value` is not required and behaves as maxValue. */\n    value: ProgressValue;\n    /** ProgressTheme breakpoints. [Details](#colorstops) */\n    colorStops?: ProgressColorStops[];\n    /** Alternative value of `colorStops`. Available range is from 0 to 100. */\n    colorStopsValue?: ProgressValue;\n}\n\nexport interface ProgressWithStackProps\n    extends ProgressGeneralProps,\n        Partial<ProgressDefaultProps> {\n    /** Configuration of composite progress bar. Not required if a `value` property is passed. [Details](#stack) */\n    stack: Stack[];\n    value?: ProgressValue;\n    /** ClassName of stack element */\n    stackClassName?: string;\n}\n\nexport type ProgressProps = ProgressWithStackProps | ProgressWithValueProps;\n\nexport function isProgressWithStack(props: ProgressProps): props is ProgressWithStackProps {\n    return (props as ProgressWithStackProps).stack !== undefined;\n}\n"]}