{"version":3,"file":"useScrollHandler.js","sourceRoot":"../../../../../src","sources":["components/DropdownMenu/hooks/useScrollHandler.ts"],"names":[],"mappings":";;AAEA,4CAsBC;;AAxBD,qDAA+B;AAE/B,SAAgB,gBAAgB,CAC5B,QAAgC,EAChC,SAA0C,EAC1C,QAAkB;IAElB,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACjB,IAAI,QAAQ,EAAE,CAAC;YACX,OAAO,SAAS,CAAC;QACrB,CAAC;QAED,MAAM,YAAY,GAAG,CAAC,KAAY,EAAE,EAAE;YAClC,IAAK,KAAK,CAAC,MAAe,CAAC,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC;gBACrD,QAAQ,CAAC,KAAK,CAAC,CAAC;YACpB,CAAC;QACL,CAAC,CAAC;QAEF,QAAQ,CAAC,gBAAgB,CAAC,QAAQ,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;QAExD,OAAO,GAAG,EAAE;YACR,QAAQ,CAAC,mBAAmB,CAAC,QAAQ,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;QAC/D,CAAC,CAAC;IACN,CAAC,EAAE,CAAC,SAAS,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC;AACxC,CAAC","sourcesContent":["import * as React from 'react';\n\nexport function useScrollHandler(\n    onScroll: (event: Event) => void,\n    anchorRef: React.RefObject<HTMLDivElement>,\n    disabled?: boolean,\n) {\n    React.useEffect(() => {\n        if (disabled) {\n            return undefined;\n        }\n\n        const handleScroll = (event: Event) => {\n            if ((event.target as Node).contains(anchorRef.current)) {\n                onScroll(event);\n            }\n        };\n\n        document.addEventListener('scroll', handleScroll, true);\n\n        return () => {\n            document.removeEventListener('scroll', handleScroll, true);\n        };\n    }, [anchorRef, onScroll, disabled]);\n}\n"]}