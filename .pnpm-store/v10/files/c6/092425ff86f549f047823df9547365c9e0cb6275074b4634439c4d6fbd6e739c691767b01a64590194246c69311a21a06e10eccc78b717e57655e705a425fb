{"version":3,"file":"LayoutProvider.js","sourceRoot":"../../../../../src","sources":["components/layout/LayoutProvider/LayoutProvider.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,EAAC,aAAa,EAAC,qCAAkC;AACxD,OAAO,EAAC,0BAA0B,EAAC,+CAA4C;AAE/E,OAAO,EAAC,mBAAmB,EAAC,wCAAqC;AAiBjE,MAAM,UAAU,qBAAqB,CAAC,EAClC,QAAQ,EACR,MAAM,EAAE,QAAQ,EAChB,iBAAiB,EACjB,cAAc,GAAG,KAAK,GACG;IACzB,MAAM,aAAa,GAAG,KAAK,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;IACtD,MAAM,KAAK,GAAG,KAAK,CAAC,OAAO,CACvB,GAAG,EAAE,CAAC,mBAAmB,CAAC,EAAC,KAAK,EAAE,aAAa,CAAC,KAAK,EAAE,QAAQ,EAAC,CAAC,EACjE,CAAC,QAAQ,EAAE,aAAa,CAAC,KAAK,CAAC,CAClC,CAAC;IACF,MAAM,gBAAgB,GAAG,0BAA0B,CAC/C,KAAK,CAAC,WAAW,EACjB,cAAc,EACd,iBAAiB,CACpB,CAAC;IAEF,MAAM,KAAK,GAAG,KAAK,CAAC,OAAO,CACvB,GAAG,EAAE,CAAC,CAAC,EAAC,gBAAgB,EAAE,KAAK,EAAE,cAAc,EAAC,CAAC,EACjD,CAAC,gBAAgB,EAAE,KAAK,EAAE,cAAc,CAAC,CAC5C,CAAC;IACF,OAAO,KAAC,aAAa,CAAC,QAAQ,IAAC,KAAK,EAAE,KAAK,YAAG,QAAQ,GAA0B,CAAC;AACrF,CAAC","sourcesContent":["'use client';\n\nimport * as React from 'react';\n\nimport {LayoutContext} from '../contexts/LayoutContext';\nimport {useCurrentActiveMediaQuery} from '../hooks/useCurrentActiveMediaQuery';\nimport type {LayoutTheme, MediaType, RecursivePartial} from '../types';\nimport {overrideLayoutTheme} from '../utils/overrideLayoutTheme';\n\nexport interface PrivateLayoutProviderProps {\n    config?: RecursivePartial<LayoutTheme>;\n    /**\n     * During ssr you can override default (`s`) media screen size if needed\n     */\n    initialMediaQuery?: MediaType;\n    // TODO BREAKING CHANGE: Make it default behaviour\n    /**\n     * Fixes \"s\" media breakpoint behaviour with introducing \"xs\" media.\n     * Will be default in the next major release.\n     */\n    fixBreakpoints?: boolean;\n    children: React.ReactNode;\n}\n\nexport function PrivateLayoutProvider({\n    children,\n    config: override,\n    initialMediaQuery,\n    fixBreakpoints = false,\n}: PrivateLayoutProviderProps) {\n    const parentContext = React.useContext(LayoutContext);\n    const theme = React.useMemo(\n        () => overrideLayoutTheme({theme: parentContext.theme, override}),\n        [override, parentContext.theme],\n    );\n    const activeMediaQuery = useCurrentActiveMediaQuery(\n        theme.breakpoints,\n        fixBreakpoints,\n        initialMediaQuery,\n    );\n\n    const value = React.useMemo(\n        () => ({activeMediaQuery, theme, fixBreakpoints}),\n        [activeMediaQuery, theme, fixBreakpoints],\n    );\n    return <LayoutContext.Provider value={value}>{children}</LayoutContext.Provider>;\n}\n"]}