{"version":3,"file":"useActionHandlers.js","sourceRoot":"../../../../src","sources":["hooks/useActionHandlers/useActionHandlers.ts"],"names":[],"mappings":";;AAYA,wDAUC;AAOD,8CAMC;;AAnCD,qDAA+B;AAE/B,kDAAwC;AAUxC,SAAgB,sBAAsB,CAAI,QAAsB;IAC5D,OAAO,CAAC,KAA6B,EAAE,EAAE;QACrC,IACI,QAAQ;YACR,CAAC,mBAAO,CAAC,KAAK,EAAE,mBAAO,CAAC,QAAQ,EAAE,mBAAO,CAAC,YAAY,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,EAC7E,CAAC;YACC,KAAK,CAAC,cAAc,EAAE,CAAC;YACvB,QAAQ,CAAC,KAAK,CAAC,CAAC;QACpB,CAAC;IACL,CAAC,CAAC;AACN,CAAC;AAED;;;;GAIG;AACH,SAAgB,iBAAiB,CAC7B,QAAiC;IAEjC,MAAM,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,sBAAsB,CAAI,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;IAEvF,OAAO,EAAC,SAAS,EAAC,CAAC;AACvB,CAAC","sourcesContent":["import * as React from 'react';\n\nimport {KeyCode} from '../../constants';\n\ntype AnyFunction = (...args: any[]) => any;\n\nexport type UseActionHandlersProps = AnyFunction;\n\nexport interface UseActionHandlersResult<T> {\n    onKeyDown: React.KeyboardEventHandler<T>;\n}\n\nexport function createOnKeyDownHandler<T>(callback?: AnyFunction) {\n    return (event: React.KeyboardEvent<T>) => {\n        if (\n            callback &&\n            [KeyCode.ENTER, KeyCode.SPACEBAR, KeyCode.SPACEBAR_OLD].includes(event.key)\n        ) {\n            event.preventDefault();\n            callback(event);\n        }\n    };\n}\n\n/**\n * Emulates behaviour of system controls, that respond to Enter and Spacebar\n * @param callback\n * @return {onKeyDown}\n */\nexport function useActionHandlers<T>(\n    callback?: UseActionHandlersProps,\n): UseActionHandlersResult<T> {\n    const onKeyDown = React.useMemo(() => createOnKeyDownHandler<T>(callback), [callback]);\n\n    return {onKeyDown};\n}\n"]}