{"version":3,"file":"Flex.js","sourceRoot":"../../../../../src","sources":["components/layout/Flex/Flex.tsx"],"names":[],"mappings":"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","sourcesContent":["'use client';\n\nimport * as React from 'react';\n\nimport {block} from '../../utils/cn';\nimport {Box} from '../Box/Box';\nimport type {BoxProps} from '../Box/Box';\nimport {useLayoutContext} from '../hooks/useLayoutContext';\nimport type {AdaptiveProp, MediaPartial, Space} from '../types';\nimport {makeCssMod} from '../utils';\n\nimport './Flex.scss';\n\nconst b = block('flex');\n\nexport interface FlexProps<T extends React.ElementType = 'div'> extends BoxProps<T> {\n    /**\n     * `flex-direction` property\n     */\n    direction?: AdaptiveProp<'flexDirection'>;\n    /**\n     * `flex-grow` property\n     */\n    grow?: true | React.CSSProperties['flexGrow'];\n    /**\n     * `flex-basis` property\n     */\n    basis?: React.CSSProperties['flexBasis'];\n    /**\n     * `flex-shrink` property\n     */\n    shrink?: React.CSSProperties['flexShrink'];\n    /**\n     * `align-` properties\n     */\n    alignContent?: AdaptiveProp<'justifyContent'>;\n    alignItems?: AdaptiveProp<'alignItems'>;\n    alignSelf?: AdaptiveProp<'alignSelf'>;\n    /**\n     * `justify-` properties\n     */\n    justifyContent?: AdaptiveProp<'justifyContent'>;\n    justifyItems?: AdaptiveProp<'justifyItems'>;\n    justifySelf?: AdaptiveProp<'justifySelf'>;\n    /**\n     * Shortcut for:\n     *\n     * ```css\n     *  justify-content: center;\n        align-items: center;\n     * ```\n     */\n    centerContent?: true;\n    /**\n     * `flex-wrap` property\n     *\n     * If value equals `true`, add css property `flex-wrap: wrap`;\n     */\n    wrap?: true | React.CSSProperties['flexWrap'];\n    /**\n     * display: inline-flex;\n     */\n    inline?: boolean;\n    gap?: Space | MediaPartial<Space>;\n    gapRow?: Space | MediaPartial<Space>;\n    /**\n     * @deprecated - use native gap property\n     * Space between children. Works like gap but supports in old browsers. Under the hoods uses negative margins. Vertical and horizontal directions are also supported\n     *\n     * ---\n     * instead of ~imperfection of the world~ browser compatibility for margins between layout components used negative margins there is passible issues with `background-color` css property and others that depends of current block position. Use in this situations wrappers. In future version this issues will be avoided during flex `gap` properties\n     *\n     * ```tsx\n     * // wrong\n     * <Flex>\n     *   <SomeComponentWithBackground />\n     *   <SomeComponentWithBackground />\n     * </Flex>\n     *\n     * // right\n     * <Flex>\n     *   <div>\n     *     <SomeComponentWithBackground />\n     *   </div>\n     *   <div>\n     *     <SomeComponentWithBackground />\n     *   </div>\n     * </Flex>\n     * ```\n     */\n    space?: Space | MediaPartial<Space>;\n}\n\ntype FlexRef<C extends React.ElementType> = React.ComponentPropsWithRef<C>['ref'];\n\ntype FlexPropsWithTypedAttrs<T extends React.ElementType> = FlexProps<T> &\n    Omit<React.ComponentPropsWithoutRef<T>, keyof FlexProps<T>>;\n\n/**\n * Flexbox model utility component.\n *\n * ```tsx\n * import {Flex, Button} from '@gravity-ui/uikit';\n *\n * <Flex\n *  // take value from theme depends of current media query\n *  space\n * >\n *  <Button>\n *      Button 1\n *  </Button>\n *  <Button>\n *      Button 2\n *  </Button>\n * </Flex>\n * ```\n *\n * Use build in media goods via props\n *\n * ```tsx\n * <Flex\n *  // space dynamically changes instead of current media query\n *  space={{s: '1', m: '5'}}\n *  // `flex-direction: column` will be applied to `l`, 'xl', 'xxl' and `xxxl` media queries\n *  direction={{'s': 'column', 'm': 'row'}}\n * >\n *  {...}\n * </Flex>\n * ```\n * ---\n * Storybook - https://preview.gravity-ui.com/uikit/?path=/docs/layout--playground#flex\n */\nexport const Flex = React.forwardRef(function Flex<T extends React.ElementType = 'div'>(\n    props: FlexProps<T>,\n    ref: FlexRef<T>,\n) {\n    const {\n        as: propsAs,\n        direction,\n        grow,\n        basis,\n        children,\n        style,\n        alignContent,\n        alignItems,\n        alignSelf,\n        justifyContent,\n        justifyItems,\n        justifySelf,\n        shrink,\n        wrap,\n        inline,\n        gap,\n        gapRow,\n        className,\n        space,\n        centerContent,\n        ...restProps\n    } = props;\n\n    const as: React.ElementType = propsAs || 'div';\n\n    const {\n        getClosestMediaProps,\n        theme: {spaceBaseSize},\n    } = useLayoutContext();\n\n    const applyMediaProps = <P,>(\n        property?: P | MediaPartial<P extends MediaPartial<infer V> ? V : P>,\n    ): P | (P extends MediaPartial<infer V> ? V : P) | undefined =>\n        typeof property === 'object' && property !== null\n            ? getClosestMediaProps(property)\n            : property;\n\n    const gapSpaceSize = applyMediaProps(gap);\n    const columnGap =\n        typeof gapSpaceSize === 'undefined' ? undefined : spaceBaseSize * Number(gapSpaceSize);\n\n    const gapRowSpaceSize = applyMediaProps(gapRow) || gapSpaceSize;\n    const rowGap =\n        typeof gapRowSpaceSize === 'undefined'\n            ? undefined\n            : spaceBaseSize * Number(gapRowSpaceSize);\n\n    const spaceSize = applyMediaProps(space);\n    const s =\n        typeof gap === 'undefined' &&\n        typeof gapRow === 'undefined' &&\n        typeof spaceSize !== 'undefined'\n            ? makeCssMod(spaceSize)\n            : undefined;\n\n    return (\n        <Box\n            as={as}\n            className={b(\n                {\n                    'center-content': centerContent,\n                    inline,\n                    s,\n                },\n                className,\n            )}\n            ref={ref}\n            style={{\n                flexDirection: applyMediaProps(direction),\n                flexGrow: grow === true ? 1 : grow,\n                flexWrap: wrap === true ? 'wrap' : wrap,\n                flexBasis: basis,\n                flexShrink: shrink,\n                columnGap,\n                rowGap,\n                alignContent: applyMediaProps(alignContent),\n                alignItems: applyMediaProps(alignItems),\n                alignSelf: applyMediaProps(alignSelf),\n                justifyContent: applyMediaProps(justifyContent),\n                justifyItems: applyMediaProps(justifyItems),\n                justifySelf: applyMediaProps(justifySelf),\n                ...style,\n            }}\n            {...restProps}\n        >\n            {space\n                ? React.Children.map(children, (child) =>\n                      // `space` uses negative margins under the hood. This is hack to prevent wrong background position appearance.\n                      child ? <div className={b('wr')}>{child}</div> : child,\n                  )\n                : children}\n        </Box>\n    );\n}) as (<C extends React.ElementType = 'div'>(\n    props: FlexPropsWithTypedAttrs<C> & {ref?: FlexRef<C>},\n) => React.ReactElement) & {displayName: string};\n"]}