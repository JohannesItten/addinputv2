{"version":3,"file":"withTableSettings.js","sourceRoot":"../../../../../../src","sources":["components/Table/hoc/withTableSettings/withTableSettings.tsx"],"names":[],"mappings":"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","sourcesContent":["'use client';\n\nimport * as React from 'react';\n\nimport {Gear} from '@gravity-ui/icons';\n\nimport {Button} from '../../../Button';\nimport {Icon} from '../../../Icon';\nimport type {PopupPlacement} from '../../../Popup';\nimport type {TreeSelectProps} from '../../../TreeSelect';\nimport {block} from '../../../utils/cn';\nimport {getComponentName} from '../../../utils/getComponentName';\nimport type {TableColumnConfig, TableDataItem, TableProps} from '../../Table';\nimport {actionsColumnId, enhanceSystemColumn} from '../withTableActions/withTableActions';\nimport {selectionColumnId} from '../withTableSelection/withTableSelection';\n\nimport {TableColumnSetup} from './TableColumnSetup/TableColumnSetup';\nimport type {RenderControls, TableColumnSetupItem} from './TableColumnSetup/TableColumnSetup';\nimport i18n from './i18n';\n\nimport './withTableSettings.scss';\n\nexport type TableSetting = {id: string; isSelected?: boolean};\n\nexport type TableSettingsData = TableSetting[];\n\nexport function filterColumns<I>(\n    columns: TableColumnConfig<I>[],\n    settings: TableSettingsData,\n): TableColumnConfig<I>[] {\n    const filteredColumns = settings\n        .map(({id, isSelected}) => ({\n            isSelected,\n            columnSettings: columns.find((column) => id === column.id),\n        }))\n        .filter(({isSelected, columnSettings}) => isSelected && columnSettings)\n        .map(({columnSettings}) => columnSettings);\n\n    if (columns[0] && columns[0].id === selectionColumnId) {\n        filteredColumns.unshift(columns[0]);\n    }\n    const lastColumn = columns.at(-1);\n    if (lastColumn && lastColumn.id === actionsColumnId) {\n        filteredColumns.push(lastColumn);\n    }\n\n    return filteredColumns as TableColumnConfig<I>[];\n}\n\nexport function getColumnStringTitle<Data>(column: TableColumnConfig<Data>) {\n    const displayName = column.meta?.displayName;\n    if (typeof displayName === 'string') {\n        return displayName;\n    }\n    if (typeof column.name === 'string') {\n        return column.name;\n    }\n    const originalName = column.meta?._originalName;\n    if (typeof originalName === 'string') {\n        return originalName;\n    }\n    return column.id;\n}\n\nconst getTableColumnSetupItem = <I extends unknown>(\n    id: string,\n    isSelected: boolean | undefined,\n    column: TableColumnConfig<I> | undefined,\n): TableColumnSetupItem => {\n    const isProtected = Boolean(column?.meta?.selectedAlways);\n\n    return {\n        id,\n        isSelected: isProtected ? true : isSelected,\n        isRequired: isProtected,\n        title: column ? getColumnStringTitle(column) : id,\n        sticky: column?.sticky,\n    };\n};\n\nexport function getActualItems<I>(\n    columns: TableColumnConfig<I>[],\n    settings: TableSettingsData,\n): TableColumnSetupItem[] {\n    const sortableItems: TableColumnSetupItem[] = [];\n\n    settings.forEach(({id, isSelected}) => {\n        const column = columns.find((column) => id === column.id);\n\n        if (column) {\n            sortableItems.push(getTableColumnSetupItem(id, isSelected, column));\n        }\n    });\n\n    columns.forEach((column) => {\n        if (\n            column.id !== actionsColumnId &&\n            column.id !== selectionColumnId &&\n            settings.every((setting) => setting.id !== column.id)\n        ) {\n            const isSelected = column.meta?.selectedByDefault !== false;\n            sortableItems.push(getTableColumnSetupItem(column.id, isSelected, column));\n        }\n    });\n\n    return sortableItems;\n}\n\nexport interface WithTableSettingsOptions {\n    width?: TreeSelectProps<any>['popupWidth'];\n    sortable?: boolean;\n    filterable?: boolean;\n}\n\ninterface WithTableSettingsBaseProps {\n    /**\n     * @deprecated Use factory notation: \"withTableSettings({width: <value>})(Table)\"\n     */\n    settingsPopupWidth?: TreeSelectProps<any>['popupWidth'];\n\n    settings: TableSettingsData;\n    updateSettings: (data: TableSettingsData) => void;\n\n    /**\n     * @deprecated\n     */\n    renderControls?: RenderControls;\n}\n\ninterface WithDefaultSettings {\n    /** Settings to which you can reset the current settings. */\n    defaultSettings: TableSettingsData;\n    /**\n     * Display a reset button that resets the current settings changes.\n     *\n     * If the `defaultSettings` prop is set then the settings reset to the `defaultSettings`.\n     */\n    showResetButton: boolean;\n}\n\ninterface WithoutDefaultSettings {\n    defaultSettings?: never;\n    showResetButton?: boolean;\n}\n\ninterface WithFilter {\n    settingsFilterPlaceholder?: string;\n    settingsFilterEmptyMessage?: string;\n    filterSettings?: (value: string, item: TableColumnSetupItem) => boolean;\n}\n\nexport type WithTableSettingsProps = WithTableSettingsBaseProps &\n    (WithDefaultSettings | WithoutDefaultSettings) &\n    WithFilter;\n\nconst b = block('table');\n\nconst POPUP_PLACEMENT: PopupPlacement = ['bottom-end', 'bottom', 'top-end', 'top'];\n\nexport function withTableSettings<I extends TableDataItem, E extends {} = {}>(\n    Component: React.ComponentType<TableProps<I> & E>,\n): React.ComponentType<TableProps<I> & WithTableSettingsProps & E>;\nexport function withTableSettings<I extends TableDataItem, E extends {} = {}>(\n    options?: WithTableSettingsOptions,\n): (\n    Component: React.ComponentType<TableProps<I> & E>,\n) => React.ComponentType<TableProps<I> & WithTableSettingsProps & E>;\nexport function withTableSettings<I extends TableDataItem, E extends {} = {}>(\n    ComponentOrOptions?: WithTableSettingsOptions | React.ComponentType<TableProps<I> & E>,\n):\n    | React.ComponentType<TableProps<I> & WithTableSettingsProps & E>\n    | ((\n          Component: React.ComponentType<TableProps<I> & E>,\n      ) => React.ComponentType<TableProps<I> & WithTableSettingsProps & E>) {\n    function tableWithSettingsFactory(\n        TableComponent: React.ComponentType<TableProps<I> & E>,\n        {width, sortable, filterable}: WithTableSettingsOptions = {},\n    ) {\n        const componentName = getComponentName(TableComponent);\n\n        function TableWithSettings({\n            updateSettings,\n            settings,\n            columns,\n            settingsPopupWidth,\n            renderControls,\n            defaultSettings,\n            showResetButton,\n            settingsFilterPlaceholder,\n            settingsFilterEmptyMessage,\n            filterSettings,\n            ...restTableProps\n        }: TableProps<I> & WithTableSettingsProps & E) {\n            const defaultActualItems = React.useMemo(() => {\n                if (!defaultSettings) {\n                    return undefined;\n                }\n\n                return getActualItems(columns, defaultSettings);\n            }, [columns, defaultSettings]);\n\n            const enhancedColumns = React.useMemo(() => {\n                const actualItems = getActualItems(columns, settings || []);\n                return enhanceSystemColumn(filterColumns(columns, actualItems), (systemColumn) => {\n                    systemColumn.name = () => (\n                        <div className={b('settings')}>\n                            <TableColumnSetup\n                                popupWidth={settingsPopupWidth || width}\n                                popupPlacement={POPUP_PLACEMENT}\n                                sortable={sortable}\n                                filterable={filterable}\n                                filterPlaceholder={settingsFilterPlaceholder}\n                                filterEmptyMessage={settingsFilterEmptyMessage}\n                                filterSettings={filterSettings}\n                                onUpdate={updateSettings}\n                                items={actualItems}\n                                renderSwitcher={({onClick}) => (\n                                    <Button\n                                        view=\"flat\"\n                                        className={b('settings-button')}\n                                        aria-label={i18n('label_settings')}\n                                        onClick={onClick}\n                                    >\n                                        <Icon data={Gear} />\n                                    </Button>\n                                )}\n                                renderControls={renderControls}\n                                defaultItems={defaultActualItems}\n                                showResetButton={showResetButton}\n                            />\n                        </div>\n                    );\n                });\n            }, [\n                columns,\n                settings,\n                settingsPopupWidth,\n                updateSettings,\n                renderControls,\n                defaultActualItems,\n                showResetButton,\n            ]);\n\n            return (\n                <React.Fragment>\n                    <TableComponent\n                        {...(restTableProps as Omit<TableProps<I>, 'columns'> & E)}\n                        columns={enhancedColumns}\n                    />\n                </React.Fragment>\n            );\n        }\n        TableWithSettings.displayName = `withTableSettings(${componentName})`;\n\n        return TableWithSettings;\n    }\n\n    if (typeof ComponentOrOptions === 'function') {\n        return tableWithSettingsFactory(ComponentOrOptions);\n    } else {\n        return (TableComponent: React.ComponentType<TableProps<I> & E>) =>\n            tableWithSettingsFactory(TableComponent, ComponentOrOptions);\n    }\n}\n"]}