{"version":3,"file":"utils.js","sourceRoot":"../../../../src","sources":["components/controls/utils.ts"],"names":[],"mappings":"AAEA,MAAM,CAAC,MAAM,wBAAwB,GAAG,0BAA0B,CAAC;AACnE,MAAM,CAAC,MAAM,qBAAqB,GAAG,uBAAuB,CAAC;AAE7D,MAAM,CAAC,MAAM,mBAAmB,GAAG,CAC/B,YAAmD,EACjC,EAAE;IACpB,IAAI,OAAO,YAAY,KAAK,SAAS,EAAE,CAAC;QACpC,OAAO,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;IACvC,CAAC;SAAM,CAAC;QACJ,OAAO,YAAY,CAAC;IACxB,CAAC;AACL,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAChC,mBAA6D,EAChC,EAAE;IAC/B,OAAO,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC;AACnE,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAC5B,UAGC,EACH,EAAE;IACA,MAAM,EACF,KAAK,EAAE,SAAS,EAChB,YAAY,EAAE,gBAAgB,EAC9B,cAAc,EACd,eAAe,EAAE,mBAAmB,GACvC,GAAG,UAAU,CAAC;IAEf,IAAI,YAAmD,CAAC;IACxD,IAAI,OAAO,SAAS,KAAK,QAAQ,EAAE,CAAC;QAChC,YAAY,GAAG,SAAS,CAAC;IAC7B,CAAC;IACD,IAAI,gBAAgB,EAAE,CAAC;QACnB,YAAY,GAAG,gBAAgB,CAAC;IACpC,CAAC;IAED,IAAI,eAAyD,CAAC;IAC9D,IAAI,mBAAmB,KAAK,SAAS,IAAI,OAAO,CAAC,SAAS,CAAC,EAAE,CAAC;QAC1D,eAAe,GAAG,SAAS,CAAC;IAChC,CAAC;IAED,OAAO,EAAC,YAAY,EAAE,cAAc,EAAE,eAAe,EAAC,CAAC;AAC3D,CAAC,CAAC","sourcesContent":["import type {BaseInputControlProps, InputControlState} from './types';\n\nexport const CONTROL_ERROR_MESSAGE_QA = 'control-error-message-qa';\nexport const CONTROL_ERROR_ICON_QA = 'control-error-icon-qa';\n\nexport const prepareAutoComplete = (\n    autoComplete: BaseInputControlProps['autoComplete'],\n): string | undefined => {\n    if (typeof autoComplete === 'boolean') {\n        return autoComplete ? 'on' : 'off';\n    } else {\n        return autoComplete;\n    }\n};\n\nexport const getInputControlState = (\n    validationStateProp: BaseInputControlProps['validationState'],\n): InputControlState | undefined => {\n    return validationStateProp === 'invalid' ? 'error' : undefined;\n};\n\nexport const errorPropsMapper = (\n    errorProps: Pick<\n        BaseInputControlProps,\n        'error' | 'errorMessage' | 'errorPlacement' | 'validationState'\n    >,\n) => {\n    const {\n        error: errorProp,\n        errorMessage: errorMessageProp,\n        errorPlacement,\n        validationState: validationStateProp,\n    } = errorProps;\n\n    let errorMessage: BaseInputControlProps['errorMessage'];\n    if (typeof errorProp === 'string') {\n        errorMessage = errorProp;\n    }\n    if (errorMessageProp) {\n        errorMessage = errorMessageProp;\n    }\n\n    let validationState: BaseInputControlProps['validationState'];\n    if (validationStateProp === 'invalid' || Boolean(errorProp)) {\n        validationState = 'invalid';\n    }\n\n    return {errorMessage, errorPlacement, validationState};\n};\n"]}