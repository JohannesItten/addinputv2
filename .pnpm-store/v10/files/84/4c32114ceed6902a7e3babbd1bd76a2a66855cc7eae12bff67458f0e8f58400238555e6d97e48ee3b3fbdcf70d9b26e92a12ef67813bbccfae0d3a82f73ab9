{"version":3,"file":"useControlledValue.js","sourceRoot":"../../../../../src","sources":["components/TreeSelect/hooks/useControlledValue.ts"],"names":[],"mappings":";;;;AAAA,qDAA+B;AAU/B,MAAM,aAAa,GAAG,CAAC,YAAuC,EAAgB,EAAE,CAC5E,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,MAAM,CAAe,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,KAAK,CAAC,EAAE,EAAE;IACnE,IAAI,KAAK,EAAE,CAAC;QACR,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACjB,CAAC;IACD,OAAO,GAAG,CAAC;AACf,CAAC,EAAE,EAAE,CAAC,CAAC;AAEJ,MAAM,kBAAkB,GAAG,CAAC,EAC/B,YAAY,GAAG,EAAE,EACjB,KAAK,EAAE,UAAU,EACjB,QAAQ,GACc,EAAE,EAAE;IAC1B,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAW,YAAY,CAAC,CAAC;IAE3E,MAAM,KAAK,GAAa,UAAU,IAAI,UAAU,CAAC;IAEjD,MAAM,YAAY,GAAG,CAAC,UAAU,CAAC;IAEjC,MAAM,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE;QAC9B,MAAM,YAAY,GAAG,KAAK,CAAC,MAAM,CAA4B,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;YACtE,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;YAEhB,OAAO,GAAG,CAAC;QACf,CAAC,EAAE,EAAE,CAAC,CAAC;QAEP,MAAM,WAAW,GAAkD,CAAC,OAAO,EAAE,EAAE;YAC3E,MAAM,SAAS,GAAG,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;YAClF,MAAM,aAAa,GAAG,aAAa,CAAC,SAAS,CAAC,CAAC;YAE/C,IAAI,YAAY,EAAE,CAAC;gBACf,aAAa,CAAC,aAAa,CAAC,CAAC;YACjC,CAAC;iBAAM,CAAC;gBACJ,QAAQ,EAAE,CAAC,aAAa,CAAC,CAAC;YAC9B,CAAC;QACL,CAAC,CAAC;QAEF,OAAO;YACH,KAAK;YACL,YAAY;YACZ,WAAW;YACX;;eAEG;YACH,aAAa,EAAE,YAAY,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,SAAS;SAC1D,CAAC;IACN,CAAC,EAAE,CAAC,QAAQ,EAAE,YAAY,EAAE,KAAK,CAAC,CAAC,CAAC;IAEpC,OAAO,MAAM,CAAC;AAClB,CAAC,CAAC;AAzCW,QAAA,kBAAkB,sBAyC7B","sourcesContent":["import * as React from 'react';\n\nimport type {ListItemId, ListState, ListStateHandler} from '../../useList/types';\n\ntype UseControlledValueProps = {\n    value?: string[];\n    defaultValue?: string[];\n    onUpdate?(ids: ListItemId[]): void;\n};\n\nconst prepareParams = (selectedById: ListState['selectedById']): ListItemId[] =>\n    Object.entries(selectedById).reduce<ListItemId[]>((acc, [id, value]) => {\n        if (value) {\n            acc.push(id);\n        }\n        return acc;\n    }, []);\n\nexport const useControlledValue = ({\n    defaultValue = [],\n    value: valueProps,\n    onUpdate,\n}: UseControlledValueProps) => {\n    const [innerValue, setInnerValue] = React.useState<string[]>(defaultValue);\n\n    const value: string[] = valueProps ?? innerValue;\n\n    const uncontrolled = !valueProps;\n\n    const result = React.useMemo(() => {\n        const selectedById = value.reduce<ListState['selectedById']>((acc, val) => {\n            acc[val] = true;\n\n            return acc;\n        }, {});\n\n        const setSelected: ListStateHandler<Record<ListItemId, boolean>> = (payload) => {\n            const nextValue = typeof payload === 'function' ? payload(selectedById) : payload;\n            const preparedValue = prepareParams(nextValue);\n\n            if (uncontrolled) {\n                setInnerValue(preparedValue);\n            } else {\n                onUpdate?.(preparedValue);\n            }\n        };\n\n        return {\n            value,\n            selectedById,\n            setSelected,\n            /**\n             * Available only if `uncontrolled` component valiant\n             */\n            setInnerValue: uncontrolled ? setInnerValue : undefined,\n        };\n    }, [onUpdate, uncontrolled, value]);\n\n    return result;\n};\n"]}