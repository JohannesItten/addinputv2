{"version":3,"file":"EventBroker.js","sourceRoot":"../../../../../src","sources":["components/utils/event-broker/EventBroker.ts"],"names":[],"mappings":";;;AACA,iCAAgC;AAWhC,MAAa,WAAW;IACpB,aAAa,GAA8B,EAAE,CAAC;IAC9C,eAAe,CAAU;IAEzB,YAAY,MAAe;QACvB,IAAI,CAAC,eAAe,GAAG,MAAM,CAAC;IAClC,CAAC;IAED,SAAS,CAAC,YAAqC;QAC3C,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC1C,CAAC;IAED,WAAW,CAAC,YAAqC;QAC7C,MAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;QAEvD,IAAI,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC;YACb,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QACxC,CAAC;IACL,CAAC;IAED,OAAO,CAAC,EAAC,WAAW,EAAE,GAAG,QAAQ,EAAkB;QAC/C,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE,CAC9B,EAAE,CAAC;YACC,GAAG,QAAQ;YACX,WAAW,EAAE,IAAI,CAAC,eAAe;gBAC7B,CAAC,CAAC,GAAG,IAAI,CAAC,eAAe,GAAG,WAAW,EAAE;gBACzC,CAAC,CAAC,WAAW;SACpB,CAAC,CACL,CAAC;IACN,CAAC;IAED,kBAAkB,CAAC,WAAmB,EAAE,EAAW;QAC/C,OAAO,CAAC,eAA4D,EAAE,EAAE;YACpE,IAAI,CAAC,OAAO,CAAC;gBACT,GAAG,eAAe;gBAClB,WAAW;gBACX,EAAE;aACL,CAAC,CAAC;QACP,CAAC,CAAC;IACN,CAAC;CACJ;AAxCD,kCAwCC;AAEY,QAAA,WAAW,GAAG,IAAI,WAAW,CAAC,cAAS,CAAC,CAAC","sourcesContent":["import type {QAProps} from '../../types';\nimport {NAMESPACE} from '../cn';\n\nexport interface EventBrokerData<T = unknown> extends QAProps {\n    componentId: string;\n    eventId: string;\n    meta?: T;\n    domEvent?: React.SyntheticEvent;\n}\n\nexport type EventBrokerSubscription = (data: EventBrokerData) => void;\n\nexport class EventBroker {\n    subscriptions: EventBrokerSubscription[] = [];\n    componentPrefix?: string;\n\n    constructor(prefix?: string) {\n        this.componentPrefix = prefix;\n    }\n\n    subscribe(subscription: EventBrokerSubscription) {\n        this.subscriptions.push(subscription);\n    }\n\n    unsubscribe(subscription: EventBrokerSubscription) {\n        const index = this.subscriptions.indexOf(subscription);\n\n        if (index > -1) {\n            this.subscriptions.splice(index, 1);\n        }\n    }\n\n    publish({componentId, ...restData}: EventBrokerData) {\n        this.subscriptions.forEach((fn) =>\n            fn({\n                ...restData,\n                componentId: this.componentPrefix\n                    ? `${this.componentPrefix}${componentId}`\n                    : componentId,\n            }),\n        );\n    }\n\n    withEventPublisher(componentId: string, qa?: string) {\n        return (eventBrokerData: Omit<EventBrokerData, 'componentId' | 'qa'>) => {\n            this.publish({\n                ...eventBrokerData,\n                componentId,\n                qa,\n            });\n        };\n    }\n}\n\nexport const eventBroker = new EventBroker(NAMESPACE);\n"]}