{"version":3,"file":"types.js","sourceRoot":"../../../../src","sources":["components/AvatarStack/types.ts"],"names":[],"mappings":"","sourcesContent":["import type * as React from 'react';\n\nimport type {AvatarSize} from '../Avatar';\n\nexport type AvatarStackOverlapSize = 's' | 'm' | 'l';\n\nexport interface AvatarStackProps {\n    /** Amount of avatars to be shown before more button. Default 3. */\n    max?: number;\n    /** Total amount of items, used to calculate number of not rendered avatars */\n    total?: number;\n    /**\n     * How much each avatar should overlap next one\n     * | Avatar sizes | Recommended overlap |\n     * | :----------: | :-----------------: |\n     * | `xs`-`m`     | `s`                 |\n     * | `l`          | `m`                 |\n     * | `xl`         | `l`                 |\n     */\n    overlapSize?: AvatarStackOverlapSize;\n    /**\n     * Size for control displaying count of extra avatars\n     */\n    size?: AvatarSize;\n    className?: string;\n    /**\n     * Children would be wrapped for \"stacking\"\n     * @example\n     * <AvatarStack>\n     *     <Avatar/>\n     *     <Tooltip content=\"Some info\"><Avatar/></Tooltip>\n     * </AvatarStack>\n     */\n    children?: React.ReactNode;\n    /**\n     * Custom render for control displaying extra data\n     * @example\n     * <AvatarStack renderMore={({count}) => <Button>+{count}</Button>}>\n     *     <Avatar/>\n     * </AvatarStack>\n     */\n    renderMore?: (options: {count: number}) => React.ReactElement;\n}\n\nexport type AvatarStackMoreProps = Pick<\n    React.HTMLProps<HTMLDivElement>,\n    'className' | 'aria-label'\n> & {\n    count: number;\n    size?: AvatarSize;\n    borderColor?: string;\n};\n\nexport type AvatarStackMoreButtonProps = Pick<React.HTMLProps<HTMLButtonElement>, 'onClick'> &\n    AvatarStackMoreProps & {\n        badgeClassName?: string;\n    };\n"]}