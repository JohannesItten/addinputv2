{"version":3,"file":"useControlledState.js","sourceRoot":"../../../../src","sources":["hooks/useControlledState/useControlledState.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAY/B,MAAM,UAAU,kBAAkB,CAC9B,KAAQ,EACR,YAAe,EACf,QAA4C;IAE5C,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,KAAK,IAAI,YAAY,CAAC,CAAC;IAE1E,MAAM,eAAe,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC;IAC1D,MAAM,YAAY,GAAG,KAAK,KAAK,SAAS,CAAC;IACzC,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACjB,MAAM,aAAa,GAAG,eAAe,CAAC,OAAO,CAAC;QAC9C,IAAI,aAAa,KAAK,YAAY,EAAE,CAAC;YACjC,OAAO,CAAC,KAAK,CACT,iDACI,aAAa,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,cACnC,OAAO,YAAY,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,cAAc,GAAG,CACzD,CAAC;QACN,CAAC;QACD,eAAe,CAAC,OAAO,GAAG,YAAY,CAAC;IAC3C,CAAC,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC;IAEnB,IAAI,YAAY,GAAG,YAAY,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,UAAU,CAAC;IACrD,MAAM,QAAQ,GAAG,KAAK,CAAC,WAAW;IAC9B,uEAAuE;IACvE,oEAAoE;IACpE,+DAA+D;IAC/D,4EAA4E;IAC5E,CAAC,QAAW,EAAE,GAAG,IAAU,EAAE,EAAE;QAC3B,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,YAAY,EAAE,QAAQ,CAAC,EAAE,CAAC;YACrC,QAAQ,EAAE,CAAC,QAAQ,EAAE,GAAG,IAAI,CAAC,CAAC;QAClC,CAAC;QACD,IAAI,CAAC,YAAY,EAAE,CAAC;YAChB,kEAAkE;YAClE,gFAAgF;YAChF,yEAAyE;YACzE,yFAAyF;YACzF,uDAAuD;YACvD,YAAY,GAAG,QAAQ,CAAC;YACxB,aAAa,CAAC,QAAQ,CAAC,CAAC;QAC5B,CAAC;IACL,CAAC,EACD,CAAC,YAAY,EAAE,QAAQ,EAAE,YAAY,CAAC,CACzC,CAAC;IAEF,OAAO,CAAC,YAAY,EAAE,QAAQ,CAAU,CAAC;AAC7C,CAAC","sourcesContent":["import * as React from 'react';\n\nexport function useControlledState<T, C = T, Args extends any[] = []>(\n    value: Exclude<T, undefined>,\n    defaultValue: Exclude<T, undefined> | undefined,\n    onChange?: (v: C, ...args: Args) => void,\n): [T, (value: C, ...args: Args) => void];\nexport function useControlledState<T, C = T, Args extends any[] = []>(\n    value: Exclude<T, undefined> | undefined,\n    defaultValue: Exclude<T, undefined>,\n    onChange?: (v: C, ...args: Args) => void,\n): [T, (value: C, ...args: Args) => void];\nexport function useControlledState<T, C extends T = T, Args extends any[] = []>(\n    value: T,\n    defaultValue: T,\n    onUpdate?: (value: C, ...args: Args) => void,\n) {\n    const [innerValue, setInnerValue] = React.useState(value ?? defaultValue);\n\n    const isControlledRef = React.useRef(value !== undefined);\n    const isControlled = value !== undefined;\n    React.useEffect(() => {\n        const wasControlled = isControlledRef.current;\n        if (wasControlled !== isControlled) {\n            console.error(\n                `[useControlledState] A component changed from ${\n                    wasControlled ? 'controlled' : 'uncontrolled'\n                } to ${isControlled ? 'controlled' : 'uncontrolled'}.`,\n            );\n        }\n        isControlledRef.current = isControlled;\n    }, [isControlled]);\n\n    let currentValue = isControlled ? value : innerValue;\n    const setState = React.useCallback(\n        // We do not use setState callback syntax case because of a side effect\n        // that we call `onUpdate` inside the callback function and onUpdate\n        // in a controlling component frequently calls setState itself,\n        // therefore we call `setState` while we're rendering a different component.\n        (newValue: C, ...args: Args) => {\n            if (!Object.is(currentValue, newValue)) {\n                onUpdate?.(newValue, ...args);\n            }\n            if (!isControlled) {\n                // If uncontrolled, mutate the currentValue local variable so that\n                // calling setState multiple times with the same value only emits onChange once.\n                // We do not use a ref for this because we specifically want the value to\n                // reset every render, and assigning to a ref in render breaks aborted suspended renders.\n                // eslint-disable-next-line react-hooks/exhaustive-deps\n                currentValue = newValue;\n                setInnerValue(newValue);\n            }\n        },\n        [isControlled, onUpdate, currentValue],\n    );\n\n    return [currentValue, setState] as const;\n}\n"]}