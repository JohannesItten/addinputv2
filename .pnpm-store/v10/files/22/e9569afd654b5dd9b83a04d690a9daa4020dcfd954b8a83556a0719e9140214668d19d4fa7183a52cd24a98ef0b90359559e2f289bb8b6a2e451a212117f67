{"version":3,"file":"Text.js","sourceRoot":"../../../../src","sources":["components/Text/Text.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAI/B,OAAO,EAAC,SAAS,EAAC,iCAA8B;AAEhD,OAAO,EAAC,IAAI,EAAC,uBAAoB;AAoBjC;;;;;;;;;;;;;;;;;;;;;;;;;GAyBG;AACH,MAAM,CAAC,MAAM,IAAI,GAAG,KAAK,CAAC,UAAU,CAAC,SAAS,IAAI,CAC9C,EACI,EAAE,EACF,QAAQ,EACR,OAAO,EACP,SAAS,EACT,QAAQ,EACR,KAAK,EACL,UAAU,EACV,SAAS,EACT,aAAa,EACb,KAAK,EAAE,UAAU,EACjB,EAAE,EACF,GAAG,IAAI,EACkB,EAC7B,GAA0B;IAE1B,MAAM,GAAG,GAAsB,EAAE,IAAI,MAAM,CAAC;IAE5C,MAAM,KAAK,GAAwB;QAC/B,GAAG,UAAU;KAChB,CAAC;IAEF,IAAI,OAAO,aAAa,KAAK,QAAQ,EAAE,CAAC;QACpC,KAAK,CAAC,eAAe,GAAG,aAAa,CAAC;IAC1C,CAAC;IAED,OAAO,CACH,KAAC,GAAG,IACA,GAAG,EAAE,GAAG,EACR,SAAS,EAAE,IAAI,CACX;YACI,OAAO;YACP,QAAQ;YACR,UAAU;YACV,SAAS;YACT,aAAa,EAAE,OAAO,aAAa,KAAK,QAAQ;SACnD,EACD,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC,EAAC,KAAK,EAAC,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CACpD,EACD,KAAK,EAAE,KAAK,aACH,EAAE,KACP,IAAI,YAEP,QAAQ,GACP,CACT,CAAC;AACN,CAAC,CAGiG,CAAC;AAEnG,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC","sourcesContent":["import * as React from 'react';\n\nimport type {DOMProps, QAProps} from '../types';\n\nimport {colorText} from './colorText/colorText';\nimport type {ColorTextBaseProps} from './colorText/colorText';\nimport {text} from './text/text';\nimport type {TextBaseProps} from './text/text';\n\nexport interface TextProps<C extends React.ElementType = 'span'>\n    extends Omit<TextBaseProps, 'ellipsisLines'>,\n        ColorTextBaseProps,\n        QAProps,\n        DOMProps {\n    /**\n     * Ability to override default html tag\n     */\n    as?: C;\n    ellipsisLines?: number;\n}\n\ntype TextRef<C extends React.ElementType> = React.ComponentPropsWithRef<C>['ref'];\n\ntype TextPropsWithTypedAttrs<T extends React.ElementType> = TextProps<T> &\n    Omit<React.ComponentPropsWithoutRef<T>, keyof TextProps<T>>;\n\n/**\n * A component for working with typography.\n *\n * Storybook: https://preview.gravity-ui.com/uikit/?path=/story/components-text--default\n *\n * **Hint:** Hover on props in your editor to read jsdoc\n *\n * Provides a convenient API for working with mixins of typography and text colors. Just point at the prop in you favorite code editor and read the accompanying documentation via `jsdoc` on where to apply this or that font or color.\n *\n * ```jsx\n * import {Text} from '@gravity-ui/uikit';\n *\n * <Text variant=\"body-1\" color=\"inherit\" ellipsis>some test</Text>\n * ```\n *\n * You can also use a more flexible way of setting the style. \"Gravity UI\" also provide `text` utility function.\n *\n *```jsx\n * import {text} from '@gravity-ui/uikit';\n *\n * // textStyles = 'text text_variant_display-1 some-class-name'\n * const textStyles = text({variant: 'display-1'}, 'some-class-name');\n *\n * <span className={textStyles}>some text</span>\n * ```\n */\nexport const Text = React.forwardRef(function Text<C extends React.ElementType = 'span'>(\n    {\n        as,\n        children,\n        variant,\n        className,\n        ellipsis,\n        color,\n        whiteSpace,\n        wordBreak,\n        ellipsisLines,\n        style: outerStyle,\n        qa,\n        ...rest\n    }: TextPropsWithTypedAttrs<C>,\n    ref: React.ForwardedRef<C>,\n) {\n    const Tag: React.ElementType = as || 'span';\n\n    const style: React.CSSProperties = {\n        ...outerStyle,\n    };\n\n    if (typeof ellipsisLines === 'number') {\n        style.WebkitLineClamp = ellipsisLines;\n    }\n\n    return (\n        <Tag\n            ref={ref}\n            className={text(\n                {\n                    variant,\n                    ellipsis,\n                    whiteSpace,\n                    wordBreak,\n                    ellipsisLines: typeof ellipsisLines === 'number',\n                },\n                color ? colorText({color}, className) : className,\n            )}\n            style={style}\n            data-qa={qa}\n            {...rest}\n        >\n            {children}\n        </Tag>\n    );\n}) as (<C extends React.ElementType = 'span'>({\n    ref,\n    ...props\n}: TextPropsWithTypedAttrs<C> & {ref?: TextRef<C>}) => React.ReactElement) & {displayName: string};\n\nText.displayName = 'Text';\n"]}