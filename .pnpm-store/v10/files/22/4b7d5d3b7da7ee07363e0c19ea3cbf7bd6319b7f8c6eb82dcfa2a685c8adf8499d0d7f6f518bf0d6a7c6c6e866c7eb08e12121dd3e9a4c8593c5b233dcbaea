{"version":3,"file":"HiddenSelect.js","sourceRoot":"../../../../../../src","sources":["components/Select/components/HiddenSelect/HiddenSelect.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,EAAC,mBAAmB,EAAC,2CAAkC;AAS9D,6GAA6G;AAC7G,kBAAkB;AAClB,MAAM,UAAU,YAAY,CAAC,KAAwB;IACjD,MAAM,EAAC,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAC,GAAG,KAAK,CAAC;IAErD,MAAM,GAAG,GAAG,mBAAmB,CAAC,EAAC,OAAO,EAAE,YAAY,EAAE,KAAK,EAAC,CAAC,CAAC;IAEhE,IAAI,CAAC,IAAI,IAAI,QAAQ,EAAE,CAAC;QACpB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QACrB,OAAO,CACH,gBACI,GAAG,EAAE,GAAG,EACR,IAAI,EAAC,QAAQ,EACb,IAAI,EAAE,IAAI,EACV,KAAK,EAAE,KAAK,EACZ,IAAI,EAAE,IAAI,EACV,QAAQ,EAAE,QAAQ,GACpB,CACL,CAAC;IACN,CAAC;IAED,OAAO,CACH,KAAC,KAAK,CAAC,QAAQ,cACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CACjB,gBAEI,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,EAC9B,KAAK,EAAE,CAAC,EACR,IAAI,EAAC,QAAQ,EACb,IAAI,EAAE,IAAI,EACV,IAAI,EAAE,IAAI,EACV,QAAQ,EAAE,QAAQ,IANb,CAAC,CAOR,CACL,CAAC,GACW,CACpB,CAAC;AACN,CAAC","sourcesContent":["'use client';\n\nimport * as React from 'react';\n\nimport {useFormResetHandler} from '../../../../hooks/private';\n\ninterface HiddenSelectProps {\n    name?: string;\n    value: string[];\n    disabled?: boolean;\n    form?: string;\n    onReset: (value: string[]) => void;\n}\n//FIXME: current implementation is not accessible to screen readers and does not support browser autofill and\n// form validation\nexport function HiddenSelect(props: HiddenSelectProps) {\n    const {name, value, disabled, form, onReset} = props;\n\n    const ref = useFormResetHandler({onReset, initialValue: value});\n\n    if (!name || disabled) {\n        return null;\n    }\n\n    if (value.length === 0) {\n        return (\n            <input\n                ref={ref}\n                type=\"hidden\"\n                name={name}\n                value={value}\n                form={form}\n                disabled={disabled}\n            />\n        );\n    }\n\n    return (\n        <React.Fragment>\n            {value.map((v, i) => (\n                <input\n                    key={v}\n                    ref={i === 0 ? ref : undefined}\n                    value={v}\n                    type=\"hidden\"\n                    name={name}\n                    form={form}\n                    disabled={disabled}\n                />\n            ))}\n        </React.Fragment>\n    );\n}\n"]}