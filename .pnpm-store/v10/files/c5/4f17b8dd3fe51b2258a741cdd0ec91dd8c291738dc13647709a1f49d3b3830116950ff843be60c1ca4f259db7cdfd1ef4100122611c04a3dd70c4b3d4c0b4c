{"version":3,"file":"useViewportSize.js","sourceRoot":"../../../../src","sources":["hooks/useViewportSize/useViewportSize.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAO/B,MAAM,eAAe,GAAG,GAA0B,EAAE,CAAC,CAAC;IAClD,KAAK,EAAE,MAAM,EAAE,cAAc,EAAE,KAAK,IAAI,MAAM,EAAE,UAAU,IAAI,SAAS;IACvE,MAAM,EAAE,MAAM,EAAE,cAAc,EAAE,MAAM,IAAI,MAAM,EAAE,WAAW,IAAI,SAAS;CAC7E,CAAC,CAAC;AAEH;;;;GAIG;AACH,MAAM,CAAC,MAAM,eAAe,GAAG,GAA0B,EAAE;IACvD,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAwB,eAAe,EAAE,CAAC,CAAC;IAEjF,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACjB,MAAM,QAAQ,GAAG,GAAG,EAAE;YAClB,IAAI,OAAO,GAAG,eAAe,EAAE,CAAC;YAChC,IAAI,OAAO,CAAC,KAAK,KAAK,IAAI,EAAE,KAAK,IAAI,OAAO,CAAC,MAAM,KAAK,IAAI,EAAE,MAAM,EAAE,CAAC;gBACnE,OAAO,GAAG,IAAI,CAAC;YACnB,CAAC;YACD,OAAO,CAAC,OAAO,CAAC,CAAC;QACrB,CAAC,CAAC;QAEF,CAAC,MAAM,CAAC,cAAc,IAAI,MAAM,CAAC,CAAC,gBAAgB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAEvE,OAAO,GAAG,EAAE;YACR,CAAC,MAAM,CAAC,cAAc,IAAI,MAAM,CAAC,CAAC,mBAAmB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAC9E,CAAC,CAAC;IACN,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;IAEX,OAAO,IAAI,CAAC;AAChB,CAAC,CAAC","sourcesContent":["import * as React from 'react';\n\nexport interface UseViewportSizeResult {\n    width?: number;\n    height?: number;\n}\n\nconst getViewportSize = (): UseViewportSizeResult => ({\n    width: window?.visualViewport?.width ?? window?.innerWidth ?? undefined,\n    height: window?.visualViewport?.height ?? window?.innerHeight ?? undefined,\n});\n\n/**\n * A hook to get the size of the viewport when resizing\n *\n * @return - {width, height}\n */\nexport const useViewportSize = (): UseViewportSizeResult => {\n    const [size, setSize] = React.useState<UseViewportSizeResult>(getViewportSize());\n\n    React.useEffect(() => {\n        const onResize = () => {\n            let newSize = getViewportSize();\n            if (newSize.width === size?.width && newSize.height === size?.height) {\n                newSize = size;\n            }\n            setSize(newSize);\n        };\n\n        (window.visualViewport ?? window).addEventListener('resize', onResize);\n\n        return () => {\n            (window.visualViewport ?? window).removeEventListener('resize', onResize);\n        };\n    }, [size]);\n\n    return size;\n};\n"]}