{"version":3,"file":"ListRecursiveRenderer.js","sourceRoot":"../../../../../../src","sources":["components/useList/components/ListRecursiveRenderer/ListRecursiveRenderer.tsx"],"names":[],"mappings":";AAEA,OAAO,EAAC,KAAK,EAAC,6BAA0B;AAExC,OAAO,EAAC,eAAe,EAAC,uCAAoC;AAE5D,qCAAsC;AAEtC,MAAM,CAAC,GAAG,KAAK,CAAC,yBAAyB,CAAC,CAAC;AAW3C,0DAA0D;AAC1D,MAAM,UAAU,yBAAyB,CAAI,EACzC,EAAE,EACF,UAAU,EACV,IAAI,EACJ,GAAG,KAAK,EACwB;IAChC,MAAM,IAAI,GAAG,KAAK,CAAC,QAAQ,CAAC,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC,CAAC;IAErE,IAAI,eAAe,CAAC,UAAU,CAAC,IAAI,UAAU,CAAC,QAAQ,EAAE,CAAC;QACrD,MAAM,UAAU,GACZ,IAAI,CAAC,KAAK,CAAC,YAAY,IAAI,EAAE,IAAI,IAAI,CAAC,KAAK,CAAC,YAAY;YACpD,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,EAAE,CAAC;YAC7B,CAAC,CAAC,IAAI,CAAC;QAEf,OAAO,CACH,cAAI,KAAK,EAAE,KAAK,CAAC,KAAK,EAAE,SAAS,EAAE,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,SAAS,CAAC,EAAE,IAAI,EAAC,OAAO,aACpE,IAAI,EACJ,UAAU;oBACP,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE,CAAC,EAAE,WAAW,CAAC;oBACpD,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC,CACrC,KAAC,yBAAyB,IACtB,IAAI,EAAE,IAAI,EACV,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,EACrD,UAAU,EAAE,IAAI,KAEZ,KAAK,IADJ,KAAK,CAEZ,CACL,CAAC,IACL,CACR,CAAC;IACN,CAAC;IAED,OAAO,IAAI,CAAC;AAChB,CAAC","sourcesContent":["import type * as React from 'react';\n\nimport {block} from '../../../utils/cn';\nimport type {ListItemId, ListItemType, UseListResult} from '../../types';\nimport {isTreeItemGuard} from '../../utils/isTreeItemGuard';\n\nimport './ListRecursiveRenderer.scss';\n\nconst b = block('list-recursive-renderer');\n\nexport interface ListItemRecursiveRendererProps<T> {\n    id: ListItemId;\n    list: UseListResult<T>;\n    itemSchema: ListItemType<T>;\n    children(id: ListItemId, index: number): React.JSX.Element;\n    className?: string;\n    style?: React.CSSProperties;\n}\n\n// Saves the nested html structure for tree data structure\nexport function ListItemRecursiveRenderer<T>({\n    id,\n    itemSchema,\n    list,\n    ...props\n}: ListItemRecursiveRendererProps<T>) {\n    const node = props.children(id, list.structure.idToFlattenIndex[id]);\n\n    if (isTreeItemGuard(itemSchema) && itemSchema.children) {\n        const isExpanded =\n            list.state.expandedById && id in list.state.expandedById\n                ? list.state.expandedById[id]\n                : true;\n\n        return (\n            <ul style={props.style} className={b(null, props.className)} role=\"group\">\n                {node}\n                {isExpanded &&\n                    Boolean(list.structure.groupsState[id]?.childrenIds) &&\n                    itemSchema.children.map((item, index) => (\n                        <ListItemRecursiveRenderer\n                            list={list}\n                            id={list.structure.groupsState[id].childrenIds[index]}\n                            itemSchema={item}\n                            key={index}\n                            {...props}\n                        />\n                    ))}\n            </ul>\n        );\n    }\n\n    return node;\n}\n"]}