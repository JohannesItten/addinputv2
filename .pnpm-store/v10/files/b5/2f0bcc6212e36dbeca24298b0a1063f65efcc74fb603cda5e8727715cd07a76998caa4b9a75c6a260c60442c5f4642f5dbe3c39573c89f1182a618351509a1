{"version":3,"file":"withDirection.js","sourceRoot":"../../../../src","sources":["components/theme/withDirection.tsx"],"names":[],"mappings":";;AASA,sCAaC;;AApBD,mEAA2D;AAG3D,oDAA4C;AAI5C,SAAgB,aAAa,CACzB,gBAAwC;IAExC,MAAM,aAAa,GAAG,IAAA,mCAAgB,EAAC,gBAAgB,CAAC,CAAC;IAEzD,MAAM,SAAS,GAAG,SAAS,sBAAsB,CAAC,KAAwC;QACtF,MAAM,SAAS,GAAG,IAAA,2BAAY,GAAE,CAAC;QACjC,OAAO,uBAAC,gBAAgB,OAAM,KAAW,EAAE,SAAS,EAAE,SAAS,GAAI,CAAC;IACxE,CAAC,CAAC;IAEF,SAAS,CAAC,WAAW,GAAG,iBAAiB,aAAa,GAAG,CAAC;IAE1D,OAAO,SAAS,CAAC;AACrB,CAAC","sourcesContent":["import type * as React from 'react';\n\nimport {getComponentName} from '../utils/getComponentName';\n\nimport type {ThemeContextProps} from './types';\nimport {useDirection} from './useDirection';\n\nexport interface WithDirectionProps extends Pick<ThemeContextProps, 'direction'> {}\n\nexport function withDirection<T extends WithDirectionProps>(\n    WrappedComponent: React.ComponentType<T>,\n): React.ComponentType<Omit<T, keyof WithDirectionProps>> {\n    const componentName = getComponentName(WrappedComponent);\n\n    const component = function WithDirectionComponent(props: Omit<T, keyof WithDirectionProps>) {\n        const direction = useDirection();\n        return <WrappedComponent {...(props as T)} direction={direction} />;\n    };\n\n    component.displayName = `withDirection(${componentName})`;\n\n    return component;\n}\n"]}