{"version":3,"file":"types.js","sourceRoot":"../../../../src","sources":["components/TreeSelect/types.ts"],"names":[],"mappings":"","sourcesContent":["import type * as React from 'react';\n\nimport type {UseOpenProps} from '../../hooks/useSelect/types';\nimport type {PopupPlacement} from '../Popup';\nimport type {SelectPopupProps} from '../Select/components/SelectPopup/types';\nimport type {\n    TreeListContainerProps,\n    TreeListProps,\n    TreeListRenderContainer,\n    TreeListRenderItem,\n} from '../TreeList/types';\nimport type {ListItemId, ListItemSize, UseListResult} from '../useList';\nimport type {UseListParsedStateProps} from '../useList/hooks/useListParsedState';\n\nexport type TreeSelectRenderControlProps<T> = {\n    list: UseListResult<T>;\n    open: boolean;\n    disabled?: boolean;\n    placeholder?: string;\n    toggleOpen(): void;\n    clearValue(): void;\n    ref: React.Ref<HTMLButtonElement>;\n    size: ListItemSize;\n    value: ListItemId[];\n    id: string;\n    activeItemId?: ListItemId;\n    title?: string;\n    hasClear?: boolean;\n    /**\n     * Determines content of the error message\n     */\n    errorMessage?: React.ReactNode;\n    /**\n     * Determines whether the error message will be placed under the input field as text or in the tooltip\n     */\n    errorPlacement?: 'outside' | 'inside';\n    /**\n     * Describes the validation state\n     */\n    validationState?: 'invalid';\n    isErrorVisible?: boolean;\n};\n\nexport type TreeSelectRenderItem<T, P extends {} = {}> = TreeListRenderItem<T, P>;\nexport type TreeSelectRenderContainerProps<T> = TreeListContainerProps<T>;\nexport type TreeSelectRenderContainer<T> = TreeListRenderContainer<T>;\n\ninterface TreeSelectBehavioralProps<T> extends UseListParsedStateProps<T> {\n    withExpandedState?: boolean;\n    multiple?: boolean;\n}\n\nexport interface TreeSelectProps<T, P extends {} = {}>\n    extends Omit<TreeListProps<T, P>, 'list' | 'renderContainer' | 'multiple'>,\n        Pick<\n            TreeSelectRenderControlProps<T>,\n            | 'title'\n            | 'placeholder'\n            | 'disabled'\n            | 'hasClear'\n            | 'errorPlacement'\n            | 'validationState'\n            | 'errorMessage'\n        >,\n        UseOpenProps,\n        TreeSelectBehavioralProps<T> {\n    value?: ListItemId[];\n    defaultValue?: ListItemId[] | undefined;\n    popupClassName?: string;\n    popupWidth?: SelectPopupProps['width'];\n    placement?: PopupPlacement;\n    width?: 'auto' | 'max' | number;\n    containerClassName?: string;\n    popupDisablePortal?: boolean;\n    /**\n     * Use slots if you don't need access to internal TreeListState.\n     * In other situations use `renderContainer` method\n     */\n    slotBeforeListBody?: React.ReactNode;\n    /**\n     * Use slots if you don't need access to internal TreeListState.\n     * In other situations use `renderContainer` method\n     */\n    slotAfterListBody?: React.ReactNode;\n    onUpdate?(value: ListItemId[]): void;\n    /**\n     * Ability to override custom toggler button\n     */\n    renderControl?(props: TreeSelectRenderControlProps<T>): React.JSX.Element;\n    renderContainer?: TreeSelectRenderContainer<T>;\n    onFocus?: (e: React.FocusEvent) => void;\n    onBlur?: (e: React.FocusEvent) => void;\n}\n"]}