{"version":3,"file":"types.js","sourceRoot":"../../../../src","sources":["components/controls/types.ts"],"names":[],"mappings":"","sourcesContent":["import type * as React from 'react';\n\nimport type {DOMProps, QAProps} from '../types';\n\nexport type InputControlView = 'normal' | 'clear';\n\nexport type InputControlSize = 's' | 'm' | 'l' | 'xl';\n\nexport type InputControlPin =\n    | 'round-round'\n    | 'brick-brick'\n    | 'clear-clear'\n    | 'round-brick'\n    | 'brick-round'\n    | 'round-clear'\n    | 'clear-round'\n    | 'brick-clear'\n    | 'clear-brick';\n\nexport type InputControlState = 'error';\n\nexport type BaseInputControlProps<T = Element> = DOMProps &\n    QAProps & {\n        /** The control's `autocomplete` attribute */\n        autoComplete?: boolean | 'on' | 'off' | string;\n        /** The control's `autofocus` attribute */\n        autoFocus?: boolean;\n        /** React ref provided to the control */\n        controlRef?: React.Ref<T>;\n        /** The control's default value. Use when the component is not controlled */\n        defaultValue?: string;\n        /** Indicates that the user cannot interact with the control */\n        disabled?: boolean;\n        /** Shows error state and optional message if property identified as a string\n         * @deprecated Prop `error` has a lower priority than `errorMessage`. Use `errorMessage` instead\n         */\n        error?: string | boolean;\n        /** Determines content of the error message */\n        errorMessage?: React.ReactNode;\n        /** Determines whether the error message will be placed under the input field as text or in the tooltip */\n        errorPlacement?: 'outside' | 'inside';\n        /** Describes the validation state */\n        validationState?: 'invalid';\n        /** Shows icon for clearing control's value */\n        hasClear?: boolean;\n        /** The control's `id` attribute */\n        id?: string;\n        /** The control's `name` attribute. Will be autogenerated if not specified */\n        name?: string;\n        /** Fires when the control lost focus. Provides focus event as an callback's argument */\n        onBlur?: React.FocusEventHandler<T>;\n        /** Fires when the input’s value is changed by the user. Provides change event as an callback's argument */\n        onChange?: React.ChangeEventHandler<T>;\n        /** Fires when the control gets focus. Provides focus event as an callback's argument */\n        onFocus?: React.FocusEventHandler<T>;\n        /** Fires when a key is pressed. Provides keyboard event as an callback's argument */\n        onKeyDown?: React.KeyboardEventHandler<T>;\n        /** @deprecated use `onKeyDown` instead */\n        onKeyPress?: React.KeyboardEventHandler<T>;\n        /** Fires when a key is released. Provides keyboard event as an callback's argument */\n        onKeyUp?: React.KeyboardEventHandler<T>;\n        /** Fires when the input’s value is changed by the user. Provides new value as an callback's argument */\n        onUpdate?: (value: string) => void;\n        /** The control's border view. `'round-round'` by default */\n        pin?: InputControlPin;\n        /** Text that appears in the control when it has no value set */\n        placeholder?: string;\n        /** Indicates that the user cannot change control's value */\n        readOnly?: boolean;\n        /** The control's size. `'m'` by default */\n        size?: InputControlSize;\n        /** The control's `tabindex` attribute */\n        tabIndex?: number;\n        /** The control's value */\n        value?: string;\n        /** The control's view. `'normal'` by default */\n        view?: InputControlView;\n    };\n"]}