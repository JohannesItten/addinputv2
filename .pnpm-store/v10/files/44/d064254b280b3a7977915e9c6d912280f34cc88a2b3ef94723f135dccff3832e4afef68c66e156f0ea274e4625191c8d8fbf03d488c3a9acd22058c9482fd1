{"version":3,"file":"useListState.js","sourceRoot":"../../../../../src","sources":["components/useList/hooks/useListState.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAY/B,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,EAAC,YAAY,EAAE,iBAAiB,EAAoB,EAAa,EAAE;IAC5F,MAAM,eAAe,GAAG,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;IACnD,MAAM,sBAAsB,GAAG,eAAe,CAAC,OAAO,KAAK,YAAY,CAAC;IACxE,eAAe,CAAC,OAAO,GAAG,YAAY,CAAC;IAEvC,MAAM,CAAC,YAAY,EAAE,WAAW,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,YAAY,EAAE,YAAY,IAAI,EAAE,CAAC,CAAC;IAC3F,MAAM,CAAC,YAAY,EAAE,WAAW,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,YAAY,EAAE,YAAY,IAAI,EAAE,CAAC,CAAC;IAC3F,MAAM,CAAC,YAAY,EAAE,WAAW,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,YAAY,EAAE,YAAY,IAAI,EAAE,CAAC,CAAC;IAC3F,MAAM,CAAC,YAAY,EAAE,eAAe,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;IAEzF,IAAI,sBAAsB,EAAE,CAAC;QACzB,IAAI,YAAY,EAAE,YAAY,EAAE,CAAC;YAC7B,WAAW,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC,EAAC,GAAG,YAAY,CAAC,YAAY,EAAE,GAAG,UAAU,EAAC,CAAC,CAAC,CAAC;QACjF,CAAC;QACD,IAAI,YAAY,EAAE,YAAY,EAAE,CAAC;YAC7B,WAAW,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC,EAAC,GAAG,YAAY,CAAC,YAAY,EAAE,GAAG,UAAU,EAAC,CAAC,CAAC,CAAC;QACjF,CAAC;QACD,IAAI,YAAY,EAAE,YAAY,EAAE,CAAC;YAC7B,WAAW,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC,EAAC,GAAG,YAAY,CAAC,YAAY,EAAE,GAAG,UAAU,EAAC,CAAC,CAAC,CAAC;QACjF,CAAC;QACD,eAAe,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,SAAS,IAAI,YAAY,EAAE,YAAY,CAAC,CAAC;IAC5E,CAAC;IAED,MAAM,MAAM,GAAc;QACtB,YAAY;QACZ,YAAY;QACZ,YAAY;QACZ,WAAW;QACX,WAAW;QACX,eAAe;KAClB,CAAC;IAEF,IAAI,iBAAiB,EAAE,CAAC;QACpB,MAAM,CAAC,YAAY,GAAG,YAAY,CAAC;QACnC,MAAM,CAAC,WAAW,GAAG,WAAW,CAAC;IACrC,CAAC;IAED,OAAO,MAAM,CAAC;AAClB,CAAC,CAAC","sourcesContent":["import * as React from 'react';\n\nimport type {ListState} from '../types';\n\nexport interface UseListStateProps {\n    /**\n     * Initial state values\n     */\n    initialState?: Partial<ListState>;\n    withExpandedState?: boolean;\n}\n\nexport const useListState = ({initialState, withExpandedState}: UseListStateProps): ListState => {\n    const initialStateRef = React.useRef(initialState);\n    const needToUpdateInitValues = initialStateRef.current !== initialState;\n    initialStateRef.current = initialState;\n\n    const [disabledById, setDisabled] = React.useState(() => initialState?.disabledById ?? {});\n    const [selectedById, setSelected] = React.useState(() => initialState?.selectedById ?? {});\n    const [expandedById, setExpanded] = React.useState(() => initialState?.expandedById ?? {});\n    const [activeItemId, setActiveItemId] = React.useState(() => initialState?.activeItemId);\n\n    if (needToUpdateInitValues) {\n        if (initialState?.disabledById) {\n            setDisabled((prevValues) => ({...initialState.disabledById, ...prevValues}));\n        }\n        if (initialState?.selectedById) {\n            setSelected((prevValues) => ({...initialState.selectedById, ...prevValues}));\n        }\n        if (initialState?.expandedById) {\n            setExpanded((prevValues) => ({...initialState.expandedById, ...prevValues}));\n        }\n        setActiveItemId((prevValue) => prevValue ?? initialState?.activeItemId);\n    }\n\n    const result: ListState = {\n        disabledById,\n        selectedById,\n        activeItemId,\n        setDisabled,\n        setSelected,\n        setActiveItemId,\n    };\n\n    if (withExpandedState) {\n        result.expandedById = expandedById;\n        result.setExpanded = setExpanded;\n    }\n\n    return result;\n};\n"]}