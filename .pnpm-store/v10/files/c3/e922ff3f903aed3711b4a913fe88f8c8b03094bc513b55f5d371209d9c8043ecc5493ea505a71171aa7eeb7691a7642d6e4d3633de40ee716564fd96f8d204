{"version":3,"file":"flattenItems.js","sourceRoot":"../../../../../src","sources":["components/useList/utils/flattenItems.ts"],"names":[],"mappings":"AAEA,OAAO,EAAC,aAAa,EAAC,2BAAwB;AAC9C,OAAO,EAAC,cAAc,EAAC,yBAAsB;AAC7C,OAAO,EAAC,eAAe,EAAC,6BAA0B;AAQlD,MAAM,UAAU,YAAY,CAAI,EAC5B,KAAK,EACL,SAAS,EACT,YAAY,GAAG,EAAE,GACE;IACnB,MAAM,OAAO,GAAiB,EAAE,CAAC;IAEjC,MAAM,YAAY,GAAG,CACjB,KAAe,EACf,IAAqB,EACrB,KAAa,EACb,QAAiB,EACnB,EAAE;QACA,MAAM,SAAS,GAAG,cAAc,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QAClD,MAAM,EAAE,GAAG,aAAa,CAAC,EAAC,SAAS,EAAE,IAAI,EAAE,SAAS,EAAC,CAAC,CAAC;QAEvD,uBAAuB;QACvB,IAAI,CAAC,QAAQ,EAAE,CAAC;YACZ,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACrB,CAAC;QAED,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAEf,IAAI,eAAe,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YACzC,iCAAiC;YACjC,IAAI,CAAC,CAAC,EAAE,IAAI,YAAY,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC;gBAC7C,KAAK,CAAC,IAAI,CACN,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CACnB,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,EAAE,CAAC,YAAY,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,EAAE,CAAC,EACpD,EAAE,CACL,CACJ,CAAC;YACN,CAAC;QACL,CAAC;QAED,OAAO,KAAK,CAAC;IACjB,CAAC,CAAC;IAEF,MAAM,iBAAiB,GAAG,KAAK,CAAC,MAAM,CAClC,CAAC,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC,YAAY,CAAC,GAAG,EAAE,IAAI,EAAE,KAAK,CAAC,EACpD,EAAE,CACL,CAAC;IAEF,MAAM,gBAAgB,GAA+B,EAAE,CAAC;IAExD,KAAK,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,iBAAiB,CAAC,OAAO,EAAE,EAAE,CAAC;QACtD,gBAAgB,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;IACnC,CAAC;IAED,OAAO;QACH,OAAO;QACP,iBAAiB;QACjB,gBAAgB;KACnB,CAAC;AACN,CAAC","sourcesContent":["import type {ListItemId, ListItemType, ParsedFlattenState} from '../types';\n\nimport {getListItemId} from './getListItemId';\nimport {getGroupItemId} from './groupItemId';\nimport {isTreeItemGuard} from './isTreeItemGuard';\n\ninterface FlattenItemsProps<T> {\n    items: ListItemType<T>[];\n    expandedById?: Record<ListItemId, boolean>;\n    getItemId?: (item: T) => ListItemId;\n}\n\nexport function flattenItems<T>({\n    items,\n    getItemId,\n    expandedById = {},\n}: FlattenItemsProps<T>): ParsedFlattenState {\n    const rootIds: ListItemId[] = [];\n\n    const getNestedIds = (\n        order: string[],\n        item: ListItemType<T>,\n        index: number,\n        parentId?: string,\n    ) => {\n        const groupedId = getGroupItemId(index, parentId);\n        const id = getListItemId({groupedId, item, getItemId});\n\n        // only top level array\n        if (!parentId) {\n            rootIds.push(id);\n        }\n\n        order.push(id);\n\n        if (isTreeItemGuard(item) && item.children) {\n            // don't include collapsed groups\n            if (!(id in expandedById && !expandedById[id])) {\n                order.push(\n                    ...item.children.reduce<string[]>(\n                        (acc, item, idx) => getNestedIds(acc, item, idx, id),\n                        [],\n                    ),\n                );\n            }\n        }\n\n        return order;\n    };\n\n    const visibleFlattenIds = items.reduce<string[]>(\n        (acc, item, index) => getNestedIds(acc, item, index),\n        [],\n    );\n\n    const idToFlattenIndex: Record<ListItemId, number> = {};\n\n    for (const [item, index] of visibleFlattenIds.entries()) {\n        idToFlattenIndex[index] = item;\n    }\n\n    return {\n        rootIds,\n        visibleFlattenIds,\n        idToFlattenIndex,\n    };\n}\n"]}