{"version":3,"file":"TextInput.js","sourceRoot":"../../../../../src","sources":["components/controls/TextInput/TextInput.tsx"],"names":[],"mappings":"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","sourcesContent":["'use client';\n\nimport * as React from 'react';\n\nimport {TriangleExclamation} from '@gravity-ui/icons';\n\nimport {useControlledState, useForkRef, useUniqId} from '../../../hooks';\nimport {useElementSize, useFormResetHandler} from '../../../hooks/private';\nimport {Icon} from '../../Icon';\nimport {Popover} from '../../legacy';\nimport {block} from '../../utils/cn';\nimport {ClearButton, mapTextInputSizeToButtonSize} from '../common';\nimport {OuterAdditionalContent} from '../common/OuterAdditionalContent/OuterAdditionalContent';\nimport type {\n    BaseInputControlProps,\n    InputControlPin,\n    InputControlSize,\n    InputControlView,\n} from '../types';\nimport {\n    CONTROL_ERROR_ICON_QA,\n    errorPropsMapper,\n    getInputControlState,\n    prepareAutoComplete,\n} from '../utils';\n\nimport {AdditionalContent} from './AdditionalContent';\nimport {TextInputControl} from './TextInputControl';\n\nimport './TextInput.scss';\n\nconst b = block('text-input');\n\nexport type TextInputProps = BaseInputControlProps<HTMLInputElement> & {\n    /** The control's [type](https://developer.mozilla.org/en-US/docs/Learn/Forms/HTML5_input_types) */\n    type?: 'email' | 'number' | 'password' | 'search' | 'tel' | 'text' | 'url';\n    /** The control's html attributes */\n    controlProps?: React.InputHTMLAttributes<HTMLInputElement>;\n    /** Help text rendered to the left of the input node */\n    label?: string;\n    /** User`s node rendered before label and input node */\n    startContent?: React.ReactNode;\n    /** User`s node rendered after input node, clear button and error icon */\n    endContent?: React.ReactNode;\n    /** An optional element displayed under the lower right corner of the control and sharing the place with the error container */\n    note?: React.ReactNode;\n};\nexport type TextInputPin = InputControlPin;\nexport type TextInputSize = InputControlSize;\nexport type TextInputView = InputControlView;\n\nexport const TextInput = React.forwardRef<HTMLSpanElement, TextInputProps>(\n    function TextInput(props, ref) {\n        const {\n            view = 'normal',\n            size = 'm',\n            pin = 'round-round',\n            name,\n            value,\n            defaultValue,\n            label,\n            disabled,\n            readOnly,\n            hasClear = false,\n            error,\n            errorMessage: errorMessageProp,\n            errorPlacement: errorPlacementProp = 'outside',\n            validationState: validationStateProp,\n            autoComplete,\n            id: idProp,\n            tabIndex,\n            style,\n            className,\n            qa,\n            controlProps: controlPropsProp,\n            startContent,\n            endContent,\n            note,\n            onUpdate,\n            onChange,\n        } = props;\n\n        const {errorMessage, errorPlacement, validationState} = errorPropsMapper({\n            error,\n            errorMessage: errorMessageProp,\n            errorPlacement: errorPlacementProp,\n            validationState: validationStateProp,\n        });\n\n        const [inputValue, setInputValue] = useControlledState(value, defaultValue ?? '', onUpdate);\n        const innerControlRef = React.useRef<HTMLTextAreaElement | HTMLInputElement>(null);\n        const fieldRef = useFormResetHandler({initialValue: inputValue, onReset: setInputValue});\n        const handleRef = useForkRef(props.controlRef, innerControlRef, fieldRef);\n        const labelRef = React.useRef<HTMLLabelElement>(null);\n        const startContentRef = React.useRef<HTMLDivElement>(null);\n        const state = getInputControlState(validationState);\n\n        const isLabelVisible = Boolean(label);\n        const isErrorMsgVisible =\n            validationState === 'invalid' && Boolean(errorMessage) && errorPlacement === 'outside';\n        const isErrorIconVisible =\n            validationState === 'invalid' && Boolean(errorMessage) && errorPlacement === 'inside';\n        const isClearControlVisible = Boolean(hasClear && !disabled && !readOnly && inputValue);\n        const isStartContentVisible = Boolean(startContent);\n        const isEndContentVisible = Boolean(endContent);\n        const isAutoCompleteOff =\n            isLabelVisible && !idProp && !name && typeof autoComplete === 'undefined';\n\n        const innerId = useUniqId();\n        const id = isLabelVisible ? idProp || innerId : idProp;\n\n        const labelSize = useElementSize(isLabelVisible ? labelRef : null, size);\n        const startContentSize = useElementSize(\n            isStartContentVisible ? startContentRef : null,\n            size,\n        );\n\n        const errorMessageId = useUniqId();\n        const noteId = useUniqId();\n        const ariaDescribedBy = [\n            controlPropsProp?.['aria-describedby'],\n            note ? noteId : undefined,\n            isErrorMsgVisible ? errorMessageId : undefined,\n        ]\n            .filter(Boolean)\n            .join(' ');\n\n        const controlProps: TextInputProps['controlProps'] = {\n            ...controlPropsProp,\n            style: {\n                ...controlPropsProp?.style,\n                ...(isLabelVisible && labelSize.width\n                    ? {paddingInlineStart: `${labelSize.width}px`}\n                    : {}),\n            },\n            'aria-invalid': validationState === 'invalid' || undefined,\n            'aria-describedby': ariaDescribedBy || undefined,\n        };\n        const commonProps = {\n            id,\n            tabIndex,\n            name,\n            onChange(event: React.ChangeEvent<HTMLInputElement>) {\n                setInputValue(event.target.value);\n\n                if (onChange) {\n                    onChange(event);\n                }\n            },\n            autoComplete: isAutoCompleteOff ? 'off' : prepareAutoComplete(autoComplete),\n            controlProps,\n        };\n\n        const handleClear = (event: React.MouseEvent<HTMLSpanElement>) => {\n            setInputValue('');\n\n            const control = innerControlRef.current;\n            if (control) {\n                const syntheticEvent = Object.create(event);\n                syntheticEvent.target = control;\n                syntheticEvent.currentTarget = control;\n\n                control.value = '';\n\n                if (onChange) {\n                    onChange(syntheticEvent);\n                }\n            }\n        };\n\n        const handleAdditionalContentClick: React.MouseEventHandler<HTMLDivElement> = (event) => {\n            const needActivateInput =\n                !event.currentTarget.contains(document.activeElement) &&\n                event.currentTarget.contains(event.target as HTMLElement);\n            const hasSelection = Boolean(document.getSelection()?.toString());\n\n            if (needActivateInput && !hasSelection) {\n                innerControlRef.current?.focus();\n            }\n        };\n\n        return (\n            <span\n                ref={ref}\n                style={style}\n                className={b(\n                    {\n                        view,\n                        size,\n                        disabled,\n                        state,\n                        pin: view === 'clear' ? undefined : pin,\n                        'has-clear': isClearControlVisible,\n                        'has-start-content': isStartContentVisible,\n                        'has-end-content': isEndContentVisible,\n                    },\n                    className,\n                )}\n                data-qa={qa}\n            >\n                <span className={b('content')}>\n                    {isStartContentVisible && (\n                        <AdditionalContent\n                            ref={startContentRef}\n                            placement=\"start\"\n                            onClick={handleAdditionalContentClick}\n                        >\n                            {startContent}\n                        </AdditionalContent>\n                    )}\n                    {isLabelVisible && (\n                        <label\n                            ref={labelRef}\n                            style={{\n                                insetInlineStart: isStartContentVisible\n                                    ? startContentSize.width\n                                    : undefined,\n                                maxWidth: `calc(50% - ${startContentSize.width}px)`,\n                            }}\n                            className={b('label')}\n                            title={label}\n                            htmlFor={id}\n                        >\n                            {`${label}`}\n                        </label>\n                    )}\n                    <TextInputControl {...props} {...commonProps} controlRef={handleRef} />\n                    {isClearControlVisible && (\n                        <ClearButton\n                            size={mapTextInputSizeToButtonSize(size)}\n                            onClick={handleClear}\n                            className={b('clear', {size})}\n                        />\n                    )}\n                    {isErrorIconVisible && (\n                        <Popover content={errorMessage}>\n                            <span data-qa={CONTROL_ERROR_ICON_QA}>\n                                <Icon\n                                    data={TriangleExclamation}\n                                    className={b('error-icon')}\n                                    size={size === 's' ? 12 : 16}\n                                />\n                            </span>\n                        </Popover>\n                    )}\n                    {isEndContentVisible && (\n                        <AdditionalContent placement=\"end\" onClick={handleAdditionalContentClick}>\n                            {endContent}\n                        </AdditionalContent>\n                    )}\n                </span>\n                <OuterAdditionalContent\n                    note={note}\n                    errorMessage={isErrorMsgVisible ? errorMessage : null}\n                    noteId={noteId}\n                    errorMessageId={errorMessageId}\n                />\n            </span>\n        );\n    },\n);\n"]}