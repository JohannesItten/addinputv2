{"version":3,"file":"TableColumnSetup.js","sourceRoot":"../../../../../../../src","sources":["components/Table/hoc/withTableSettings/TableColumnSetup/TableColumnSetup.tsx"],"names":[],"mappings":"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","sourcesContent":["'use client';\n\nimport * as React from 'react';\n\nimport {Gear, Grip, Lock} from '@gravity-ui/icons';\nimport {DragDropContext, Draggable, Droppable} from 'react-beautiful-dnd';\nimport type {\n    DraggableChildrenFn,\n    DraggableProvided,\n    DraggableStateSnapshot,\n    OnDragEndResponder,\n} from 'react-beautiful-dnd';\n\nimport {useUniqId} from '../../../../../hooks';\nimport {createOnKeyDownHandler} from '../../../../../hooks/useActionHandlers/useActionHandlers';\nimport {Button} from '../../../../Button';\nimport {Icon} from '../../../../Icon';\nimport type {PopupPlacement} from '../../../../Popup';\nimport {Text} from '../../../../Text';\nimport {TreeSelect} from '../../../../TreeSelect/TreeSelect';\nimport type {\n    TreeSelectProps,\n    TreeSelectRenderContainer,\n    TreeSelectRenderItem,\n} from '../../../../TreeSelect/types';\nimport {TextInput} from '../../../../controls/TextInput';\nimport {Flex} from '../../../../layout/Flex/Flex';\nimport type {ListItemViewContentType, ListItemViewProps} from '../../../../useList';\nimport {ListContainerView, ListItemView, useListFilter} from '../../../../useList';\nimport {block} from '../../../../utils/cn';\nimport type {TableColumnConfig} from '../../../Table';\nimport type {TableSetting} from '../withTableSettings';\n\nimport i18n from './i18n';\n\nimport './TableColumnSetup.scss';\n\nconst b = block('inner-table-column-setup');\nconst controlsCn = b('controls');\nconst filterInputCn = b('filter-input');\nconst emptyPlaceholderCn = b('empty-placeholder');\n\nconst reorderArray = <T extends unknown>(list: T[], startIndex: number, endIndex: number): T[] => {\n    const result = [...list];\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n\n    return result;\n};\n\nconst prepareStickyState = (\n    itemsById: Record<string, TableColumnSetupItem>,\n    visibleFlattenIds: string[],\n) => {\n    let lastStickyStartIdx = 0;\n    for (; lastStickyStartIdx !== visibleFlattenIds.length; lastStickyStartIdx++) {\n        const visibleFlattenId = visibleFlattenIds[lastStickyStartIdx];\n        const item = itemsById[visibleFlattenId];\n\n        if (item?.sticky !== 'left' && item?.sticky !== 'start') {\n            break;\n        }\n    }\n\n    let firstStickyEndIdx = visibleFlattenIds.length;\n    for (; firstStickyEndIdx !== 0; firstStickyEndIdx--) {\n        const visibleFlattenId = visibleFlattenIds[firstStickyEndIdx - 1];\n        const item = itemsById[visibleFlattenId];\n\n        if (item?.sticky !== 'right' && item?.sticky !== 'end') {\n            break;\n        }\n    }\n\n    return {\n        stickyStartItemIdList: visibleFlattenIds.slice(0, lastStickyStartIdx),\n        sortableItemIdList: visibleFlattenIds.slice(lastStickyStartIdx, firstStickyEndIdx),\n        stickyEndItemIdList: visibleFlattenIds.slice(firstStickyEndIdx),\n    };\n};\n\nconst prepareValue = (tableColumnItems: TableColumnSetupItem[]) => {\n    const selectedIds: string[] = [];\n\n    tableColumnItems.forEach(({id, isSelected}) => {\n        if (isSelected) {\n            selectedIds.push(id);\n        }\n    });\n\n    return selectedIds;\n};\n\ninterface RenderContainerProps {\n    isDragDisabled?: boolean;\n    provided?: DraggableProvided;\n    snapshot?: DraggableStateSnapshot;\n}\n\nconst RENDER_DRAG_DISABLED_CONTAINER_PROPS: RenderContainerProps = {isDragDisabled: true};\n\ninterface SwitcherProps {\n    onKeyDown: React.KeyboardEventHandler<HTMLElement>;\n    onClick: React.MouseEventHandler<HTMLElement>;\n}\n\ninterface UseDndRenderContainerParams {\n    onDragEnd: OnDragEndResponder;\n    renderControls: () => React.ReactNode;\n}\nconst useDndRenderContainer = ({onDragEnd, renderControls}: UseDndRenderContainerParams) => {\n    const uniqId = useUniqId();\n\n    const dndRenderContainer: TreeSelectRenderContainer<TableColumnSetupItem> = ({\n        renderItem,\n        list,\n        containerRef,\n        id,\n        className,\n    }) => {\n        const renderDndActiveItem: DraggableChildrenFn = (provided, snapshot, rubric) => {\n            const renderContainerProps: RenderContainerProps = {\n                provided,\n                snapshot,\n            };\n\n            return renderItem(\n                list.structure.visibleFlattenIds[rubric.source.index],\n                rubric.source.index,\n                renderContainerProps,\n            );\n        };\n\n        const {stickyStartItemIdList, sortableItemIdList, stickyEndItemIdList} = prepareStickyState(\n            list.structure.itemsById,\n            list.structure.visibleFlattenIds,\n        );\n\n        const stickyStartItemList = stickyStartItemIdList.map((visibleFlattenId, idx) => {\n            return renderItem(visibleFlattenId, idx, RENDER_DRAG_DISABLED_CONTAINER_PROPS);\n        });\n\n        const sortableItemList = sortableItemIdList.map((visibleFlattenId, idx) => {\n            return renderItem(visibleFlattenId, idx + stickyStartItemIdList.length);\n        });\n\n        const stickyEndItemList = stickyEndItemIdList.map((visibleFlattenId, idx) => {\n            return renderItem(\n                visibleFlattenId,\n                stickyStartItemList.length + sortableItemList.length + idx,\n                RENDER_DRAG_DISABLED_CONTAINER_PROPS,\n            );\n        });\n\n        return (\n            <React.Fragment>\n                <ListContainerView ref={containerRef} id={id} className={className}>\n                    {stickyStartItemList}\n                    <DragDropContext onDragEnd={onDragEnd}>\n                        <Droppable droppableId={uniqId} renderClone={renderDndActiveItem}>\n                            {(droppableProvided) => {\n                                return (\n                                    <div\n                                        {...droppableProvided.droppableProps}\n                                        ref={droppableProvided.innerRef}\n                                    >\n                                        {sortableItemList}\n                                        {droppableProvided.placeholder}\n                                    </div>\n                                );\n                            }}\n                        </Droppable>\n                    </DragDropContext>\n                    {stickyEndItemList}\n                </ListContainerView>\n                <div className={controlsCn}>{renderControls()}</div>\n            </React.Fragment>\n        );\n    };\n\n    return dndRenderContainer;\n};\n\nconst useDndRenderItem = (sortable: boolean | undefined) => {\n    const renderDndItem: TreeSelectRenderItem<TableColumnSetupItem, RenderContainerProps> = ({\n        data: item,\n        props,\n        index,\n        renderContainerProps,\n    }) => {\n        const isDragDisabled = sortable === false || renderContainerProps?.isDragDisabled === true;\n        const endSlot = isDragDisabled ? undefined : <Icon data={Grip} size={16} />;\n        const startSlot = item.isRequired ? <Icon data={Lock} /> : undefined;\n        const selected = item.isRequired ? false : props.selected;\n\n        const commonProps: ListItemViewProps = {\n            ...props,\n            selected,\n            selectionViewType: item.isRequired ? 'single' : 'multiple',\n            content: {\n                ...props.content,\n                startSlot,\n                endSlot,\n            },\n        };\n\n        if (isDragDisabled) {\n            return <ListItemView {...commonProps} key={commonProps.id} />;\n        }\n\n        const renderItem = (provided: DraggableProvided, snapshot: DraggableStateSnapshot) => (\n            <ListItemView\n                {...commonProps}\n                {...provided.draggableProps}\n                {...provided.dragHandleProps}\n                ref={provided.innerRef}\n                dragging={snapshot.isDragging}\n            />\n        );\n\n        if (renderContainerProps?.provided && renderContainerProps.snapshot) {\n            return renderItem(renderContainerProps.provided, renderContainerProps.snapshot);\n        }\n\n        return (\n            <Draggable\n                draggableId={props.id}\n                index={index}\n                key={`item-key-${props.id}`}\n                isDragDisabled={isDragDisabled}\n            >\n                {renderItem}\n            </Draggable>\n        );\n    };\n\n    return renderDndItem;\n};\n\nexport type TableColumnSetupItem = TableSetting & {\n    title: React.ReactNode;\n    isRequired?: boolean;\n    sticky?: TableColumnConfig<unknown>['sticky'];\n};\n\nconst mapItemDataToContentProps = (item: TableColumnSetupItem): ListItemViewContentType => {\n    return {\n        title: item.title,\n    };\n};\n\nconst defaultFilterSettingsFn = (value: string, item: TableColumnSetupItem) => {\n    return typeof item.title === 'string'\n        ? item.title.toLowerCase().includes(value.trim().toLowerCase())\n        : true;\n};\n\nconst useEmptyRenderContainer = (placeholder?: string): TreeSelectRenderContainer<{}> => {\n    const emptyRenderContainer = () => <Text className={emptyPlaceholderCn}>{placeholder}</Text>;\n    return emptyRenderContainer;\n};\n\nexport type RenderControls = (params: {\n    DefaultApplyButton: React.ComponentType;\n    /**\n     * Is used to apply new settings and close the popup\n     */\n    onApply: () => void;\n}) => React.ReactNode;\n\nexport interface TableColumnSetupProps {\n    renderSwitcher?: (props: SwitcherProps) => React.JSX.Element;\n\n    items: TableColumnSetupItem[];\n    sortable?: boolean;\n\n    onUpdate: (newSettings: TableSetting[]) => void;\n    popupWidth?: TreeSelectProps<unknown>['popupWidth'];\n    popupPlacement?: PopupPlacement;\n\n    /**\n     * @deprecated\n     */\n    renderControls?: RenderControls;\n\n    className?: string;\n\n    defaultItems?: TableColumnSetupItem[];\n    showResetButton?: boolean | ((currentItems: TableColumnSetupItem[]) => boolean);\n\n    filterable?: boolean;\n    filterPlaceholder?: string;\n    filterEmptyMessage?: string;\n    filterSettings?: (value: string, item: TableColumnSetupItem) => boolean;\n}\n\nexport const TableColumnSetup = (props: TableColumnSetupProps) => {\n    const {\n        renderSwitcher,\n        popupWidth,\n        popupPlacement,\n        items: propsItems,\n        onUpdate: propsOnUpdate,\n        sortable,\n        renderControls,\n        className,\n        defaultItems = propsItems,\n        showResetButton: propsShowResetButton,\n        filterable,\n        filterPlaceholder,\n        filterEmptyMessage,\n        filterSettings = defaultFilterSettingsFn,\n    } = props;\n\n    const [open, setOpen] = React.useState(false);\n    const [sortingEnabled, setSortingEnabled] = React.useState(sortable);\n    const [prevSortingEnabled, setPrevSortingEnabled] = React.useState(sortable);\n    if (sortable !== prevSortingEnabled) {\n        setPrevSortingEnabled(sortable);\n        setSortingEnabled(sortable);\n    }\n\n    const [items, setItems] = React.useState(propsItems);\n    const [prevPropsItems, setPrevPropsItems] = React.useState(propsItems);\n    if (propsItems !== prevPropsItems) {\n        setPrevPropsItems(propsItems);\n\n        setItems(propsItems);\n    }\n\n    const filterState = useListFilter({items, filterItem: filterSettings, debounceTimeout: 0});\n\n    const onApply = () => {\n        const newSettings = items.map<TableSetting>(({id, isSelected}) => ({id, isSelected}));\n        propsOnUpdate(newSettings);\n        onOpenChange(false);\n    };\n\n    const DefaultApplyButton = () => (\n        <Button view=\"action\" width=\"max\" onClick={onApply}>\n            {i18n('button_apply')}\n        </Button>\n    );\n\n    const onDragEnd: OnDragEndResponder = ({destination, source}) => {\n        if (destination?.index !== undefined && destination?.index !== source.index) {\n            setItems((prevItems) => {\n                return reorderArray(prevItems, source.index, destination.index);\n            });\n        }\n    };\n\n    const showResetButton =\n        typeof propsShowResetButton === 'function'\n            ? propsShowResetButton(items)\n            : propsShowResetButton;\n\n    const dndRenderContainer = useDndRenderContainer({\n        onDragEnd,\n        renderControls: () =>\n            renderControls ? (\n                renderControls({DefaultApplyButton, onApply})\n            ) : (\n                <Flex gapRow={1} direction=\"column\" className={controlsCn}>\n                    {showResetButton && (\n                        <Button\n                            onClick={() => {\n                                setItems(defaultItems);\n                            }}\n                            width=\"max\"\n                        >\n                            {i18n('button_reset')}\n                        </Button>\n                    )}\n                    <DefaultApplyButton />\n                </Flex>\n            ),\n    });\n\n    const dndRenderItem = useDndRenderItem(sortingEnabled);\n\n    const renderControl: TreeSelectProps<unknown>['renderControl'] = ({toggleOpen}) => {\n        const onKeyDown = createOnKeyDownHandler(toggleOpen);\n\n        return (\n            renderSwitcher?.({onClick: toggleOpen, onKeyDown}) || (\n                <Button onClick={toggleOpen} onKeyDown={onKeyDown}>\n                    <Icon data={Gear} />\n                    {i18n('button_switcher')}\n                </Button>\n            )\n        );\n    };\n\n    const onOpenChange = (open: boolean) => {\n        setOpen(open);\n        if (open === false) {\n            setItems(propsItems);\n            setSortingEnabled(sortable);\n            filterState.reset();\n        }\n    };\n\n    const onUpdate = (selectedItemsIds: string[]) => {\n        setItems((prevItems) => {\n            return prevItems.map((item) => ({\n                ...item,\n                isSelected: item.isRequired || selectedItemsIds.includes(item.id),\n            }));\n        });\n    };\n\n    const value = React.useMemo(() => prepareValue(items), [items]);\n\n    const emptyRenderContainer = useEmptyRenderContainer(filterEmptyMessage);\n\n    const onFilterValueUpdate = (value: string) => {\n        filterState.onFilterUpdate(value);\n        setSortingEnabled(!value.length);\n    };\n\n    const slotBeforeListBody = filterable ? (\n        <TextInput\n            size=\"m\"\n            view=\"clear\"\n            placeholder={filterPlaceholder}\n            value={filterState.filter}\n            className={filterInputCn}\n            onUpdate={onFilterValueUpdate}\n            hasClear\n        />\n    ) : null;\n\n    const renderContainer =\n        filterState.filter && !filterState.items.length ? emptyRenderContainer : dndRenderContainer;\n\n    return (\n        <TreeSelect\n            className={b(null, className)}\n            mapItemDataToContentProps={mapItemDataToContentProps}\n            multiple\n            size=\"l\"\n            open={open}\n            value={value}\n            items={filterState.filter ? filterState.items : items}\n            onUpdate={onUpdate}\n            popupWidth={popupWidth}\n            onOpenChange={onOpenChange}\n            placement={popupPlacement}\n            slotBeforeListBody={slotBeforeListBody}\n            renderContainer={renderContainer}\n            renderControl={renderControl}\n            renderItem={dndRenderItem}\n        />\n    );\n};\n"]}