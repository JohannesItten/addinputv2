{"version":3,"file":"types.js","sourceRoot":"../../../../src","sources":["components/Toaster/types.ts"],"names":[],"mappings":"","sourcesContent":["import type {ButtonView} from '../Button';\n\nimport type {TOAST_THEMES} from './constants';\n\nexport type ToasterArgs = {\n    className?: string;\n    mobile?: boolean;\n};\n\nexport type ToastTheme = (typeof TOAST_THEMES)[number];\n\nexport type ToastAction = {\n    onClick: VoidFunction;\n    label: string;\n    view?: ButtonView;\n    removeAfterClick?: boolean;\n};\n\nexport type ToastProps = {\n    name: string;\n    title?: string;\n    className?: string;\n    autoHiding?: number | false;\n    content?: React.ReactNode;\n    theme?: ToastTheme;\n    isClosable?: boolean;\n    actions?: ToastAction[];\n\n    onClose?: () => void;\n\n    /** Function. Use for toast icon customization. By default type-based behavior is used */\n    renderIcon?: (toastProps: ToastProps) => React.ReactNode;\n};\n\nexport type InternalToastProps = ToastProps & {\n    addedAt?: number;\n    ref?: React.RefObject<HTMLDivElement>;\n};\n\nexport interface ToasterContextMethods {\n    add(toast: ToastProps): void;\n    remove(toastName: ToastProps['name']): void;\n    removeAll(): void;\n    update(toastName: ToastProps['name'], override: Partial<ToastProps>): void;\n    has(toastName: ToastProps['name']): boolean;\n}\n\nexport interface ToasterPublicMethods extends ToasterContextMethods {}\n"]}