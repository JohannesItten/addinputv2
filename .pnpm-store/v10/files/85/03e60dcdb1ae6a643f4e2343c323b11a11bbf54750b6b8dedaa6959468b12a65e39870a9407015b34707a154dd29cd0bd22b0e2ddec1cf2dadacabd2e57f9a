{"version":3,"file":"Disclosure.js","sourceRoot":"../../../../src","sources":["components/Disclosure/Disclosure.tsx"],"names":[],"mappings":"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","sourcesContent":["'use client';\n\nimport * as React from 'react';\n\nimport type {QAProps} from '../types';\nimport {isOfType} from '../utils/isOfType';\n\nimport {DisclosureProvider} from './DisclosureContext';\nimport {DisclosureDetails} from './DisclosureDetails/DisclosureDetails';\nimport {DefaultDisclosureSummary, DisclosureSummary} from './DisclosureSummary/DisclosureSummary';\nimport {b} from './constants';\n\nimport './Disclosure.scss';\n\nexport type DisclosureSize = 'm' | 'l' | 'xl';\nexport type DisclosureArrowPosition = 'left' | 'right' | 'start' | 'end';\n\nexport interface DisclosureComposition {\n    Summary: typeof DisclosureSummary;\n}\n\nexport interface DisclosureProps extends QAProps {\n    /** Disclosure size */\n    size?: DisclosureSize;\n    /** Disabled state */\n    disabled?: boolean;\n    /** Default opening state */\n    defaultExpanded?: boolean;\n    /** Controlled opening state */\n    expanded?: boolean;\n    /** Control position */\n    arrowPosition?: DisclosureArrowPosition;\n    /** Content summary */\n    summary?: React.ReactNode;\n    /** Class name */\n    className?: string;\n    /** Content */\n    children?: React.ReactNode;\n    /** Keep content in DOM */\n    keepMounted?: boolean;\n    /** Callback fired when the expand/collapse state is changed  */\n    onUpdate?: (expanded: boolean) => void;\n}\n\nconst isDisclosureSummaryComponent = isOfType(DisclosureSummary);\n\n// @ts-expect-error this ts-error is appears when forwarding ref. It complains that DisclosureComposition props is not provided initially\nexport const Disclosure: React.FunctionComponent<DisclosureProps> & DisclosureComposition =\n    React.forwardRef<HTMLDivElement, DisclosureProps>(function Disclosure(props, ref) {\n        const {\n            size = 'm',\n            disabled = false,\n            defaultExpanded = false,\n            arrowPosition = 'start',\n            summary = '',\n            className,\n            keepMounted = true,\n            children,\n            onUpdate = () => {},\n            expanded,\n            qa,\n        } = props;\n\n        const [summaryContent, detailsContent] = prepareChildren(children, {\n            disclosureQa: qa,\n        });\n\n        return (\n            <DisclosureProvider\n                disabled={disabled}\n                defaultExpanded={defaultExpanded}\n                expanded={expanded}\n                keepMounted={keepMounted}\n                size={size}\n                summary={summary}\n                arrowPosition={arrowPosition}\n                onUpdate={onUpdate}\n            >\n                <section ref={ref} className={b({size}, className)} data-qa={qa}>\n                    {summaryContent}\n                    {detailsContent}\n                </section>\n            </DisclosureProvider>\n        );\n    });\n\ninterface PrepareParams {\n    disclosureQa?: string;\n}\n\nfunction prepareChildren(children: React.ReactNode, {disclosureQa}: PrepareParams) {\n    const items = React.Children.toArray(children);\n\n    let summary, details;\n\n    const content = [];\n\n    for (const item of items) {\n        const isDisclosureSummary = isDisclosureSummaryComponent(item);\n        if (isDisclosureSummary) {\n            if (summary) {\n                throw new Error('Only one <Disclosure.Summary> component is allowed');\n            }\n            summary = item;\n            continue;\n        }\n        content.push(item);\n    }\n    if (content.length > 0) {\n        details = (\n            <DisclosureDetails qa={disclosureQa && `${disclosureQa}-details`}>\n                {content}\n            </DisclosureDetails>\n        );\n    }\n    if (!summary) {\n        summary = (\n            <DisclosureSummary qa={disclosureQa && `${disclosureQa}-summary`}>\n                {(props) => <DefaultDisclosureSummary {...props} />}\n            </DisclosureSummary>\n        );\n    }\n\n    return [summary, details];\n}\n\nDisclosure.Summary = DisclosureSummary;\nDisclosure.displayName = 'Disclosure';\n"]}