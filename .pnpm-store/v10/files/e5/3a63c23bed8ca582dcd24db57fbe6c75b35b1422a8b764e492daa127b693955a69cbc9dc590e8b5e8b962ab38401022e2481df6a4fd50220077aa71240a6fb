{"version":3,"file":"withThemeValue.js","sourceRoot":"../../../../src","sources":["components/theme/withThemeValue.tsx"],"names":[],"mappings":";AAEA,OAAO,EAAC,gBAAgB,EAAC,qCAAkC;AAG3D,OAAO,EAAC,aAAa,EAAC,2BAAwB;AAI9C,MAAM,UAAU,cAAc,CAC1B,gBAAwC;IAExC,MAAM,aAAa,GAAG,gBAAgB,CAAC,gBAAgB,CAAC,CAAC;IAEzD,MAAM,SAAS,GAAG,SAAS,uBAAuB,CAAC,KAAyC;QACxF,MAAM,UAAU,GAAG,aAAa,EAAE,CAAC;QACnC,OAAO,KAAC,gBAAgB,OAAM,KAAW,EAAE,UAAU,EAAE,UAAU,GAAI,CAAC;IAC1E,CAAC,CAAC;IAEF,SAAS,CAAC,WAAW,GAAG,kBAAkB,aAAa,GAAG,CAAC;IAE3D,OAAO,SAAS,CAAC;AACrB,CAAC","sourcesContent":["import type * as React from 'react';\n\nimport {getComponentName} from '../utils/getComponentName';\n\nimport type {ThemeContextProps} from './types';\nimport {useThemeValue} from './useThemeValue';\n\nexport interface WithThemeValueProps extends Pick<ThemeContextProps, 'themeValue'> {}\n\nexport function withThemeValue<T extends WithThemeValueProps>(\n    WrappedComponent: React.ComponentType<T>,\n): React.ComponentType<Omit<T, keyof WithThemeValueProps>> {\n    const componentName = getComponentName(WrappedComponent);\n\n    const component = function WithThemeValueComponent(props: Omit<T, keyof WithThemeValueProps>) {\n        const themeValue = useThemeValue();\n        return <WrappedComponent {...(props as T)} themeValue={themeValue} />;\n    };\n\n    component.displayName = `withThemeValue(${componentName})`;\n\n    return component;\n}\n"]}