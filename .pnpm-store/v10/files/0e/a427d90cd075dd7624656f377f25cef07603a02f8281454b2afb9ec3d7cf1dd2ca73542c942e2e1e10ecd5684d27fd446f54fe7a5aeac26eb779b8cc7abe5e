{"version":3,"file":"utils.js","sourceRoot":"../../../../src","sources":["components/Popup/utils.ts"],"names":[],"mappings":";;;AAMA,4CAWC;AAMD,kDA2CC;AAlED,8CAAuD;AAGvD,8CAA0E;AAG1E,SAAgB,gBAAgB,CAAC,UAAuB,EAAE,QAA6B;IACnF,IAAI,MAAM,GAAG,UAAU,CAAC;IACxB,IAAI,QAAQ,EAAE,CAAC;QACX,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE,CAAC;YAC7B,MAAM,IAAI,sBAAU,CAAC;QACzB,CAAC;aAAM,CAAC;YACJ,MAAM,GAAG,EAAC,GAAG,MAAM,EAAE,QAAQ,EAAE,CAAC,MAAM,CAAC,QAAQ,IAAI,CAAC,CAAC,GAAG,sBAAU,EAAC,CAAC;QACxE,CAAC;IACL,CAAC;IAED,OAAO,EAAC,MAAM,EAAC,CAAC;AACpB,CAAC;AAED,SAAS,eAAe,CAAC,SAAkB;IACvC,OAAO,OAAO,CAAC,SAAS,IAAI,2BAAe,CAAC,QAAQ,CAAC,SAA0B,CAAC,CAAC,CAAC;AACtF,CAAC;AAED,SAAgB,mBAAmB,CAAC,aAA8B,EAAE,aAAuB;IACvF,IAAI,SAAgC,CAAC;IACrC,IAAI,UAAsB,CAAC;IAE3B,IAAI,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE,CAAC;QAC/B,SAAS,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;QAC7B,UAAU,GAAG,IAAA,YAAI,EAAC;YACd,OAAO,EAAE,4BAAgB;YACzB,WAAW,EAAE,aAAa;YAC1B,kBAAkB,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;SAC7C,CAAC,CAAC;IACP,CAAC;SAAM,IAAI,eAAe,CAAC,aAAa,CAAC,EAAE,CAAC;QACxC,IAAI,SAAgC,CAAC;QACrC,IAAI,aAAa,KAAK,YAAY,EAAE,CAAC;YACjC,SAAS,GAAG,OAAO,CAAC;QACxB,CAAC;aAAM,IAAI,aAAa,KAAK,UAAU,EAAE,CAAC;YACtC,SAAS,GAAG,KAAK,CAAC;QACtB,CAAC;QAED,SAAS,GAAG,SAAS,CAAC;QACtB,UAAU,GAAG,IAAA,qBAAa,EAAC;YACvB,OAAO,EAAE,4BAAgB;YACzB,WAAW,EAAE,aAAa;YAC1B,SAAS;SACZ,CAAC,CAAC;IACP,CAAC;SAAM,CAAC;QACJ,IAAI,yBAAyB,CAAC;QAE9B,IAAI,aAAa,EAAE,UAAU,CAAC,KAAK,CAAC,IAAI,aAAa,EAAE,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC;YACxE,yBAAyB,GAAG,OAAgB,CAAC;QACjD,CAAC;aAAM,CAAC;YACJ,yBAAyB,GAAG,KAAc,CAAC;QAC/C,CAAC;QAED,SAAS,GAAG,aAAa,CAAC;QAC1B,UAAU,GAAG,IAAA,YAAI,EAAC;YACd,OAAO,EAAE,4BAAgB;YACzB,WAAW,EAAE,aAAa;YAC1B,yBAAyB;SAC5B,CAAC,CAAC;IACP,CAAC;IAED,OAAO,EAAC,SAAS,EAAE,UAAU,EAAC,CAAC;AACnC,CAAC;AAEM,MAAM,qBAAqB,GAAG,GAAe,EAAE,CAAC,CAAC;IACpD,IAAI,EAAE,aAAa;IACnB,EAAE,CAAC,EAAC,cAAc,EAAC;QACf,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;YACxB,OAAO,EAAE,CAAC;QACd,CAAC;QAED,OAAO;YACH,IAAI,EAAE;gBACF,IAAI,EAAE,cAAc,CAAC,KAAK,CAAC,CAAC;gBAC5B,GAAG,EAAE,cAAc,CAAC,KAAK,CAAC,CAAC;aAC9B;SACJ,CAAC;IACN,CAAC;CACJ,CAAC,CAAC;AAdU,QAAA,qBAAqB,yBAc/B","sourcesContent":["import {autoPlacement, flip} from '@floating-ui/react';\nimport type {Alignment, Middleware, Placement} from '@floating-ui/react';\n\nimport {ARROW_SIZE, AUTO_PLACEMENTS, OVERFLOW_PADDING} from './constants';\nimport type {AutoPlacement, PopupOffset, PopupPlacement} from './types';\n\nexport function getOffsetOptions(offsetProp: PopupOffset, hasArrow: boolean | undefined) {\n    let offset = offsetProp;\n    if (hasArrow) {\n        if (typeof offset === 'number') {\n            offset += ARROW_SIZE;\n        } else {\n            offset = {...offset, mainAxis: (offset.mainAxis ?? 0) + ARROW_SIZE};\n        }\n    }\n\n    return {offset};\n}\n\nfunction isAutoPlacement(placement?: string): placement is AutoPlacement {\n    return Boolean(placement && AUTO_PLACEMENTS.includes(placement as AutoPlacement));\n}\n\nexport function getPlacementOptions(placementProp?: PopupPlacement, disablePortal?: boolean) {\n    let placement: Placement | undefined;\n    let middleware: Middleware;\n\n    if (Array.isArray(placementProp)) {\n        placement = placementProp[0];\n        middleware = flip({\n            padding: OVERFLOW_PADDING,\n            altBoundary: disablePortal,\n            fallbackPlacements: placementProp.slice(1),\n        });\n    } else if (isAutoPlacement(placementProp)) {\n        let alignment: Alignment | undefined;\n        if (placementProp === 'auto-start') {\n            alignment = 'start';\n        } else if (placementProp === 'auto-end') {\n            alignment = 'end';\n        }\n\n        placement = undefined;\n        middleware = autoPlacement({\n            padding: OVERFLOW_PADDING,\n            altBoundary: disablePortal,\n            alignment,\n        });\n    } else {\n        let fallbackAxisSideDirection;\n\n        if (placementProp?.startsWith('top') || placementProp?.startsWith('left')) {\n            fallbackAxisSideDirection = 'start' as const;\n        } else {\n            fallbackAxisSideDirection = 'end' as const;\n        }\n\n        placement = placementProp;\n        middleware = flip({\n            padding: OVERFLOW_PADDING,\n            altBoundary: disablePortal,\n            fallbackAxisSideDirection,\n        });\n    }\n\n    return {placement, middleware};\n}\n\nexport const arrowStylesMiddleware = (): Middleware => ({\n    name: 'arrowStyles',\n    fn({middlewareData}) {\n        if (!middlewareData.arrow) {\n            return {};\n        }\n\n        return {\n            data: {\n                left: middlewareData.arrow.x,\n                top: middlewareData.arrow.y,\n            },\n        };\n    },\n});\n"]}