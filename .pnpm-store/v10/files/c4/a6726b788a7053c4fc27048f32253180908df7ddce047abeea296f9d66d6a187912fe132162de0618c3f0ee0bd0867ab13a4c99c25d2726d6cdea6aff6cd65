{"version":3,"file":"types.js","sourceRoot":"../../../../src","sources":["components/useList/types.ts"],"names":[],"mappings":"","sourcesContent":["export type ListItemId = string;\n\nexport type ListItemSize = 's' | 'm' | 'l' | 'xl';\ninterface ListItemInitialProps {\n    /**\n     * If you need to control the state from the outside,\n     * you can set a unique id for each element\n     */\n    id?: string;\n    /**\n     * Initial disabled item state\n     */\n    disabled?: boolean;\n    /**\n     * Initial selected item state\n     */\n    selected?: boolean;\n    /**\n     * Default expanded state if group\n     */\n    expanded?: boolean;\n}\n\nexport type ListFlattenItemType<T> = T extends {} ? T & ListItemInitialProps : T;\n\nexport interface ListTreeItemType<T> extends ListItemInitialProps {\n    data: T;\n    children?: ListTreeItemType<T>[];\n}\n\nexport type ListItemType<T> = ListTreeItemType<T> | ListFlattenItemType<T>;\n\nexport type GroupParsedState = {\n    childrenIds: ListItemId[];\n};\n\nexport type ItemState = {\n    parentId?: ListItemId;\n    indentation: number;\n};\n\nexport interface ListItemExpandIconRenderProps {\n    /**\n     * The behavior of the component:\n     *\n     * - action - to indicate user actions. For example, for an icon inside a button;\n     * - state - to indicate the current state of the element;\n     */\n    behavior: 'state' | 'state-inverse' | 'action';\n    expanded?: boolean;\n    disabled?: boolean;\n}\n\nexport type ListItemViewContentType = {\n    title: React.ReactNode;\n    subtitle?: React.ReactNode;\n    startSlot?: React.ReactNode;\n    endSlot?: React.ReactNode;\n    /**\n     * Build in indentation component to render nested views structure\n     */\n    indentation?: number;\n    isGroup?: boolean;\n    /**\n     * Required prop if `isGroup` - `true`\n     */\n    expanded?: boolean;\n    /**\n     * @default - 'start'\n     */\n    expandIconPlacement?: 'start' | 'end';\n    /**\n     * Will be applied if `isGroup` props is `true`\n     */\n    renderExpandIcon?(props: ListItemExpandIconRenderProps): React.ReactNode;\n};\n\nexport type ListItemListContextProps = ItemState &\n    Partial<GroupParsedState> & {\n        isLastItem: boolean;\n    };\n\nexport type ParsedState<T> = {\n    /**\n     * Stored internal meta info about item\n     * Note: Groups are also items\n     */\n    itemsState: Record<ListItemId, ItemState>;\n    /**\n     * Normalized original data\n     */\n    itemsById: Record<ListItemId, T>;\n    /**\n     * Stored info about group items:\n     */\n    groupsState: Record<ListItemId, GroupParsedState>;\n};\n\ntype SetStateAction<S> = S | ((prevState: S) => S);\n\nexport type ListStateHandler<S> = (arg: SetStateAction<S>) => void;\n\nexport type ListState = {\n    disabledById: Record<ListItemId, boolean>;\n    selectedById: Record<ListItemId, boolean>;\n    expandedById?: Record<ListItemId, boolean>;\n    setExpanded?: ListStateHandler<Record<ListItemId, boolean>>;\n    setSelected: ListStateHandler<Record<ListItemId, boolean>>;\n    setDisabled: ListStateHandler<Record<ListItemId, boolean>>;\n    setActiveItemId: ListStateHandler<ListItemId | undefined>;\n    activeItemId?: ListItemId;\n};\n\nexport type InitialListParsedState = Pick<\n    ListState,\n    'disabledById' | 'expandedById' | 'selectedById' | 'activeItemId'\n>;\n\nexport type ItemSchema = {\n    id: ListItemId;\n    index: number;\n    children?: ItemSchema[];\n};\n\nexport type ParsedFlattenState = {\n    /**\n     * Original list ordered ids without flatten elements.\n     * Use it to get internal item id\n     */\n    rootIds: ListItemId[];\n    visibleFlattenIds: ListItemId[];\n    idToFlattenIndex: Record<ListItemId, number>;\n};\n\ntype ListStructure<T> = ParsedState<T> &\n    ParsedFlattenState & {\n        items: ListItemType<T>[];\n    };\n\nexport type UseListResult<T> = {\n    state: ListState;\n    structure: ListStructure<T>;\n};\n\nexport type ListOnItemClick<El = Element, Ev = Event> = (\n    payload: {id: ListItemId},\n    e?: React.SyntheticEvent<El, Ev>,\n) => void;\n"]}