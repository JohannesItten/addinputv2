{"version":3,"file":"withEventBrokerDomHandlers.js","sourceRoot":"../../../../src","sources":["components/utils/withEventBrokerDomHandlers.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;AAUb,gEAgCC;;;AAxCD,qDAA+B;AAG/B,0DAA2C;AAC3C,4DAAoD;AAIpD,SAAgB,0BAA0B,CAGtC,SAAwD,EACxD,UAAkC,EAClC,eAAiD;IAEjD,MAAM,aAAa,GAAG,IAAA,mCAAgB,EAAC,SAAS,CAAC,CAAC;IAClD,MAAM,WAAW,GAAG,mBAAmB,aAAa,GAAG,CAAC;IAExD,MAAM,eAAe,GAAG,KAAK,CAAC,UAAU,CACpC,CAAC,KAA+B,EAAE,GAAG,EAAE,EAAE;QACrC,MAAM,iBAAiB,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,SAAS,EAAE,EAAE;YAChE,MAAM,eAAe,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC;YACzC,OAAO;gBACH,GAAG,QAAQ;gBACX,CAAC,SAAS,CAAC,EAAE,CAAC,KAA2B,EAAE,EAAE;oBACzC,0BAAW,CAAC,OAAO,CAAC;wBAChB,OAAO,EAAE,SAAS,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,WAAW,EAAE;wBACnD,QAAQ,EAAE,KAAK;wBACf,GAAG,eAAe;qBACrB,CAAC,CAAC;oBACH,OAAO,eAAe,IAAI,eAAe,CAAC,KAAK,CAAC,CAAC;gBACrD,CAAC;aACJ,CAAC;QACN,CAAC,EAAE,EAAE,CAAC,CAAC;QACP,OAAO,uBAAC,SAAS,OAAK,KAAK,KAAM,iBAAiB,EAAE,GAAG,EAAE,GAAG,GAAI,CAAC;IACrE,CAAC,CACJ,CAAC;IACF,eAAe,CAAC,WAAW,GAAG,WAAW,CAAC;IAE1C,OAAO,eAAe,CAAC;AAC3B,CAAC","sourcesContent":["'use client';\n\nimport * as React from 'react';\n\nimport type {EventBrokerData} from './event-broker';\nimport {eventBroker} from './event-broker';\nimport {getComponentName} from './getComponentName';\n\ntype SupportedEvents = 'onClick' | 'onClickCapture';\n\nexport function withEventBrokerDomHandlers<\n    T extends Partial<{[k in SupportedEvents]: React.EventHandler<React.SyntheticEvent>}>,\n>(\n    Component: React.ComponentType<React.PropsWithoutRef<T>>,\n    eventTypes: Array<SupportedEvents>,\n    eventBrokerData: Omit<EventBrokerData, 'eventId'>,\n) {\n    const componentName = getComponentName(Component);\n    const displayName = `withEventBroker(${componentName})`;\n\n    const LoggedComponent = React.forwardRef<HTMLElement, T>(\n        (props: React.PropsWithoutRef<T>, ref) => {\n            const decoratedHandlers = eventTypes.reduce((handlers, eventType) => {\n                const originalHandler = props[eventType];\n                return {\n                    ...handlers,\n                    [eventType]: (event: React.SyntheticEvent) => {\n                        eventBroker.publish({\n                            eventId: eventType.replace(/^on/, '').toLowerCase(),\n                            domEvent: event,\n                            ...eventBrokerData,\n                        });\n                        return originalHandler && originalHandler(event);\n                    },\n                };\n            }, {});\n            return <Component {...props} {...decoratedHandlers} ref={ref} />;\n        },\n    );\n    LoggedComponent.displayName = displayName;\n\n    return LoggedComponent;\n}\n"]}