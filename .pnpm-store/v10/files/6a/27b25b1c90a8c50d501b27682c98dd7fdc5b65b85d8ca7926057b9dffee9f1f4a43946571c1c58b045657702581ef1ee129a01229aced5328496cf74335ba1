{"version":3,"file":"useResizeObserver.js","sourceRoot":"../../../../src","sources":["hooks/useResizeObserver/useResizeObserver.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAY/B,MAAM,UAAU,iBAAiB,CAAoB,EACjD,GAAG,EACH,QAAQ,EACR,GAAG,GACqB;IACxB,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACjB,MAAM,OAAO,GAAG,GAAG,EAAE,OAAO,CAAC;QAC7B,IAAI,CAAC,OAAO,EAAE,CAAC;YACX,OAAO,SAAS,CAAC;QACrB,CAAC;QAED,IAAI,OAAO,MAAM,CAAC,cAAc,KAAK,WAAW,EAAE,CAAC;YAC/C,MAAM,YAAY,GAAG,GAAG,EAAE;gBACtB,QAAQ,CAAC,EAAE,CAAC,CAAC;YACjB,CAAC,CAAC;YAEF,MAAM,CAAC,gBAAgB,CAAC,QAAQ,EAAE,YAAY,EAAE,KAAK,CAAC,CAAC;YACvD,OAAO,GAAG,EAAE;gBACR,MAAM,CAAC,mBAAmB,CAAC,QAAQ,EAAE,YAAY,EAAE,KAAK,CAAC,CAAC;YAC9D,CAAC,CAAC;QACN,CAAC;QAED,MAAM,QAAQ,GAAG,IAAI,cAAc,CAAC,CAAC,OAAO,EAAE,EAAE;YAC5C,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;gBAClB,OAAO;YACX,CAAC;YACD,QAAQ,CAAC,EAAC,QAAQ,EAAC,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,OAAO,CAAC,OAAO,EAAE,EAAC,GAAG,EAAC,CAAC,CAAC;QACjC,OAAO,GAAG,EAAE;YACR,QAAQ,CAAC,UAAU,EAAE,CAAC;QAC1B,CAAC,CAAC;IACN,CAAC,EAAE,CAAC,GAAG,EAAE,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC;AAC7B,CAAC","sourcesContent":["import * as React from 'react';\n\ninterface UseResizeObserverProps<T> {\n    ref: React.RefObject<T | null | undefined> | undefined;\n    onResize: (info: ResizeInfo) => void;\n    box?: ResizeObserverBoxOptions;\n}\n\nexport interface ResizeInfo {\n    observer?: ResizeObserver;\n}\n\nexport function useResizeObserver<T extends Element>({\n    ref,\n    onResize,\n    box,\n}: UseResizeObserverProps<T>) {\n    React.useEffect(() => {\n        const element = ref?.current;\n        if (!element) {\n            return undefined;\n        }\n\n        if (typeof window.ResizeObserver === 'undefined') {\n            const handleResize = () => {\n                onResize({});\n            };\n\n            window.addEventListener('resize', handleResize, false);\n            return () => {\n                window.removeEventListener('resize', handleResize, false);\n            };\n        }\n\n        const observer = new ResizeObserver((entries) => {\n            if (!entries.length) {\n                return;\n            }\n            onResize({observer});\n        });\n\n        observer.observe(element, {box});\n        return () => {\n            observer.disconnect();\n        };\n    }, [ref, onResize, box]);\n}\n"]}