{"version":3,"file":"NumberInput.js","sourceRoot":"../../../../src","sources":["components/NumberInput/NumberInput.tsx"],"names":[],"mappings":"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","sourcesContent":["'use client';\n\nimport * as React from 'react';\n\nimport {KeyCode} from '../../constants';\nimport {useControlledState, useForkRef} from '../../hooks';\nimport {useFormResetHandler} from '../../hooks/private';\nimport {TextInput} from '../controls/TextInput';\nimport type {BaseInputControlProps} from '../controls/types';\nimport {getInputControlState} from '../controls/utils';\nimport {block} from '../utils/cn';\n\nimport {NumericArrows} from './NumericArrows/NumericArrows';\nimport {\n    areStringRepresentationOfNumbersEqual,\n    clampToNearestStepValue,\n    getInputPattern,\n    getInternalState,\n    getParsedValue,\n    getPossibleNumberSubstring,\n    updateCursorPosition,\n} from './utils';\n\nimport './NumberInput.scss';\n\nconst b = block('number-input');\n\nexport interface NumberInputProps\n    extends Omit<\n        BaseInputControlProps<HTMLInputElement>,\n        'error' | 'value' | 'defaultValue' | 'onUpdate'\n    > {\n    /** The control's html attributes */\n    controlProps?: Omit<\n        React.InputHTMLAttributes<HTMLInputElement>,\n        'min' | 'max' | 'onChange' | 'onInput'\n    >;\n    /** Help text rendered to the left of the input node */\n    label?: string;\n    /** Indicates that the user cannot change control's value */\n    readOnly?: boolean;\n    /** User`s node rendered before label and input node */\n    startContent?: React.ReactNode;\n    /** User`s node rendered after input node and clear button */\n    endContent?: React.ReactNode;\n    /** An optional element displayed under the lower right corner of the control and sharing the place with the error container */\n    note?: React.ReactNode;\n\n    /** Hides increment/decrement buttons at the end of control\n     */\n    hiddenControls?: boolean;\n    /** min allowed value. It is used for clamping entered value to allowed range\n     * @default Number.MAX_SAFE_INTEGER\n     */\n    min?: number;\n    /** max allowed value. It is used for clamping entered value to allowed range\n     * @default Number.MIN_SAFE_INTEGER\n     */\n    max?: number;\n    /** Delta for incrementing/decrementing entered value with arrow keyboard buttons or component controls\n     * @default 1\n     */\n    step?: number;\n    /** Step multiplier when shift button is pressed\n     * @default 10\n     */\n    shiftMultiplier?: number;\n    /** Enables ability to enter decimal numbers\n     * @default false\n     */\n    allowDecimal?: boolean;\n    /** The control's value */\n    value?: number | null;\n    /** The control's default value. Use when the component is not controlled */\n    defaultValue?: number | null;\n    /** Fires when the inputâ€™s value is changed by the user. Provides new value as an callback's argument */\n    onUpdate?: (value: number | null) => void;\n}\n\nfunction getStringValue(value: number | null) {\n    return value === null ? '' : String(value);\n}\n\nexport const NumberInput = React.forwardRef<HTMLSpanElement, NumberInputProps>(function NumberInput(\n    {endContent, defaultValue: externalDefaultValue, ...props},\n    ref,\n) {\n    const {\n        value: externalValue,\n        onChange: handleChange,\n        onUpdate: externalOnUpdate,\n        min: externalMin,\n        max: externalMax,\n        shiftMultiplier: externalShiftMultiplier = 10,\n        step: externalStep,\n        size = 'm',\n        view = 'normal',\n        disabled,\n        hiddenControls,\n        validationState,\n        onBlur,\n        onKeyDown,\n        allowDecimal = false,\n        className,\n    } = props;\n\n    const {\n        min,\n        max,\n        step: baseStep,\n        value: internalValue,\n        defaultValue,\n        shiftMultiplier,\n    } = getInternalState({\n        min: externalMin,\n        max: externalMax,\n        step: externalStep,\n        shiftMultiplier: externalShiftMultiplier,\n        allowDecimal,\n        value: externalValue,\n        defaultValue: externalDefaultValue,\n    });\n\n    const [value, setValue] = useControlledState(\n        internalValue,\n        defaultValue ?? null,\n        externalOnUpdate,\n    );\n\n    const [inputValue, setInputValue] = React.useState(getStringValue(value));\n\n    React.useEffect(() => {\n        const stringPropsValue = getStringValue(value);\n        if (!areStringRepresentationOfNumbersEqual(inputValue, stringPropsValue)) {\n            setInputValue(stringPropsValue);\n        }\n    }, [value, inputValue]);\n\n    const clamp = !(allowDecimal && !externalStep);\n\n    const safeValue = value ?? 0;\n\n    const state = getInputControlState(validationState);\n\n    const canIncrementNumber = safeValue < (max ?? Number.MAX_SAFE_INTEGER);\n\n    const canDecrementNumber = safeValue > (min ?? Number.MIN_SAFE_INTEGER);\n\n    const innerControlRef = React.useRef<HTMLInputElement>(null);\n    const fieldRef = useFormResetHandler({\n        initialValue: value,\n        onReset: setValue,\n    });\n    const handleRef = useForkRef(props.controlRef, innerControlRef, fieldRef);\n\n    const handleValueDelta = (\n        e:\n            | React.MouseEvent<HTMLButtonElement>\n            | React.WheelEvent<HTMLInputElement>\n            | React.KeyboardEvent<HTMLInputElement>,\n        direction: 'up' | 'down',\n    ) => {\n        const step = e.shiftKey ? shiftMultiplier * baseStep : baseStep;\n        const deltaWithSign = direction === 'up' ? step : -step;\n        if (direction === 'up' ? canIncrementNumber : canDecrementNumber) {\n            const newValue = clampToNearestStepValue({\n                value: safeValue + deltaWithSign,\n                step: baseStep,\n                min,\n                max,\n                direction,\n            });\n            setValue?.(newValue);\n            setInputValue(newValue.toString());\n        }\n    };\n\n    const handleKeyDown: React.KeyboardEventHandler<HTMLInputElement> = (e) => {\n        if (e.key === KeyCode.ARROW_DOWN) {\n            e.preventDefault();\n            handleValueDelta(e, 'down');\n        } else if (e.key === KeyCode.ARROW_UP) {\n            e.preventDefault();\n            handleValueDelta(e, 'up');\n        } else if (e.key === KeyCode.HOME) {\n            e.preventDefault();\n            if (min !== undefined) {\n                setValue?.(min);\n                setInputValue(min.toString());\n            }\n        } else if (e.key === KeyCode.END) {\n            e.preventDefault();\n            if (max !== undefined) {\n                const newValue = clampToNearestStepValue({\n                    value: max,\n                    step: baseStep,\n                    min,\n                    max,\n                });\n                setValue?.(newValue);\n                setInputValue(newValue.toString());\n            }\n        }\n        onKeyDown?.(e);\n    };\n\n    const handleBlur: React.FocusEventHandler<HTMLInputElement> = (e) => {\n        if (clamp && value !== null) {\n            const clampedValue = clampToNearestStepValue({\n                value,\n                step: baseStep,\n                min,\n                max,\n            });\n\n            if (value !== clampedValue) {\n                setValue?.(clampedValue);\n            }\n            setInputValue(clampedValue.toString());\n        }\n        onBlur?.(e);\n    };\n\n    const handleUpdate = (v: string) => {\n        setInputValue(v);\n        const preparedStringValue = getPossibleNumberSubstring(v, allowDecimal);\n        updateCursorPosition(innerControlRef, v, preparedStringValue);\n        const {valid, value: parsedNumberValue} = getParsedValue(preparedStringValue);\n        if (valid && parsedNumberValue !== value) {\n            setValue?.(parsedNumberValue);\n        }\n    };\n\n    const handleInput: React.FormEventHandler<HTMLInputElement> = (e) => {\n        const preparedStringValue = getPossibleNumberSubstring(e.currentTarget.value, allowDecimal);\n        updateCursorPosition(innerControlRef, e.currentTarget.value, preparedStringValue);\n    };\n\n    return (\n        <TextInput\n            {...props}\n            className={b({size, view, state}, className)}\n            controlProps={{\n                ...props.controlProps,\n                onInput: handleInput,\n                role: 'spinbutton',\n                inputMode: allowDecimal ? 'decimal' : 'numeric',\n                pattern: props.controlProps?.pattern ?? getInputPattern(!allowDecimal, false),\n                'aria-valuemin': props.min,\n                'aria-valuemax': props.max,\n                'aria-valuenow': value === null ? undefined : value,\n            }}\n            controlRef={handleRef}\n            value={inputValue}\n            onChange={handleChange}\n            onUpdate={handleUpdate}\n            onKeyDown={handleKeyDown}\n            onBlur={handleBlur}\n            ref={ref}\n            endContent={\n                <React.Fragment>\n                    {endContent}\n                    {hiddenControls ? null : (\n                        <NumericArrows\n                            className={b('arrows')}\n                            size={size}\n                            disabled={disabled}\n                            onUpClick={(e) => {\n                                innerControlRef.current?.focus();\n                                handleValueDelta(e, 'up');\n                            }}\n                            onDownClick={(e) => {\n                                innerControlRef.current?.focus();\n                                handleValueDelta(e, 'down');\n                            }}\n                        />\n                    )}\n                </React.Fragment>\n            }\n        />\n    );\n});\n"]}