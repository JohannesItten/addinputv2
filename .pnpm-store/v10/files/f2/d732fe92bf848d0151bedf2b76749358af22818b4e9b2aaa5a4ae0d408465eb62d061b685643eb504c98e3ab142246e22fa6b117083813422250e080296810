{"version":3,"file":"useFocusWithin.js","sourceRoot":"../../../../src","sources":["hooks/useFocusWithin/useFocusWithin.ts"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport {SyntheticFocusEvent} from './SyntheticFocusEvent';\nimport {useSyntheticBlurEvent} from './useSyntheticBlurEvent';\n\nexport interface UseFocusWithinProps<T extends Element = Element> {\n    /** Whether the focus within events should be disabled. */\n    isDisabled?: boolean;\n    /** Handler that is called when the target element or a descendant receives focus. */\n    onFocusWithin?: (e: React.FocusEvent<T>) => void;\n    /** Handler that is called when the target element and all descendants lose focus. */\n    onBlurWithin?: (e: React.FocusEvent<T>) => void;\n    /** Handler that is called when the focus within state changes. */\n    onFocusWithinChange?: (isFocusWithin: boolean) => void;\n}\n\nexport interface UseFocusWithinResult<T extends Element = Element> {\n    focusWithinProps: {\n        onFocus?: (event: React.FocusEvent<T>) => void;\n        onBlur?: (event: React.FocusEvent<T>) => void;\n    };\n}\n\n/**\n * Callback on focus outside event.\n *\n * @callback onFocusEventCallback\n * @param {FocusEvent} event\n */\n\n/**\n * Callback on focus change event.\n *\n * @callback onFocusChangeCallback\n * @param {boolean} isFocusWithin\n */\n\n/**\n * Handles focus events for the target and its descendants.\n *\n * @param {Object} props\n * @param {boolean} [props.isDisabled=false] - whether the focus within events should be disabled.\n * @param {onFocusEventCallback} props.onFocusWithin - handler that is called when the target element or a descendant receives focus.\n * @param {onFocusEventCallback} props.onBlurWithin - handler that is called when the target element and all descendants lose focus.\n * @param {onFocusChangeCallback} props.onFocusChange - handler that is called when the the focus within state changes.\n *\n * @returns container props\n *\n * @example\n *\n * function Select() {\n *   const [open, setOpen] = React.useState(false);\n *\n *   const handleFocusOutside = React.useCallback(() => {setOpen(false);}, []);\n *\n *   const {focusWithinProps} = useFocusWithin({onBlurWithin: handleFocusOutside});\n *\n *   return (\n *     <span {...focusWithinProps}>\n *       <Button onClick={() => {setOpen(true)}}>Select</Button>\n *       <Popup open={open}>\n *          ...\n *       </Popup>\n *     </span>\n *   );\n *  }\n */\nexport function useFocusWithin<T extends Element = Element>(\n    props: UseFocusWithinProps<T>,\n): UseFocusWithinResult<T> {\n    const {onFocusWithin, onBlurWithin, onFocusWithinChange, isDisabled} = props;\n\n    const isFocusWithinRef = React.useRef(false);\n\n    const onFocus = React.useCallback(\n        (event: React.FocusEvent<T>) => {\n            if (!isFocusWithinRef.current && document.activeElement === event.target) {\n                isFocusWithinRef.current = true;\n\n                if (onFocusWithin) {\n                    onFocusWithin(event);\n                }\n\n                if (onFocusWithinChange) {\n                    onFocusWithinChange(true);\n                }\n            }\n        },\n        [onFocusWithin, onFocusWithinChange],\n    );\n\n    const onBlur = React.useCallback(\n        (event: React.FocusEvent<T>) => {\n            if (!isFocusWithinRef.current) {\n                return;\n            }\n\n            isFocusWithinRef.current = false;\n\n            if (onBlurWithin) {\n                onBlurWithin(event);\n            }\n\n            if (onFocusWithinChange) {\n                onFocusWithinChange(false);\n            }\n        },\n        [onBlurWithin, onFocusWithinChange],\n    );\n\n    const {onBlur: onBlurHandler, onFocus: onFocusHandler} = useFocusEvents<T>({\n        onFocus,\n        onBlur,\n        isDisabled,\n    });\n\n    if (isDisabled) {\n        return {\n            focusWithinProps: {\n                onFocus: undefined,\n                onBlur: undefined,\n            },\n        };\n    }\n\n    return {\n        focusWithinProps: {\n            onFocus: onFocusHandler,\n            onBlur: onBlurHandler,\n        },\n    };\n}\n\nfunction useFocusEvents<T extends Element = Element>({\n    onFocus,\n    onBlur,\n    isDisabled,\n}: {\n    onFocus: (event: React.FocusEvent<T>) => void;\n    onBlur: (event: React.FocusEvent<T>) => void;\n    isDisabled?: boolean;\n}) {\n    const capturedRef = React.useRef(false);\n    const targetRef = React.useRef<EventTarget | null>(null);\n\n    React.useEffect(() => {\n        if (isDisabled) {\n            return undefined;\n        }\n\n        const handleFocus = function () {\n            capturedRef.current = false;\n        };\n\n        const handleFocusIn = function (event: FocusEvent) {\n            if (!capturedRef.current && targetRef.current) {\n                const blurEvent = new FocusEvent('blur', {\n                    ...event,\n                    relatedTarget: event.target,\n                    bubbles: false,\n                    cancelable: false,\n                });\n                onBlur(\n                    new SyntheticFocusEvent('blur', blurEvent, {\n                        target: targetRef.current,\n                        currentTarget: targetRef.current,\n                    }),\n                );\n                targetRef.current = null;\n            }\n        };\n\n        window.addEventListener('focus', handleFocus, {capture: true});\n        // use focusin because a focus event does not bubble and current browser\n        // implementations fire focusin events after focus event\n        window.addEventListener('focusin', handleFocusIn);\n\n        return () => {\n            window.removeEventListener('focus', handleFocus, {capture: true});\n            window.removeEventListener('focusin', handleFocusIn);\n        };\n    }, [isDisabled, onBlur]);\n\n    const onBlurHandler = React.useCallback(\n        (event: React.FocusEvent<T>) => {\n            if (\n                document.activeElement !== event.target &&\n                (event.relatedTarget === null ||\n                    event.relatedTarget === document.body ||\n                    event.relatedTarget === (document as EventTarget))\n            ) {\n                onBlur(event);\n                targetRef.current = null;\n            }\n        },\n        [onBlur],\n    );\n\n    const onSyntheticFocus = useSyntheticBlurEvent(onBlur);\n\n    const onFocusHandler = React.useCallback(\n        (event: React.FocusEvent<T>) => {\n            capturedRef.current = true;\n            targetRef.current = event.target;\n            onSyntheticFocus(event);\n            onFocus(event);\n        },\n        [onSyntheticFocus, onFocus],\n    );\n\n    return {onBlur: onBlurHandler, onFocus: onFocusHandler};\n}\n"]}