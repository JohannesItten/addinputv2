{"version":3,"file":"types.js","sourceRoot":"../../../../src","sources":["components/layout/types.ts"],"names":[],"mappings":"","sourcesContent":["export type ColSize =\n    | '1'\n    | '2'\n    | '3'\n    | '4'\n    | '5'\n    | '6'\n    | '7'\n    | '8'\n    | '9'\n    | '10'\n    | '11'\n    | '12'\n    | 1\n    | 2\n    | 3\n    | 4\n    | 5\n    | 6\n    | 7\n    | 8\n    | 9\n    | 10\n    | 11\n    | 12;\n\nexport type Space =\n    | '0'\n    | '0.5'\n    | '1'\n    | '2'\n    | '3'\n    | '4'\n    | '5'\n    | '6'\n    | '7'\n    | '8'\n    | '9'\n    | '10'\n    | 0\n    | 0.5\n    | 1\n    | 2\n    | 3\n    | 4\n    | 5\n    | 6\n    | 7\n    | 8\n    | 9\n    | 10;\n\n// TODO BREAKING CHANGE: xxl -> 2xl, xxxl -> 3xl\nexport type MediaType = 'xs' | 's' | 'm' | 'l' | 'xl' | 'xxl' | 'xxxl';\n\nexport type MediaProps<T> = Record<MediaType, T>;\n\nexport type AdaptiveProp<T extends keyof React.CSSProperties> =\n    | React.CSSProperties[T]\n    | MediaPartial<React.CSSProperties[T]>;\n\nexport type MediaPartial<T> = Partial<MediaProps<T>>;\n\nexport type WithMedia<T extends {}> = T & {media?: MediaPartial<Partial<T>>};\n\nexport type CommonProps = Partial<{\n    space: Space;\n    spaceRow: Space;\n}>;\n\nexport type ContainerConfigProps = Partial<{\n    gutters: Space;\n    spaceRow: Space;\n}>;\n\nexport type RecursivePartial<T> = {\n    [P in keyof T]?: RecursivePartial<T[P]>;\n};\n\ninterface ComponentProps {\n    container: WithMedia<ContainerConfigProps>;\n}\n\nexport interface LayoutTheme {\n    /**\n     * Override default breakpoints values.\n     */\n    breakpoints: MediaProps<number>;\n    /**\n     * Base space unit size.\n     *\n     * **Don't forget to override corresponding css custom property `--g-spacing-base` at project level,\n     * if you will change this value in theme**\n     */\n    spaceBaseSize: number;\n    /**\n     * Components props build in into the theme. You can describe the props depending on the current media expression\n     */\n    components: ComponentProps;\n}\n\nexport interface IsMediaActive {\n    (toCheck: MediaType): boolean;\n}\n"]}