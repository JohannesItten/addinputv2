{"version":3,"file":"OptionWrap.js","sourceRoot":"../../../../../../src","sources":["components/Select/components/SelectList/OptionWrap.tsx"],"names":[],"mappings":";;;;AAEA,6CAAwC;AAExC,iDAAmC;AACnC,6CAAwC;AAGxC,MAAM,CAAC,GAAG,IAAA,UAAK,EAAC,aAAa,CAAC,CAAC;AAa/B,MAAM,aAAa,GAAG,CAAC,EAAC,MAAM,EAAqB,EAAE,EAAE;IACnD,MAAM,EAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAC,GAAG,MAAM,CAAC;IACpD,OAAO,CACH,iCAAM,KAAK,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC,CAAC,sBAAsB,EAAE,EAAC,QAAQ,EAAC,CAAC,YAC/D,OAAO,IAAI,QAAQ,GACjB,CACV,CAAC;AACN,CAAC,CAAC;AAEK,MAAM,UAAU,GAAG,CAAC,KAAsB,EAAE,EAAE;IACjD,MAAM,EAAC,YAAY,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAC,GAAG,KAAK,CAAC;IACtD,MAAM,QAAQ,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;IACpD,MAAM,aAAa,GAAG,YAAY,CAAC,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,uBAAC,aAAa,IAAC,MAAM,EAAE,MAAM,GAAI,CAAC;IAE9F,OAAO,CACH,4CACa,MAAM,CAAC,EAAE,EAClB,SAAS,EAAE,CAAC,CAAC,QAAQ,EAAE,EAAC,OAAO,EAAE,QAAQ,IAAI,CAAC,QAAQ,EAAE,QAAQ,EAAE,MAAM,CAAC,QAAQ,EAAC,CAAC,aAElF,QAAQ,IAAI,CACT,uBAAC,WAAI,IAAC,SAAS,EAAE,CAAC,CAAC,WAAW,EAAE,EAAC,KAAK,EAAE,QAAQ,IAAI,QAAQ,EAAC,CAAC,EAAE,IAAI,EAAE,aAAK,GAAI,CAClF,EACA,aAAa,IACZ,CACT,CAAC;AACN,CAAC,CAAC;AAhBW,QAAA,UAAU,cAgBrB","sourcesContent":["import type * as React from 'react';\n\nimport {Check} from '@gravity-ui/icons';\n\nimport {Icon} from '../../../Icon';\nimport {block} from '../../../utils/cn';\nimport type {SelectOption, SelectProps} from '../../types';\n\nconst b = block('select-list');\n\ntype DefaultOptionProps = {\n    option: SelectOption;\n};\n\ntype OptionWrapProps = {\n    renderOption?: (option: SelectOption) => React.ReactElement;\n    value: NonNullable<SelectProps['value']>;\n    option: SelectOption;\n    multiple?: boolean;\n};\n\nconst DefaultOption = ({option}: DefaultOptionProps) => {\n    const {content, children, disabled, title} = option;\n    return (\n        <span title={title} className={b('option-default-label', {disabled})}>\n            {content || children}\n        </span>\n    );\n};\n\nexport const OptionWrap = (props: OptionWrapProps) => {\n    const {renderOption, value, option, multiple} = props;\n    const selected = value.indexOf(option.value) !== -1;\n    const optionContent = renderOption ? renderOption(option) : <DefaultOption option={option} />;\n\n    return (\n        <div\n            data-qa={option.qa}\n            className={b('option', {colored: selected && !multiple, disabled: option.disabled})}\n        >\n            {multiple && (\n                <Icon className={b('tick-icon', {shown: selected && multiple})} data={Check} />\n            )}\n            {optionContent}\n        </div>\n    );\n};\n"]}