{"version":3,"file":"useLayoutContext.js","sourceRoot":"../../../../../src","sources":["components/layout/hooks/useLayoutContext.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,EAAC,aAAa,EAAC,qCAAkC;AAExD,OAAO,EAAC,2BAA2B,EAAE,oBAAoB,EAAC,0BAAiB;AAiE3E;;;;GAIG;AACH,MAAM,CAAC,MAAM,gBAAgB,GAAG,GAAyB,EAAE;IACvD,MAAM,EAAC,gBAAgB,EAAE,KAAK,EAAC,GAAG,KAAK,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;IAElE,MAAM,EAAC,aAAa,EAAE,oBAAoB,EAAC,GAAG,KAAK,CAAC,OAAO,CACvD,GAAG,EAAE,CAAC,CAAC;QACH,aAAa,EAAE,oBAAoB,CAAC,gBAAgB,CAAC;QACrD,oBAAoB,EAAE,2BAA2B,CAAC,gBAAgB,CAAC;KACtE,CAAC,EACF,CAAC,gBAAgB,CAAC,CACrB,CAAC;IAEF,OAAO;QACH,KAAK;QACL,gBAAgB;QAChB,aAAa;QACb,oBAAoB;KACvB,CAAC;AACN,CAAC,CAAC","sourcesContent":["import * as React from 'react';\n\nimport {LayoutContext} from '../contexts/LayoutContext';\nimport type {LayoutTheme, MediaType} from '../types';\nimport {getClosestMediaPropsFactory, isMediaActiveFactory} from '../utils';\n\ninterface ComputedMediaContext {\n    theme: LayoutTheme;\n    /**\n     *\n     *  > Note: `s` breakpoint starts from `0px` and and's with `m` - 1px\n     *\n     * ```tsx\n     * import {useLayoutContext} from '@gravity-ui/uikit';\n     *\n     * const Component = () => {\n     *  const {activeMediaQuery} = useLayoutContext();\n     *\n     *  return (\n     *      <>\n     *          {activeMediaQuery === 'l' ? (\n     *              <Text>I am rendering only on screen resolution - \"l\"</Text>\n     *          ) : null}\n     *      </>\n     *  );\n     * };\n     * ```\n     */\n    activeMediaQuery: MediaType;\n    /**\n     * Returns a boolean value if the passed value is equal to or greater than the currently active media expression.\n     * It is necessary to describe the logic of adaptive behavior of elements taking into account the mobile-first approach\n     * ```tsx\n     * import {useLayoutContext} from '@gravity-ui/uikit';\n     *\n     * // this example of code will be shown on l, xl, xxl and xxxl screen sizes\n     * const Component = () => {\n     * const {isMediaActive} = useLayoutContext();\n     *\n     *  return (\n     *      <>{isMediaActive('xl') ? <Text>i'm rendering on \"l\", \"xl\", \"xxl\" and \"xxxl\" screen sizes</Text> : null}</>;\n     *  );\n     * };\n     * ```\n     */\n    isMediaActive: ReturnType<typeof isMediaActiveFactory>;\n    /**\n     * It works in a similar way to is Media Active, only it takes map as an argument in the keys of screen resolutions.\n     * Returns the nearest available key value taking into account the mobile first approach.\n     *\n     * ```tsx\n     * import {useLayoutContext} from '@gravity-ui/uikit';\n     *\n     * const mapOfPropsByScreen = {\n     *  s: \"i'm will be shown on 's' and 'n' screen size\",\n     *  l: \"i'm will be shown on 'l' and 'xl' screen size\",\n     *  xxl: \"i'm will be shown on 'xxl' and 'xxxl' screen size\",\n     * };\n     *\n     * const Component = () => {\n     *  const {getClosestMediaProps} = useLayoutContext();\n     *\n     *  return <Text>{mapOfPropsByScreen(mapOfPropsByScreen)}</Text>;\n     * };\n     * ```\n     */\n    getClosestMediaProps: ReturnType<typeof getClosestMediaPropsFactory>;\n}\n\n/**\n * Quick access to theme and helpers to work with media queries\n * ---\n * Storybook - https://preview.gravity-ui.com/uikit/?path=/docs/layout--playground#uselayoutcontext\n */\nexport const useLayoutContext = (): ComputedMediaContext => {\n    const {activeMediaQuery, theme} = React.useContext(LayoutContext);\n\n    const {isMediaActive, getClosestMediaProps} = React.useMemo(\n        () => ({\n            isMediaActive: isMediaActiveFactory(activeMediaQuery),\n            getClosestMediaProps: getClosestMediaPropsFactory(activeMediaQuery),\n        }),\n        [activeMediaQuery],\n    );\n\n    return {\n        theme,\n        activeMediaQuery,\n        isMediaActive,\n        getClosestMediaProps,\n    };\n};\n"]}