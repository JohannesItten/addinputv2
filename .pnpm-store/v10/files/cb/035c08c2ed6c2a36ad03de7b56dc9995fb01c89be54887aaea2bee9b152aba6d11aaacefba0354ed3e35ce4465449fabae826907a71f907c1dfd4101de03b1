{"version":3,"file":"types.js","sourceRoot":"../../../src","sources":["components/types.ts"],"names":[],"mappings":"","sourcesContent":["import type * as React from 'react';\n\nexport interface DOMProps {\n    style?: CSSProperties;\n    className?: string;\n}\n\nexport interface QAProps {\n    qa?: string;\n}\n\n// Checkbox, Radio and Switch\nexport interface ControlProps\n    extends Pick<\n        React.InputHTMLAttributes<HTMLInputElement>,\n        | 'name'\n        | 'value'\n        | 'id'\n        | 'checked'\n        | 'onChange'\n        | 'onFocus'\n        | 'onBlur'\n        | 'disabled'\n        | 'defaultChecked'\n    > {\n    indeterminate?: boolean;\n    onUpdate?: (checked: boolean) => void;\n    controlProps?: Omit<\n        React.InputHTMLAttributes<HTMLInputElement>,\n        | 'name'\n        | 'value'\n        | 'id'\n        | 'onFocus'\n        | 'onBlur'\n        | 'disabled'\n        | 'type'\n        | 'onChange'\n        | 'defaultChecked'\n        | 'checked'\n        | 'aria-checked'\n    >;\n    controlRef?: React.Ref<HTMLInputElement>;\n}\n\nexport interface ControlGroupOption<ValueType extends string = string> {\n    value: ValueType;\n    content?: React.ReactNode;\n    children?: React.ReactNode;\n    disabled?: boolean;\n    title?: string;\n}\n\nexport interface ControlGroupProps<ValueType extends string = string> extends AriaLabelingProps {\n    name?: string;\n    value?: ValueType | null;\n    defaultValue?: ValueType;\n    onUpdate?: (value: ValueType) => void;\n    onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n    onFocus?: (event: React.FocusEvent<HTMLInputElement>) => void;\n    onBlur?: (event: React.FocusEvent<HTMLInputElement>) => void;\n    disabled?: boolean;\n    options?: ControlGroupOption<ValueType>[];\n}\n\nexport type Key = string | number;\n\nexport interface AriaLabelingProps {\n    /**\n     * Defines a string value that labels the current element.\n     */\n    'aria-label'?: string;\n\n    /**\n     * Identifies the element (or elements) that labels the current element.\n     */\n    'aria-labelledby'?: string;\n\n    /**\n     * Identifies the element (or elements) that describes the object.\n     */\n    'aria-describedby'?: string;\n\n    /**\n     * Identifies the element (or elements) that provide a detailed, extended description for the object.\n     */\n    'aria-details'?: string;\n}\n\nexport interface FocusEventHandlers<Target = Element> {\n    /** Handler that is called when the element receives focus. */\n    onFocus?: React.FocusEventHandler<Target>;\n    /** Handler that is called when the element loses focus. */\n    onBlur?: React.FocusEventHandler<Target>;\n}\n\nexport type CSSProperties =\n    | (React.CSSProperties & {\n          [key: `--${string}`]: string | number;\n      })\n    | React.CSSProperties;\n"]}