{"version":3,"file":"types.js","sourceRoot":"../../../../src","sources":["components/tabs/types.ts"],"names":[],"mappings":"","sourcesContent":["import type * as React from 'react';\n\nimport type {LabelProps} from '../Label';\nimport type {DOMProps, QAProps} from '../types';\n\nexport type TabSize = 'm' | 'l' | 'xl';\n\nexport interface TabProviderProps {\n    value?: string;\n    onUpdate?: (value: string) => void;\n    children?: React.ReactNode;\n}\n\nexport interface TabListProps\n    extends DOMProps,\n        QAProps,\n        Omit<React.HTMLAttributes<HTMLDivElement>, 'style'> {\n    onUpdate?: (value: string) => void;\n    value?: string;\n    size?: TabSize;\n    // contentOverflow?: 'wrap';\n    activateOnFocus?: boolean;\n    children?: React.ReactNode;\n}\n\ninterface TabCommonProps extends QAProps, DOMProps {\n    value: string;\n    icon?: React.ReactNode;\n    counter?: number | string;\n    label?: {\n        content: React.ReactNode;\n        theme?: LabelProps['theme'];\n    };\n    disabled?: boolean;\n    children?: React.ReactNode;\n}\n\nexport interface TabButtonProps\n    extends TabCommonProps,\n        Omit<React.ButtonHTMLAttributes<HTMLButtonElement>, 'value' | 'disabled' | 'style'> {\n    component?: never;\n    href?: never;\n}\n\nexport interface TabLinkProps\n    extends TabCommonProps,\n        Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, 'style'> {\n    component?: never;\n    href: string;\n}\n\nexport type TabComponentElementType = Exclude<React.ElementType, 'a' | 'button'> | undefined;\n\nexport type TabComponentProps<T extends Exclude<TabComponentElementType, undefined>> =\n    TabCommonProps &\n        React.ComponentPropsWithoutRef<T> & {\n            component: T;\n        };\n\nexport type TabProps<T extends TabComponentElementType = undefined> =\n    | TabButtonProps\n    | TabLinkProps\n    | TabComponentProps<Exclude<T, undefined>>;\n\nexport interface TabPanelProps\n    extends DOMProps,\n        QAProps,\n        Omit<React.HTMLAttributes<HTMLDivElement>, 'style'> {\n    value: string;\n    children?: React.ReactNode;\n}\n"]}