{"version":3,"file":"Toaster.js","sourceRoot":"../../../../src","sources":["components/Toaster/Toaster.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,YAAY,EAAC,oCAAiC;AACtD,OAAO,EAAC,aAAa,EAAC,qCAAkC;AACxD,OAAO,EAAC,QAAQ,EAAC,gCAA6B;AAC9C,OAAO,EAAC,WAAW,EAAC,mCAAgC;AAEpD,MAAM,OAAO,OAAO;IAChB,8EAA8E;IACtE,cAAc,GAAG,KAAK,CAAC;IACvB,MAAM,GAAyB,EAAE,CAAC;IAClC,YAAY,GAAuC,IAAI,YAAY,EAAE,CAAC;IAE9E,OAAO;QACH,IAAI,CAAC,SAAS,EAAE,CAAC;QACjB,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;IAChC,CAAC;IAED,GAAG,CAAC,KAAiB;QACjB,IAAI,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC;QAE7B,IAAI,QAAQ,CAAC,UAAU,EAAE,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC;YACnC,UAAU,GAAG,WAAW,CAAC,UAAU,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;QACrD,CAAC;QAED,IAAI,CAAC,MAAM,GAAG;YACV,GAAG,UAAU;YACb;gBACI,GAAG,KAAK;gBACR,OAAO,EAAE,IAAI,CAAC,GAAG,EAAE;gBACnB,GAAG,EAAE,EAAC,OAAO,EAAE,IAAI,EAAC;aACvB;SACJ,CAAC;QAEF,IAAI,CAAC,MAAM,EAAE,CAAC;IAClB,CAAC;IAED,MAAM,CAAC,IAAY;QACf,IAAI,CAAC,MAAM,GAAG,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QAE7C,IAAI,CAAC,MAAM,EAAE,CAAC;IAClB,CAAC;IAED,SAAS;QACL,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QAEjB,IAAI,CAAC,MAAM,EAAE,CAAC;IAClB,CAAC;IAED,MAAM,CAAC,IAAY,EAAE,eAAoC;QACrD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE,CAAC;YAC/B,OAAO;QACX,CAAC;QAED,MAAM,KAAK,GAAG,aAAa,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QAE/C,IAAI,CAAC,MAAM,GAAG;YACV,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC;YAC9B;gBACI,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;gBACrB,GAAG,eAAe;aACrB;YACD,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC;SAClC,CAAC;QAEF,IAAI,CAAC,MAAM,EAAE,CAAC;IAClB,CAAC;IAED,GAAG,CAAC,IAAY;QACZ,OAAO,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IACvC,CAAC;IAED,SAAS,CAAC,QAAgD;QACtD,MAAM,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAE1D,IAAI,IAAI,CAAC,cAAc,EAAE,CAAC;YACtB,IAAI,CAAC,MAAM,EAAE,CAAC;QAClB,CAAC;QAED,OAAO,WAAW,CAAC;IACvB,CAAC;IAEO,MAAM;QACV,MAAM,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAE1D,IAAI,CAAC,cAAc,GAAG,CAAC,WAAW,CAAC;IACvC,CAAC;CACJ","sourcesContent":["import type {InternalToastProps, ToastProps} from './types';\nimport {EventEmitter} from './utilities/EventEmitter';\nimport {getToastIndex} from './utilities/getToastIndex';\nimport {hasToast} from './utilities/hasToast';\nimport {removeToast} from './utilities/removeToast';\n\nexport class Toaster {\n    /** We were tried to notify about toaster changes, but no one were listened */\n    private hasUndelivered = false;\n    private toasts: InternalToastProps[] = [];\n    private eventEmitter: EventEmitter<InternalToastProps[]> = new EventEmitter();\n\n    destroy() {\n        this.removeAll();\n        this.eventEmitter.destroy();\n    }\n\n    add(toast: ToastProps) {\n        let nextToasts = this.toasts;\n\n        if (hasToast(nextToasts, toast.name)) {\n            nextToasts = removeToast(nextToasts, toast.name);\n        }\n\n        this.toasts = [\n            ...nextToasts,\n            {\n                ...toast,\n                addedAt: Date.now(),\n                ref: {current: null},\n            },\n        ];\n\n        this.notify();\n    }\n\n    remove(name: string) {\n        this.toasts = removeToast(this.toasts, name);\n\n        this.notify();\n    }\n\n    removeAll() {\n        this.toasts = [];\n\n        this.notify();\n    }\n\n    update(name: string, overrideOptions: Partial<ToastProps>) {\n        if (!hasToast(this.toasts, name)) {\n            return;\n        }\n\n        const index = getToastIndex(this.toasts, name);\n\n        this.toasts = [\n            ...this.toasts.slice(0, index),\n            {\n                ...this.toasts[index],\n                ...overrideOptions,\n            },\n            ...this.toasts.slice(index + 1),\n        ];\n\n        this.notify();\n    }\n\n    has(name: string) {\n        return hasToast(this.toasts, name);\n    }\n\n    subscribe(listener: (toasts: InternalToastProps[]) => void) {\n        const unsubscribe = this.eventEmitter.subscribe(listener);\n\n        if (this.hasUndelivered) {\n            this.notify();\n        }\n\n        return unsubscribe;\n    }\n\n    private notify() {\n        const isDelivered = this.eventEmitter.notify(this.toasts);\n\n        this.hasUndelivered = !isDelivered;\n    }\n}\n"]}