{"version":3,"file":"useRadioGroup.js","sourceRoot":"../../../../../src","sources":["hooks/private/useRadioGroup/useRadioGroup.ts"],"names":[],"mappings":";;AA8BA,sCAsEC;;AApGD,qDAA+B;AAE/B,sCAAoE;AAEpE,gFAAwE;AACxE,yEAA2D;AAyB3D,SAAgB,aAAa,CACzB,KAAoC;IAEpC,MAAM,EACF,IAAI,EACJ,KAAK,EACL,YAAY,EACZ,OAAO,GAAG,EAAE,EACZ,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,OAAO,EACP,MAAM,GACT,GAAG,KAAK,CAAC;IAEV,MAAM,SAAS,GAAG,IAAA,aAAS,GAAE,CAAC;IAC9B,MAAM,CAAC,YAAY,EAAE,aAAa,CAAC,GAAG,IAAA,sBAAkB,EACpD,KAAK,EACL,YAAY,IAAI,IAAI,EACpB,QAAQ,CACX,CAAC;IAEF,MAAM,QAAQ,GAAG,IAAA,yCAAmB,EAAC;QACjC,YAAY,EAAE,YAAyB;QACvC,OAAO,EAAE,aAAa;KACzB,CAAC,CAAC;IAEH,MAAM,EAAC,gBAAgB,EAAC,GAAG,IAAA,kBAAc,EAAC,EAAC,aAAa,EAAE,OAAO,EAAE,YAAY,EAAE,MAAM,EAAC,CAAC,CAAC;IAE1F,MAAM,YAAY,GAAG,KAAK,CAAC,WAAW,CAClC,CAAC,KAA0C,EAAE,EAAE;QAC3C,aAAa,CAAC,KAAK,CAAC,MAAM,CAAC,KAAkB,CAAC,CAAC;QAE/C,IAAI,QAAQ,EAAE,CAAC;YACX,QAAQ,CAAC,KAAK,CAAC,CAAC;QACpB,CAAC;IACL,CAAC,EACD,CAAC,QAAQ,EAAE,aAAa,CAAC,CAC5B,CAAC;IAEF,MAAM,YAAY,GAAG,KAAK,CAAC,OAAO,CAC9B,GAAG,EAAE,CAAC,CAAC;QACH,IAAI,EAAE,IAAI,IAAI,SAAS;QACvB,YAAY;QACZ,QAAQ,EAAE,OAAO,CAAC,QAAQ,CAAC;QAC3B,GAAG,EAAE,QAAQ;QACb,QAAQ,EAAE,YAAY;KACzB,CAAC,EACF,CAAC,SAAS,EAAE,YAAY,EAAE,QAAQ,EAAE,QAAQ,EAAE,YAAY,EAAE,IAAI,CAAC,CACpE,CAAC;IAEF,MAAM,cAAc,GAAG;QACnB,GAAG,IAAA,+BAAc,EAAC,KAAK,EAAE,EAAC,SAAS,EAAE,IAAI,EAAC,CAAC;QAC3C,GAAG,gBAAgB;QACnB,IAAI,EAAE,YAAY;QAClB,eAAe,EAAE,QAAQ;KAC5B,CAAC;IAEF,MAAM,YAAY,GAA8B,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;QACrE,IAAI,EAAE,IAAI,IAAI,SAAS;QACvB,KAAK,EAAE,MAAM,CAAC,KAAK;QACnB,OAAO,EAAE,MAAM,CAAC,OAAO;QACvB,KAAK,EAAE,MAAM,CAAC,KAAK;QACnB,OAAO,EAAE,YAAY,KAAK,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC;QAC9C,QAAQ,EAAE,QAAQ,IAAI,MAAM,CAAC,QAAQ;QACrC,QAAQ,EAAE,YAAY;QACtB,GAAG,EAAE,QAAQ;KAChB,CAAC,CAAC,CAAC;IAEJ,OAAO,EAAC,cAAc,EAAE,YAAY,EAAE,YAAY,EAAC,CAAC;AACxD,CAAC","sourcesContent":["import * as React from 'react';\n\nimport {useControlledState, useFocusWithin, useUniqId} from '../..';\nimport type {ControlGroupOption, ControlGroupProps} from '../../../components/types';\nimport {filterDOMProps} from '../../../components/utils/filterDOMProps';\nimport {useFormResetHandler} from '../useFormResetHandler';\n\nimport type {RadioGroupContextProps} from './types';\n\ninterface OptionsProps<ValueType extends string = string>\n    extends Omit<\n        ControlGroupProps<ValueType>,\n        'options' | 'defaultValue' | 'aria-label' | 'aria-labelledby' | 'onUpdate' | 'value'\n    > {\n    value: ValueType;\n    checked: boolean;\n    content: ControlGroupOption['content'];\n}\n\nexport type UseRadioGroupProps<ValueType extends string = string> = ControlGroupProps<ValueType>;\n\nexport type UseRadioGroupResult<ValueType extends string = string> = {\n    containerProps: Pick<ControlGroupProps, 'aria-label' | 'aria-labelledby'> & {\n        role: string;\n        'aria-disabled': ControlGroupProps['disabled'];\n    };\n    optionsProps: OptionsProps<ValueType>[];\n    contextProps: RadioGroupContextProps;\n};\n\nexport function useRadioGroup<ValueType extends string = string>(\n    props: UseRadioGroupProps<ValueType>,\n): UseRadioGroupResult<ValueType> {\n    const {\n        name,\n        value,\n        defaultValue,\n        options = [],\n        disabled,\n        onUpdate,\n        onChange,\n        onFocus,\n        onBlur,\n    } = props;\n\n    const controlId = useUniqId();\n    const [currentValue, setValueState] = useControlledState<string | null, ValueType>(\n        value,\n        defaultValue ?? null,\n        onUpdate,\n    );\n\n    const fieldRef = useFormResetHandler({\n        initialValue: currentValue as ValueType,\n        onReset: setValueState,\n    });\n\n    const {focusWithinProps} = useFocusWithin({onFocusWithin: onFocus, onBlurWithin: onBlur});\n\n    const handleChange = React.useCallback(\n        (event: React.ChangeEvent<HTMLInputElement>) => {\n            setValueState(event.target.value as ValueType);\n\n            if (onChange) {\n                onChange(event);\n            }\n        },\n        [onChange, setValueState],\n    );\n\n    const contextProps = React.useMemo(\n        () => ({\n            name: name || controlId,\n            currentValue,\n            disabled: Boolean(disabled),\n            ref: fieldRef,\n            onChange: handleChange,\n        }),\n        [controlId, currentValue, disabled, fieldRef, handleChange, name],\n    );\n\n    const containerProps = {\n        ...filterDOMProps(props, {labelable: true}),\n        ...focusWithinProps,\n        role: 'radiogroup',\n        'aria-disabled': disabled,\n    };\n\n    const optionsProps: OptionsProps<ValueType>[] = options.map((option) => ({\n        name: name || controlId,\n        value: option.value,\n        content: option.content,\n        title: option.title,\n        checked: currentValue === String(option.value),\n        disabled: disabled || option.disabled,\n        onChange: handleChange,\n        ref: fieldRef,\n    }));\n\n    return {containerProps, optionsProps, contextProps};\n}\n"]}