{"version":3,"file":"types.js","sourceRoot":"../../../../src","sources":["components/Slider/types.ts"],"names":[],"mappings":"","sourcesContent":["import type {SliderProps as RcSliderProps, SliderRef as RcSliderRef} from 'rc-slider';\nimport type {HandleProps} from 'rc-slider/lib/Handles/Handle';\n\nimport type {DOMProps, QAProps} from '../types';\n\nexport type SliderSize = 's' | 'm' | 'l' | 'xl';\n\nexport type SliderValue = number | [number, number];\n\nexport type RcSliderValueType = number | number[];\n\nexport type TooltipDisplayType = 'off' | 'on' | 'auto';\n\ntype FormatterType = (value: number) => string;\n\nexport type SliderProps<ValueType = number | [number, number]> = {\n    /** The value of the control */\n    value?: ValueType;\n    /** The control's default value, used when the component is not controlled */\n    defaultValue?: ValueType;\n    /** The size of the control */\n    size?: SliderSize;\n    /** Min value of the component */\n    min?: number;\n    /** Max value of the component */\n    max?: number;\n    /** Marks on the slider. It can be either the number of marks on the slider or a list of them */\n    marks?: number | number[];\n    /** Formatter for marks text */\n    markFormat?: FormatterType;\n    /** Value to be added or subtracted on each step the slider makes. This prop will be ignored if available values is set.  */\n    step?: number | null;\n    /** Specifies the tooltip behaviour */\n    tooltipDisplay?: TooltipDisplayType;\n    /** Format of the slider's value in the tooltip. Uses `markFormat` if not specified */\n    tooltipFormat?: FormatterType;\n    /** Indicates that the user cannot interact with the control */\n    disabled?: boolean;\n    /** Text of an error to show */\n    errorMessage?: string;\n    /** Describes the validation state */\n    validationState?: 'invalid';\n    /** Start point of the track. Ignored for range slider */\n    startPoint?: number;\n    /** Inverted view of the slider's track */\n    inverted?: boolean;\n\n    /** Fires when the control gets focus. Provides focus event as a callback's argument */\n    onFocus?: (e: React.FocusEvent<HTMLDivElement>) => void;\n    /** Fires when the control lost focus. Provides focus event as a callback's argument */\n    onBlur?: (e: React.FocusEvent<HTMLDivElement>) => void;\n    /** Fires when the sliderâ€™s value is updated by the user. Provides update event as an callback's argument */\n    onUpdate?: (value: ValueType) => void;\n    /** Fires when ontouchend or onmouseup is triggered. Provides update event as an callback's argument */\n    onUpdateComplete?: (value: ValueType) => void;\n\n    /** The control's autoFocus attribute */\n    autoFocus?: boolean;\n    /** The control's tabIndex attribute */\n    tabIndex?: ValueType;\n    /** Ref to Slider's component props of focus and blur */\n    apiRef?: React.Ref<BaseSliderRefType>;\n    'aria-label'?: string | [string, string];\n    'aria-labelledby'?: string | [string, string];\n    id?: string;\n    /** Name attribute of the hidden input element. */\n    name?: string;\n    form?: string;\n} & DOMProps &\n    QAProps;\n\nexport type SliderInnerState = {\n    max: number;\n    min: number;\n    value?: number | [number, number];\n    defaultValue: number | [number, number];\n} & Pick<RcSliderProps, 'step' | 'range' | 'marks' | 'startPoint'> &\n    Pick<SliderProps, 'tooltipDisplay' | 'tooltipFormat'>;\n\nexport type StateModifiers = {\n    'no-marks': boolean;\n    size: SliderSize;\n    error: boolean;\n    disabled: boolean;\n    rtl: boolean;\n    'tooltip-display': SliderProps['tooltipDisplay'];\n    inverted: boolean;\n    'with-start-point': boolean;\n};\n\nexport type BaseSliderRefType = RcSliderRef;\n\ntype RenderParams = Parameters<Exclude<HandleProps['render'], undefined>>;\n\nexport type HandleWithTooltipProps = {\n    originHandle: RenderParams[0];\n    originHandleProps: RenderParams[1];\n    stateModifiers: StateModifiers;\n} & Pick<SliderProps, 'tooltipFormat'> &\n    Pick<DOMProps, 'className'>;\n"]}