{"version":3,"file":"Palette.js","sourceRoot":"../../../../src","sources":["components/Palette/Palette.tsx"],"names":[],"mappings":"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","sourcesContent":["'use client';\n\nimport * as React from 'react';\n\nimport {useSelect} from '../../hooks';\nimport {useForkRef} from '../../hooks/useForkRef/useForkRef';\nimport type {ButtonProps} from '../Button';\nimport {Button} from '../Button';\nimport type {AriaLabelingProps, DOMProps, QAProps} from '../types';\nimport {block} from '../utils/cn';\nimport {filterDOMProps} from '../utils/filterDOMProps';\n\nimport {usePaletteGrid} from './hooks';\nimport {getPaletteRows} from './utils';\n\nimport './Palette.scss';\n\nconst b = block('palette');\n\nexport type PaletteOption = Pick<ButtonProps, 'disabled' | 'title'> & {\n    /**\n     * Option value, which you can use in state or send to back-end and so on.\n     */\n    value: string;\n    /**\n     * Content inside the option (emoji/image/GIF/symbol etc).\n     *\n     * Uses `value` as default, if `value` is a number, then it is treated as a unicode symbol (emoji for example).\n     *\n     * @default props.value\n     */\n    content?: React.ReactNode;\n};\n\nexport interface PaletteProps\n    extends AriaLabelingProps,\n        Pick<ButtonProps, 'disabled' | 'size'>,\n        DOMProps,\n        QAProps {\n    /**\n     * Allows selecting multiple options.\n     *\n     * @default true\n     */\n    multiple?: boolean;\n    /**\n     * Current value (which options are selected).\n     */\n    value?: string[];\n    /**\n     * The control's default value. Use when the component is not controlled.\n     */\n    defaultValue?: string[];\n    /**\n     * List of Palette options (the grid).\n     */\n    options?: PaletteOption[];\n    /**\n     * How many options are there per row.\n     *\n     * @default 6\n     */\n    columns?: number;\n    /**\n     * HTML class attribute for a grid row.\n     */\n    rowClassName?: string;\n    /**\n     * HTML class attribute for a grid option.\n     */\n    optionClassName?: string;\n    /**\n     * Fires when a user (un)selects an option.\n     */\n    onUpdate?: (value: string[]) => void;\n    /**\n     * Fires when a user focuses on the Palette.\n     */\n    onFocus?: (event: React.FocusEvent) => void;\n    /**\n     * Fires when a user blurs from the Palette.\n     */\n    onBlur?: (event: React.FocusEvent) => void;\n}\n\ninterface PaletteComponent\n    extends React.ForwardRefExoticComponent<PaletteProps & React.RefAttributes<HTMLDivElement>> {}\n\nexport const Palette = React.forwardRef<HTMLDivElement, PaletteProps>(function Palette(props, ref) {\n    const {\n        size = 'm',\n        multiple = true,\n        options = [],\n        columns = 6,\n        disabled,\n        style,\n        className,\n        rowClassName,\n        optionClassName,\n        qa,\n        onFocus,\n        onBlur,\n    } = props;\n\n    const [focusedOptionIndex, setFocusedOptionIndex] = React.useState<number | undefined>(\n        undefined,\n    );\n    const focusedOption =\n        focusedOptionIndex === undefined ? undefined : options[focusedOptionIndex];\n\n    const innerRef = React.useRef<HTMLDivElement>(null);\n    const handleRef = useForkRef(ref, innerRef);\n\n    const {value, handleSelection} = useSelect({\n        value: props.value,\n        defaultValue: props.defaultValue,\n        multiple,\n        onUpdate: props.onUpdate,\n    });\n\n    const rows = React.useMemo(() => getPaletteRows(options, columns), [columns, options]);\n\n    const focusOnOptionWithIndex = React.useCallback((index: number) => {\n        if (!innerRef.current) return;\n\n        const $options = Array.from(\n            innerRef.current.querySelectorAll(`.${b('option')}`),\n        ) as HTMLButtonElement[];\n\n        if (!$options[index]) return;\n\n        $options[index].focus();\n\n        setFocusedOptionIndex(index);\n    }, []);\n\n    const tryToFocus = (newIndex: number) => {\n        if (newIndex === focusedOptionIndex || newIndex < 0 || newIndex >= options.length) {\n            return;\n        }\n\n        focusOnOptionWithIndex(newIndex);\n    };\n\n    const gridProps = usePaletteGrid({\n        disabled,\n        onFocus: (event) => {\n            focusOnOptionWithIndex(0);\n            onFocus?.(event);\n        },\n        onBlur: (event) => {\n            setFocusedOptionIndex(undefined);\n            onBlur?.(event);\n        },\n        whenFocused:\n            focusedOptionIndex !== undefined && focusedOption\n                ? {\n                      selectItem: () => handleSelection(focusedOption),\n                      nextItem: () => tryToFocus(focusedOptionIndex + 1),\n                      previousItem: () => tryToFocus(focusedOptionIndex - 1),\n                      nextRow: () => tryToFocus(focusedOptionIndex + columns),\n                      previousRow: () => tryToFocus(focusedOptionIndex - columns),\n                  }\n                : undefined,\n    });\n\n    return (\n        <div\n            {...filterDOMProps(props, {labelable: true})}\n            {...gridProps}\n            ref={handleRef}\n            className={b({size}, className)}\n            style={style}\n            data-qa={qa}\n        >\n            {rows.map((row, rowNumber) => (\n                <div className={b('row', rowClassName)} key={`row-${rowNumber}`} role=\"row\">\n                    {row.map((option) => {\n                        const isSelected = Boolean(value.includes(option.value));\n                        const focused = option === focusedOption;\n\n                        return (\n                            <div\n                                key={option.value}\n                                role=\"gridcell\"\n                                aria-selected={focused ? 'true' : undefined}\n                                aria-readonly={option.disabled}\n                            >\n                                <Button\n                                    className={b('option', optionClassName)}\n                                    tabIndex={-1}\n                                    style={style}\n                                    disabled={disabled || option.disabled}\n                                    title={option.title}\n                                    view={isSelected ? 'normal' : 'flat'}\n                                    selected={isSelected}\n                                    value={option.value}\n                                    size={size}\n                                    onClick={() => handleSelection(option)}\n                                >\n                                    <Button.Icon>{option.content ?? option.value}</Button.Icon>\n                                </Button>\n                            </div>\n                        );\n                    })}\n                </div>\n            ))}\n        </div>\n    );\n}) as PaletteComponent;\n\nPalette.displayName = 'Palette';\n"]}