{"version":3,"file":"Card.js","sourceRoot":"../../../../src","sources":["components/Card/Card.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,EAAC,iBAAiB,EAAC,6BAAoB;AAC9C,OAAO,EAAC,GAAG,EAAC,2BAAkB;AAE9B,OAAO,EAAC,KAAK,EAAC,uBAAoB;AAElC,oBAAqB;AAErB,MAAM,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC;AA4BxB,MAAM,CAAC,MAAM,IAAI,GAAG,KAAK,CAAC,UAAU,CAA4B,SAAS,IAAI,CAAC,KAAK,EAAE,GAAG;IACpF,MAAM,EACF,IAAI,GAAG,WAAW,EAClB,KAAK,EACL,IAAI,EACJ,IAAI,GAAG,GAAG,EACV,QAAQ,EACR,SAAS,EACT,OAAO,EACP,QAAQ,EACR,QAAQ,EACR,GAAG,SAAS,EACf,GAAG,KAAK,CAAC;IAEV,MAAM,YAAY,GAAG,IAAI,KAAK,QAAQ,CAAC;IACvC,MAAM,eAAe,GAAG,IAAI,KAAK,WAAW,CAAC;IAC7C,MAAM,eAAe,GAAG,IAAI,KAAK,WAAW,CAAC;IAE7C,0FAA0F;IAC1F,MAAM,SAAS,GAAG,YAAY,IAAI,eAAe,CAAC;IAClD,MAAM,WAAW,GAAG,SAAS,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC;IAE/D,sCAAsC;IACtC,MAAM,YAAY,GAAG,eAAe,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC;IAC5D,qDAAqD;IACrD,MAAM,WAAW,GAAG,eAAe,IAAI,eAAe,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,SAAS,CAAC;IAEhF,MAAM,WAAW,GAAG,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC;IACtD,MAAM,EAAC,SAAS,EAAC,GAAG,iBAAiB,CAAC,OAAO,CAAC,CAAC;IAE/C,OAAO,CACH,KAAC,GAAG,IACA,GAAG,EAAE,GAAG,EACR,IAAI,EAAE,WAAW,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS,EACxC,SAAS,EAAE,CAAC,CACR;YACI,KAAK,EAAE,KAAK,IAAI,YAAY;YAC5B,IAAI,EAAE,IAAI,IAAI,WAAW;YACzB,IAAI;YACJ,QAAQ;YACR,IAAI;YACJ,QAAQ;YACR,SAAS,EAAE,WAAW;SACzB,EACD,SAAS,CACZ,EACD,OAAO,EAAE,WAAkC,EAC3C,SAAS,EAAE,WAAW,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,EAC9C,QAAQ,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,KACjC,SAAS,YAEZ,QAAQ,GACP,CACT,CAAC;AACN,CAAC,CAAC,CAAC","sourcesContent":["'use client';\n\nimport * as React from 'react';\n\nimport {useActionHandlers} from '../../hooks';\nimport {Box} from '../layout';\nimport type {BoxProps} from '../layout';\nimport {block} from '../utils/cn';\n\nimport './Card.scss';\n\nconst b = block('card');\n\ntype SelectionCardView = 'outlined' | 'clear';\ntype ContainerCardView = 'outlined' | 'filled' | 'raised';\n\nexport type CardType = 'selection' | 'action' | 'container';\nexport type CardTheme = 'normal' | 'info' | 'success' | 'warning' | 'danger' | 'utility';\nexport type CardView = SelectionCardView | ContainerCardView;\nexport type CardSize = 'm' | 'l';\n\nexport interface CardProps extends Omit<BoxProps<'div'>, 'as' | 'onClick'> {\n    children: React.ReactNode;\n    /** Card click handler. Available for type: 'selection', 'action' */\n    onClick?: (event: React.MouseEvent<HTMLDivElement>) => void;\n    /** Disabled card. Available for type: 'selection', 'action' */\n    disabled?: boolean;\n    /** Selected card. Available for type: 'selection' */\n    selected?: boolean;\n    /** Card's type affects on available properties */\n    type?: CardType;\n    /** Available for type: 'container' and 'selection' */\n    view?: CardView;\n    /** Card's base color. Available for type: 'container' */\n    theme?: CardTheme;\n    /** Card's size affects on available properties*/\n    size?: CardSize;\n}\n\nexport const Card = React.forwardRef<HTMLDivElement, CardProps>(function Card(props, ref) {\n    const {\n        type = 'container',\n        theme,\n        view,\n        size = 'm',\n        children,\n        className,\n        onClick,\n        disabled,\n        selected,\n        ...restProps\n    } = props;\n\n    const isTypeAction = type === 'action';\n    const isTypeSelection = type === 'selection';\n    const isTypeContainer = type === 'container';\n\n    /* Clickable card â€” only with type 'action' or 'selection' and not selected or disabled */\n    const hasAction = isTypeAction || isTypeSelection;\n    const isClickable = hasAction && Boolean(onClick) && !disabled;\n\n    /* Theme only with type 'container' */\n    const defaultTheme = isTypeContainer ? 'normal' : undefined;\n    /* View only with type 'container' and 'selection' */\n    const defaultView = isTypeContainer || isTypeSelection ? 'outlined' : undefined;\n\n    const handleClick = isClickable ? onClick : undefined;\n    const {onKeyDown} = useActionHandlers(onClick);\n\n    return (\n        <Box\n            ref={ref}\n            role={isClickable ? 'button' : undefined}\n            className={b(\n                {\n                    theme: theme || defaultTheme,\n                    view: view || defaultView,\n                    type,\n                    selected,\n                    size,\n                    disabled,\n                    clickable: isClickable,\n                },\n                className,\n            )}\n            onClick={handleClick as BoxProps['onClick']}\n            onKeyDown={isClickable ? onKeyDown : undefined}\n            tabIndex={isClickable ? 0 : undefined}\n            {...restProps}\n        >\n            {children}\n        </Box>\n    );\n});\n"]}