{"version":3,"file":"useObserveIntersection.js","sourceRoot":"../../../../../../src","sources":["components/ActionsPanel/components/hooks/useObserveIntersection.ts"],"names":[],"mappings":"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","sourcesContent":["'use client';\n\nimport * as React from 'react';\n\nimport {useDirection} from '../../../theme';\n\nimport type {VisibilityMap} from './types';\n\nexport const OBSERVER_TARGET_ATTR = 'data-observer-id';\nconst GAP = 4;\n\nexport const useObserveIntersection = (updateObserveKey: string) => {\n    const direction = useDirection();\n    const parentRef = React.useRef<HTMLDivElement>(null);\n    const [visibilityMap, setVisibilityMap] = React.useState<VisibilityMap>({});\n    const [offset, setOffset] = React.useState(0);\n\n    const handleIntersection = React.useCallback(\n        (entries: IntersectionObserverEntry[]) => {\n            const updatedEntries: VisibilityMap = {};\n            let newOffest = 0;\n            let lastVisibleEntry: IntersectionObserverEntry | undefined;\n            let firstInvisible: IntersectionObserverEntry | undefined;\n            entries.forEach((entry) => {\n                const targetId = entry.target.getAttribute(OBSERVER_TARGET_ATTR);\n                if (!targetId) {\n                    return;\n                }\n                if (entry.isIntersecting) {\n                    lastVisibleEntry = entry;\n                    updatedEntries[targetId] = true;\n                } else {\n                    if (!firstInvisible) {\n                        firstInvisible = entry;\n                    }\n                    updatedEntries[targetId] = false;\n                }\n            });\n\n            const parentRect = parentRef.current?.getBoundingClientRect();\n\n            if (parentRect && firstInvisible) {\n                const rect = firstInvisible.target.getBoundingClientRect();\n                newOffest =\n                    direction === 'ltr'\n                        ? rect.left - parentRect.left\n                        : parentRect.right - rect.right;\n            } else if (parentRect && lastVisibleEntry) {\n                const rect = lastVisibleEntry.target.getBoundingClientRect();\n                newOffest =\n                    direction === 'ltr'\n                        ? rect.right - parentRect.left + GAP\n                        : parentRect.right - rect.left + GAP;\n            }\n\n            setVisibilityMap((prev) => ({\n                ...prev,\n                ...updatedEntries,\n            }));\n\n            setOffset(newOffest);\n        },\n        [direction],\n    );\n\n    React.useEffect(() => {\n        setVisibilityMap({});\n\n        const observer = new IntersectionObserver(handleIntersection, {\n            root: parentRef.current,\n            threshold: 1,\n        });\n\n        Array.from(parentRef.current?.children || []).forEach((item) => {\n            if (item.hasAttribute(OBSERVER_TARGET_ATTR)) {\n                observer.observe(item);\n            }\n        });\n\n        return () => observer.disconnect();\n    }, [handleIntersection, updateObserveKey]);\n\n    return {parentRef, visibilityMap, offset};\n};\n"]}