{"version":3,"file":"getItemRenderState.js","sourceRoot":"../../../../../src","sources":["components/useList/utils/getItemRenderState.tsx"],"names":[],"mappings":";;;AAWA,sDAA8C;AAc9C;;GAEG;AACI,MAAM,kBAAkB,GAAG,CAAK,EACnC,EAAE,EACF,IAAI,EACJ,WAAW,EACX,yBAAyB,EACzB,IAAI,GAAG,GAAG,EACV,QAAQ,GAAG,KAAK,EAChB,EAAE,GACiB,EAAE,EAAE;IACvB,MAAM,OAAO,GAA6B;QACtC,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,CAAC;QAChC,GAAG,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE,CAAC;QACjC,UAAU,EACN,EAAE,KAAK,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC;KAC3F,CAAC;IAEF,MAAM,KAAK,GAA4B;QACnC,EAAE;QACF,IAAI;QACJ,QAAQ,EAAE,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;QAC9C,QAAQ,EAAE,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC,EAAE,CAAC,CAAC;QAChD,MAAM,EAAE,EAAE,KAAK,IAAI,CAAC,KAAK,CAAC,YAAY;QACtC,OAAO,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,CAAuB,EAAE,EAAE,CAAC,WAAW,CAAC,EAAC,EAAE,EAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS;QACpF,iBAAiB,EAAE,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,QAAQ,EAAE,uCAAuC;QAC7H,OAAO,EAAE;YACL,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC,EAAE,CAAC;YACvC,WAAW,EAAE,OAAO,CAAC,WAAW;YAChC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY,IAAI,EAAE,IAAI,IAAI,CAAC,KAAK,CAAC,YAAY;YACjE,GAAG,yBAAyB,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;SAC7D;KACJ,CAAC;IAEF,IAAI,EAAE,EAAE,CAAC;QACL,KAAK,CAAC,EAAE,GAAG,IAAA,6BAAa,EAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IACrC,CAAC;IAED,OAAO,EAAC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,OAAO,EAAC,CAAC;AAChE,CAAC,CAAC;AArCW,QAAA,kBAAkB,sBAqC7B","sourcesContent":["import type {QAProps} from '../../types';\nimport type {ListItemViewCommonProps} from '../components/ListItemView';\nimport type {\n    ListItemId,\n    ListItemListContextProps,\n    ListItemSize,\n    ListItemViewContentType,\n    ListOnItemClick,\n    UseListResult,\n} from '../types';\n\nimport {getListItemQa} from './getListItemQa';\n\ntype ItemRendererProps<T> = QAProps & {\n    size?: ListItemSize;\n    /**\n     * Affects the view of the selected items\n     */\n    multiple?: boolean;\n    id: ListItemId;\n    mapItemDataToContentProps(data: T): ListItemViewContentType;\n    onItemClick?: ListOnItemClick;\n    list: UseListResult<T>;\n};\n\n/**\n * Map list state and parsed list state to item render props\n */\nexport const getItemRenderState = <T,>({\n    qa,\n    list,\n    onItemClick,\n    mapItemDataToContentProps,\n    size = 'm',\n    multiple = false,\n    id,\n}: ItemRendererProps<T>) => {\n    const context: ListItemListContextProps = {\n        ...list.structure.itemsState[id],\n        ...list.structure.groupsState[id],\n        isLastItem:\n            id === list.structure.visibleFlattenIds[list.structure.visibleFlattenIds.length - 1],\n    };\n\n    const props: ListItemViewCommonProps = {\n        id,\n        size,\n        selected: Boolean(list.state.selectedById[id]),\n        disabled: Boolean(list.state.disabledById?.[id]),\n        active: id === list.state.activeItemId,\n        onClick: onItemClick ? (e: React.SyntheticEvent) => onItemClick({id}, e) : undefined,\n        selectionViewType: Boolean(multiple) && !context.childrenIds ? 'multiple' : 'single', // no multiple selection at group nodes\n        content: {\n            expanded: list.state.expandedById?.[id],\n            indentation: context.indentation,\n            isGroup: list.state.expandedById && id in list.state.expandedById,\n            ...mapItemDataToContentProps(list.structure.itemsById[id]),\n        },\n    };\n\n    if (qa) {\n        props.qa = getListItemQa(qa, id);\n    }\n\n    return {data: list.structure.itemsById[id], props, context};\n};\n"]}