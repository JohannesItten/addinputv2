{"version":3,"file":"SegmentedRadioGroupOption.js","sourceRoot":"../../../../src","sources":["components/SegmentedRadioGroup/SegmentedRadioGroupOption.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,EAAC,iBAAiB,EAAE,QAAQ,EAAC,qCAA4B;AAEhE,OAAO,EAAC,KAAK,EAAC,uBAAoB;AAClC,OAAO,EAAC,MAAM,EAAE,KAAK,EAAC,2BAAwB;AAE9C,MAAM,CAAC,GAAG,KAAK,CAAC,uBAAuB,CAAC,CAAC;AAczC,MAAM,CAAC,MAAM,yBAAyB,GAAG,KAAK,CAAC,UAAU,CAAC,SAAS,yBAAyB,CAE1F,KAAwC,EAAE,GAAyC;IACjF,MAAM,iBAAiB,GAAG,KAAK,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC;IAE9D,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACrB,MAAM,IAAI,KAAK,CAAC,wEAAwE,CAAC,CAAC;IAC9F,CAAC;IAED,MAAM,EAAC,IAAI,EAAE,YAAY,EAAE,QAAQ,EAAE,eAAe,EAAE,QAAQ,EAAC,GAAG,iBAAiB,CAAC;IAEpF,MAAM,EAAC,QAAQ,EAAE,YAAY,EAAE,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAC,GAAG,KAAK,CAAC;IACxE,MAAM,QAAQ,GAAG,eAAe,IAAI,YAAY,CAAC;IACjD,MAAM,EAAC,OAAO,EAAE,UAAU,EAAC,GAAG,QAAQ,CAAC;QACnC,GAAG,KAAK;QACR,IAAI;QACJ,QAAQ;QACR,OAAO,EAAE,KAAK,KAAK,YAAY;QAC/B,QAAQ;KACX,CAAC,CAAC;IACH,MAAM,KAAK,GAAG,OAAO,IAAI,QAAQ,CAAC;IAClC,MAAM,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;IAE3C,OAAO,CACH,iBACI,SAAS,EAAE,CAAC,CAAC,QAAQ,EAAE;YACnB,QAAQ;YACR,OAAO;SACV,CAAC,EACF,GAAG,EAAE,GAAG,EACR,KAAK,EAAE,KAAK,aAEZ,mBAAW,UAAU,EAAE,SAAS,EAAE,CAAC,CAAC,gBAAgB,CAAC,GAAI,EACxD,KAAK,IAAI,eAAM,SAAS,EAAE,CAAC,CAAC,aAAa,EAAE,EAAC,IAAI,EAAC,CAAC,YAAG,KAAK,GAAQ,IAC/D,CACX,CAAC;AACN,CAAC,CAAsD,CAAC","sourcesContent":["'use client';\n\nimport * as React from 'react';\n\nimport {RadioGroupContext, useRadio} from '../../hooks/private';\nimport type {ControlProps} from '../types';\nimport {block} from '../utils/cn';\nimport {isIcon, isSvg} from '../utils/common';\n\nconst b = block('segmented-radio-group');\n\nexport interface SegmentedRadioGroupOptionProps<ValueType extends string = string>\n    extends ControlProps {\n    value: ValueType;\n    content?: React.ReactNode;\n    children?: React.ReactNode;\n    title?: string;\n}\n\ntype SegmentedRadioGroupOptionComponentType = <T extends string = string>(\n    props: SegmentedRadioGroupOptionProps<T>,\n) => React.JSX.Element;\n\nexport const SegmentedRadioGroupOption = React.forwardRef(function SegmentedRadioGroupOption<\n    T extends string,\n>(props: SegmentedRadioGroupOptionProps<T>, ref: React.ForwardedRef<HTMLLabelElement>) {\n    const radioGroupContext = React.useContext(RadioGroupContext);\n\n    if (!radioGroupContext) {\n        throw new Error('<SegmentedRadioGroup.Option> must be used within <SegmentedRadioGroup>');\n    }\n\n    const {name, currentValue, disabled: disabledContext, onChange} = radioGroupContext;\n\n    const {disabled: disabledProp, content, children, title, value} = props;\n    const disabled = disabledContext || disabledProp;\n    const {checked, inputProps} = useRadio({\n        ...props,\n        name,\n        disabled,\n        checked: value === currentValue,\n        onChange,\n    });\n    const inner = content || children;\n    const icon = isIcon(inner) || isSvg(inner);\n\n    return (\n        <label\n            className={b('option', {\n                disabled,\n                checked,\n            })}\n            ref={ref}\n            title={title}\n        >\n            <input {...inputProps} className={b('option-control')} />\n            {inner && <span className={b('option-text', {icon})}>{inner}</span>}\n        </label>\n    );\n}) as unknown as SegmentedRadioGroupOptionComponentType;\n"]}