{"version":3,"file":"Hotkey.js","sourceRoot":"../../../../src","sources":["components/Hotkey/Hotkey.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;AA+Eb,oCAIC;;;AAjFD,qDAA+B;AAG/B,uCAAkC;AAClC,+DAAuD;AAEvD,kDAA6C;AAC7C,sCAAuC;AAEvC,sCAA8B;AAE9B,wBAAuB;AAEvB,MAAM,CAAC,GAAG,IAAA,UAAK,EAAC,QAAQ,CAAC,CAAC;AAE1B,MAAM,MAAM,GAAG;IACX,aAAa,EAAE,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,SAAS;IAClD,WAAW,EAAE,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,wBAAwB;CACnE,CAAC;AAeW,QAAA,MAAM,GAAG,KAAK,CAAC,UAAU,CAA2B,SAAS,MAAM,CAAC,KAAK,EAAE,GAAG;IACvF,MAAM,EAAC,KAAK,EAAE,QAAQ,EAAE,IAAI,GAAG,OAAO,EAAE,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,SAAS,EAAC,GAAG,KAAK,CAAC;IAEpF,MAAM,MAAM,GAAG,YAAY,CAAC,KAAK,EAAE,EAAC,QAAQ,EAAC,CAAC,CAAC;IAC/C,MAAM,OAAO,GAAsB,EAAE,CAAC;IAEtC,IAAI,SAAS,GAAG,KAAK,CAAC;IACtB,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,QAAQ,EAAE,EAAE;QAC9B,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC;YAAE,OAAO;QAC9B,IAAI,SAAS,EAAE,CAAC;YACZ,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;QACvC,CAAC;aAAM,CAAC;YACJ,SAAS,GAAG,IAAI,CAAC;QACrB,CAAC;QACD,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,MAAM,EAAE,EAAE;YACzB,MAAM,UAAU,GAAG,MAAM,KAAK,CAAC,CAAC;YAChC,IAAI,CAAC,UAAU,EAAE,CAAC;gBACd,OAAO,CAAC,IAAI,CACR,MAAM,CAAC,WAAW,EAClB,iCAAgD,SAAS,EAAE,CAAC,CAAC,MAAM,CAAC,mBAAzD,GAAG,GAAG,IAAI,QAAQ,IAAI,MAAM,OAAO,CAEvC,EACP,MAAM,CAAC,WAAW,CACrB,CAAC;YACN,CAAC;YACD,OAAO,CAAC,IAAI,CAAC,0CAA2C,GAAG,IAApC,GAAG,GAAG,IAAI,QAAQ,IAAI,MAAM,EAAE,CAAa,CAAC,CAAC;QACxE,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC;QAAE,OAAO,IAAI,CAAC;IAEtC,OAAO,CACH,mCACQ,IAAA,+BAAc,EAAC,SAAS,EAAE,EAAC,SAAS,EAAE,IAAI,EAAC,CAAC,EAChD,GAAG,EAAE,GAAG,EACR,KAAK,EAAE,KAAK,aACH,EAAE,EACX,SAAS,EAAE,CAAC,CAAC,EAAC,IAAI,EAAC,EAAE,SAAS,CAAC,YAE9B,OAAO,GACN,CACT,CAAC;AACN,CAAC,CAAC,CAAC;AAEH,SAAgB,YAAY,CAAC,KAAa,EAAE,IAA2B;IACnE,MAAM,QAAQ,GAAa,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAA,aAAK,GAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IACrE,MAAM,IAAI,GAAG,4BAAc,CAAC,QAAQ,CAAC,CAAC;IACtC,OAAO,IAAA,sBAAc,EAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AACvC,CAAC","sourcesContent":["'use client';\n\nimport * as React from 'react';\n\nimport type {AriaLabelingProps, DOMProps, QAProps} from '../types';\nimport {block} from '../utils/cn';\nimport {filterDOMProps} from '../utils/filterDOMProps';\n\nimport {defsByPlatform} from './definitions';\nimport {parseKeyGroups} from './parse';\nimport type {Platform} from './types';\nimport {isMac} from './utils';\n\nimport './Hotkey.scss';\n\nconst b = block('hotkey');\n\nconst Spaces = {\n    BetweenGroups: String.fromCharCode(160), // &nbsp;\n    BetweenKeys: String.fromCharCode(8239), // Narrow No-Break Space\n};\n\nexport interface HotkeyProps extends AriaLabelingProps, DOMProps, QAProps {\n    /**\n     * @example\n     * 'mod+a mod+c mod+v'\n     */\n    value: string;\n    /**\n     * @default light\n     */\n    view?: 'light' | 'dark';\n    platform?: Platform;\n}\n\nexport const Hotkey = React.forwardRef<HTMLElement, HotkeyProps>(function Hotkey(props, ref) {\n    const {value, platform, view = 'light', qa, style, className, ...restProps} = props;\n\n    const groups = parseHotkeys(value, {platform});\n    const content: React.ReactNode[] = [];\n\n    let hasGroups = false;\n    groups.forEach((keys, groupIdx) => {\n        if (keys.length === 0) return;\n        if (hasGroups) {\n            content.push(Spaces.BetweenGroups);\n        } else {\n            hasGroups = true;\n        }\n        keys.forEach((key, keyIdx) => {\n            const isFirstKey = keyIdx === 0;\n            if (!isFirstKey) {\n                content.push(\n                    Spaces.BetweenKeys,\n                    <span key={`${key}_${groupIdx}_${keyIdx}_plus`} className={b('plus')}>\n                        +\n                    </span>,\n                    Spaces.BetweenKeys,\n                );\n            }\n            content.push(<kbd key={`${key}_${groupIdx}_${keyIdx}`}>{key}</kbd>);\n        });\n    });\n\n    if (content.length === 0) return null;\n\n    return (\n        <kbd\n            {...filterDOMProps(restProps, {labelable: true})}\n            ref={ref}\n            style={style}\n            data-qa={qa}\n            className={b({view}, className)}\n        >\n            {content}\n        </kbd>\n    );\n});\n\nexport function parseHotkeys(value: string, opts: {platform?: Platform}): string[][] {\n    const platform: Platform = opts.platform ?? (isMac() ? 'mac' : 'pc');\n    const defs = defsByPlatform[platform];\n    return parseKeyGroups(defs, value);\n}\n"]}