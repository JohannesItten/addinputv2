{"version":3,"file":"StepperItem.js","sourceRoot":"../../../../src","sources":["components/Stepper/StepperItem.tsx"],"names":[],"mappings":";;;;;AAAA,qDAA+B;AAE/B,6CAA+E;AAE/E,+CAAiC;AAEjC,2CAA6B;AAG7B,0CAA4C;AAE5C,sCAA0B;AAYb,QAAA,WAAW,GAAG,KAAK,CAAC,UAAU,CAAsC,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;IAC5F,MAAM,EACF,EAAE,EACF,QAAQ,EACR,IAAI,GAAG,MAAM,EACb,QAAQ,GAAG,KAAK,EAChB,SAAS,EACT,IAAI,EAAE,UAAU,EAChB,GAAG,eAAe,EACrB,GAAG,KAAK,CAAC;IAEV,MAAM,EAAC,QAAQ,EAAE,KAAK,EAAE,IAAI,EAAC,GAAG,IAAA,2BAAiB,GAAE,CAAC;IAEpD,MAAM,OAAO,GAAG,CAAC,CAAmB,EAAE,EAAE;QACpC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;QAEnB,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC;IACnB,CAAC,CAAC;IAEF,MAAM,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE;QAC5B,IAAI,UAAU,EAAE,CAAC;YACb,OAAO,UAAU,CAAC;QACtB,CAAC;QAED,QAAQ,IAAI,EAAE,CAAC;YACX,KAAK,MAAM,CAAC,CAAC,CAAC;gBACV,OAAO,oBAAY,CAAC;YACxB,CAAC;YACD,KAAK,OAAO,CAAC,CAAC,CAAC;gBACX,OAAO,yBAAiB,CAAC;YAC7B,CAAC;YACD,KAAK,SAAS,CAAC,CAAC,CAAC;gBACb,OAAO,mBAAW,CAAC;YACvB,CAAC;YACD,OAAO,CAAC,CAAC,CAAC;gBACN,OAAO,oBAAY,CAAC;YACxB,CAAC;QACL,CAAC;IACL,CAAC,EAAE,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC,CAAC;IAEvB,MAAM,YAAY,GAAG,EAAE,KAAK,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,KAAK,CAAC;IAE7D,OAAO,CACH,wBAAC,eAAM,IACH,GAAG,EAAE,GAAG,EACR,KAAK,EAAE,OAAO,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS,KACtD,eAAe,EACnB,KAAK,EAAC,MAAM,EACZ,SAAS,EAAE,IAAA,SAAC,EAAC,MAAM,EAAE,EAAC,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,YAAY,EAAE,IAAI,EAAC,EAAE,SAAS,CAAC,EAC/E,OAAO,EAAE,OAAO,EAChB,QAAQ,EAAE,QAAQ,EAClB,IAAI,EAAE,IAAI,EACV,IAAI,EAAC,UAAU,aAEf,uBAAC,WAAI,IAAC,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,IAAA,SAAC,EAAC,WAAW,EAAE,EAAC,IAAI,EAAC,CAAC,GAAI,EACtD,QAAQ,IACJ,CACZ,CAAC;AACN,CAAC,CAAC,CAAC;AAEH,mBAAW,CAAC,WAAW,GAAG,aAAa,CAAC","sourcesContent":["import * as React from 'react';\n\nimport {CircleCheck, CircleDashed, CircleExclamation} from '@gravity-ui/icons';\n\nimport {Button} from '../Button';\nimport type {ButtonButtonProps} from '../Button';\nimport {Icon} from '../Icon';\nimport type {SVGIconData} from '../Icon/types';\n\nimport {useStepperContext} from './context';\nimport type {StepperItemView} from './types';\nimport {b} from './utils';\n\nexport type StepperItemProps = Omit<ButtonButtonProps, 'view'> & {\n    id?: string | number;\n    children: React.ReactNode;\n    view?: StepperItemView;\n    disabled?: boolean;\n    icon?: SVGIconData;\n    onClick?: (event: React.MouseEvent) => void;\n    className?: string;\n};\n\nexport const StepperItem = React.forwardRef<HTMLButtonElement, StepperItemProps>((props, ref) => {\n    const {\n        id,\n        children,\n        view = 'idle',\n        disabled = false,\n        className,\n        icon: customIcon,\n        ...restButtonProps\n    } = props;\n\n    const {onUpdate, value, size} = useStepperContext();\n\n    const onClick = (e: React.MouseEvent) => {\n        props.onClick?.(e);\n\n        onUpdate?.(id);\n    };\n\n    const icon = React.useMemo(() => {\n        if (customIcon) {\n            return customIcon;\n        }\n\n        switch (view) {\n            case 'idle': {\n                return CircleDashed;\n            }\n            case 'error': {\n                return CircleExclamation;\n            }\n            case 'success': {\n                return CircleCheck;\n            }\n            default: {\n                return CircleDashed;\n            }\n        }\n    }, [view, customIcon]);\n\n    const selectedItem = id === undefined ? false : id === value;\n\n    return (\n        <Button\n            ref={ref}\n            title={typeof children === 'string' ? children : undefined}\n            {...restButtonProps}\n            width=\"auto\"\n            className={b('item', {view, disabled, selected: selectedItem, size}, className)}\n            onClick={onClick}\n            disabled={disabled}\n            size={size}\n            view=\"outlined\"\n        >\n            <Icon data={icon} className={b('item-icon', {view})} />\n            {children}\n        </Button>\n    );\n});\n\nStepperItem.displayName = 'StepperItem';\n"]}