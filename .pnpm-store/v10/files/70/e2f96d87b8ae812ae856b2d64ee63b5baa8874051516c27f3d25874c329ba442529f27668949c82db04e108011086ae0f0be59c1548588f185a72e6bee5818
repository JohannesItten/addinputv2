{"version":3,"file":"addComponentKeysets.js","sourceRoot":"../../../src","sources":["i18n/addComponentKeysets.ts"],"names":[],"mappings":";;AAsBA,kDAeC;AAnCD,oCAA4B;AAE5B;;;;;;;;;;;;;;;;;GAiBG;AACH,SAAgB,mBAAmB,CAC/B,IAAuB,EACvB,aAAmB;IAEnB,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,WAAI,CAAC,cAAc,CAAC,IAAI,EAAE,aAAa,EAAE,IAAI,CAAC,CAAC,CAAC;IAG/F,MAAM,CAAC,GAAG,WAAI,CAAC,MAAM,CAAO,aAAa,CAAC,CAAC;IAE3C,OAAO,CAKN,CAAC;AACN,CAAC","sourcesContent":["import type {KeyData, KeysData} from '@gravity-ui/i18n';\n\nimport {i18n} from './i18n';\n\n/**\n * Add component's keysets data\n *\n * @param data - keysets data by languages\n * @param componentName - name of the component\n * @returns function to get keys' translations for current language\n *\n * @example\n * ```\n * import {addComponentKeysets} from '@gravity-ui/uikit/i18n';\n * import en from './en.json';\n * import ru from './ru.json';\n *\n * const t = addComponentKeysets({en, ru}, 'Alert');\n *\n * console.log(t('label_close')); // 'Close'\n * ```\n */\nexport function addComponentKeysets<const T extends KeysData, const Name extends string>(\n    data: Record<string, T>,\n    componentName: Name,\n) {\n    Object.entries(data).forEach(([lang, keys]) => i18n.registerKeyset(lang, componentName, keys));\n\n    type TKey = Extract<keyof T, string>;\n    const t = i18n.keyset<TKey>(componentName);\n\n    return t as typeof t & {\n        /**\n         * Keyset data is used only for type inference, the value is always undefined.\n         */\n        keysetData: {[Key in Name]: Record<TKey, KeyData>};\n    };\n}\n"]}