{"version":3,"file":"Box.js","sourceRoot":"../../../../../src","sources":["components/layout/Box/Box.tsx"],"names":[],"mappings":";;;;;AAAA,qDAA+B;AAG/B,0CAAqC;AAErC,mDAAsC;AAEtC,qBAAoB;AAEpB,MAAM,CAAC,GAAG,IAAA,UAAK,EAAC,KAAK,CAAC,CAAC;AAuCvB;;;;;;;;;;GAUG;AACU,QAAA,GAAG,GAAG,KAAK,CAAC,UAAU,CAAC,SAAS,GAAG,CAC5C,EACI,EAAE,EACF,QAAQ,EACR,EAAE,EACF,SAAS,EACT,KAAK,EACL,MAAM,EACN,QAAQ,EACR,SAAS,EACT,SAAS,EACT,QAAQ,EACR,QAAQ,EACR,KAAK,EAAE,UAAU,EACjB,OAAO,EACP,QAAQ,EACR,GAAG,KAAK,EACE,EACd,GAAe;IAEf,MAAM,GAAG,GAAsB,EAAE,IAAI,KAAK,CAAC;IAE3C,MAAM,KAAK,GAAwB;QAC/B,KAAK;QACL,MAAM;QACN,QAAQ;QACR,SAAS;QACT,SAAS;QACT,QAAQ;QACR,QAAQ;QACR,GAAG,UAAU;KAChB,CAAC;IAEF,OAAO,CACH,uBAAC,GAAG,OACI,KAAK,aACA,EAAE,EACX,KAAK,EAAE,KAAK,EACZ,GAAG,EAAE,GAAG,EACR,SAAS,EAAE,CAAC,CAAC,EAAC,QAAQ,EAAC,EAAE,OAAO,CAAC,CAAC,CAAC,IAAA,YAAE,EAAC,OAAO,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,YAErE,QAAQ,GACP,CACT,CAAC;AACN,CAAC,CAE+C,CAAC","sourcesContent":["import * as React from 'react';\n\nimport type {QAProps} from '../../types';\nimport {block} from '../../utils/cn';\nimport type {SpacingProps} from '../spacing/spacing';\nimport {sp} from '../spacing/spacing';\n\nimport './Box.scss';\n\nconst b = block('box');\n\nexport interface BoxProps<T extends React.ElementType = 'div'>\n    extends QAProps,\n        React.HTMLAttributes<T>,\n        React.PropsWithChildren<\n            Pick<\n                React.CSSProperties,\n                | 'width'\n                | 'height'\n                | 'maxHeight'\n                | 'maxWidth'\n                | 'minHeight'\n                | 'minWidth'\n                | 'position'\n            >\n        > {\n    as?: T;\n    /**\n     * Add overflow css properties to container\n     */\n    overflow?: 'hidden' | 'x' | 'y' | 'auto';\n    className?: string;\n    /**\n     * All spacing shortcut properties available here.\n     * ```tsx\n     * <Box spacing={{mr: 3, pb: 2}}>...<Box>\n     * // margin-right: 12px\n     * // padding-bottom: 8px\n     * ```\n     */\n    spacing?: SpacingProps;\n}\n\ntype BoxRef<C extends React.ElementType> = React.ComponentPropsWithRef<C>['ref'];\n\ntype BoxPropsWithTypedAttrs<T extends React.ElementType> = BoxProps<T> &\n    Omit<React.ComponentPropsWithoutRef<T>, keyof BoxProps<T>>;\n\n/**\n * Basic block to build other components and for standalone usage as a smart block with build in support of most usable css properties and shortcut `spacing` properties.\n * ```tsx\n * <Box width={300} height={200} spacing={{mb: 2}}>\n *      some content\n * </Box>\n * <Box width={300} height={200} >\n *      some content\n * </Box>\n * ```\n */\nexport const Box = React.forwardRef(function Box<T extends React.ElementType = 'div'>(\n    {\n        as,\n        children,\n        qa,\n        className,\n        width,\n        height,\n        minWidth,\n        minHeight,\n        maxHeight,\n        maxWidth,\n        position,\n        style: outerStyle,\n        spacing,\n        overflow,\n        ...props\n    }: BoxProps<T>,\n    ref?: BoxRef<T>,\n) {\n    const Tag: React.ElementType = as || 'div';\n\n    const style: React.CSSProperties = {\n        width,\n        height,\n        minWidth,\n        minHeight,\n        maxHeight,\n        maxWidth,\n        position,\n        ...outerStyle,\n    };\n\n    return (\n        <Tag\n            {...props}\n            data-qa={qa}\n            style={style}\n            ref={ref}\n            className={b({overflow}, spacing ? sp(spacing, className) : className)}\n        >\n            {children}\n        </Tag>\n    );\n}) as (<C extends React.ElementType = 'div'>(\n    props: BoxPropsWithTypedAttrs<C> & {ref?: BoxRef<C>},\n) => React.ReactElement) & {displayName: string};\n"]}