{"version":3,"file":"withTableCopy.js","sourceRoot":"../../../../../../src","sources":["components/Table/hoc/withTableCopy/withTableCopy.tsx"],"names":[],"mappings":"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","sourcesContent":["'use client';\n\nimport * as React from 'react';\n\nimport memoize from 'lodash/memoize';\n\nimport {ClipboardButton} from '../../../ClipboardButton';\nimport {block} from '../../../utils/cn';\nimport {getComponentName} from '../../../utils/getComponentName';\nimport {Table} from '../../Table';\nimport type {TableColumnConfig, TableDataItem, TableProps} from '../../Table';\n\nimport './withTableCopy.scss';\n\nexport interface WithTableCopyProps {}\n\nconst b = block('table');\n\nexport function withTableCopy<I extends TableDataItem, E extends {} = {}>(\n    TableComponent: React.ComponentType<TableProps<I> & E>,\n): React.ComponentType<TableProps<I> & E & WithTableCopyProps> {\n    const componentName = getComponentName(TableComponent);\n    const displayName = `withTableCopy(${componentName})`;\n\n    return class extends React.Component<TableProps<I> & E & WithTableCopyProps> {\n        static displayName = displayName;\n\n        render() {\n            const {columns, onRowClick, ...restTableProps} = this.props;\n\n            return (\n                <TableComponent\n                    {...(restTableProps as Omit<TableProps<I>, 'columns'> & E)}\n                    columns={this.enhanceColumns(columns)}\n                    onRowClick={this.enhanceOnRowClick(onRowClick)}\n                />\n            );\n        }\n\n        // eslint-disable-next-line @typescript-eslint/member-ordering\n        private enhanceColumns = memoize((columns: TableColumnConfig<I>[]) => {\n            return columns.map((column) => {\n                const meta = column.meta;\n\n                if (!meta || !meta.copy) {\n                    return column;\n                }\n\n                return {\n                    ...column,\n                    template: (item, index) => {\n                        const originContent = Table.getBodyCellContent(\n                            {\n                                ...column,\n                                placeholder: '',\n                            },\n                            item,\n                            index,\n                        );\n\n                        if (!originContent) {\n                            return originContent;\n                        }\n\n                        let copyText;\n\n                        if (typeof meta.copy === 'function') {\n                            copyText = String(meta.copy(item, index));\n                        } else if (\n                            typeof originContent === 'string' ||\n                            typeof originContent === 'number'\n                        ) {\n                            copyText = String(originContent);\n                        }\n\n                        if (!copyText) {\n                            return originContent;\n                        }\n\n                        return (\n                            <div className={b('copy')}>\n                                <div className={b('copy-content')}>{originContent}</div>\n                                <div className={b('copy-button')}>\n                                    <ClipboardButton text={copyText} size=\"xs\" />\n                                </div>\n                            </div>\n                        );\n                    },\n                } as TableColumnConfig<I>;\n            });\n        });\n\n        // eslint-disable-next-line @typescript-eslint/member-ordering\n        private enhanceOnRowClick = memoize(\n            (\n                onRowClick?: (\n                    item: I,\n                    index: number,\n                    event: React.MouseEvent<HTMLTableRowElement>,\n                ) => void,\n            ) => {\n                if (!onRowClick) {\n                    return onRowClick;\n                }\n\n                return (item: I, index: number, event: React.MouseEvent<HTMLTableRowElement>) => {\n                    const buttonClassName = b('copy-button');\n                    if (\n                        // @ts-expect-error\n                        event.nativeEvent.target.matches(\n                            `.${buttonClassName}, .${buttonClassName} *`,\n                        )\n                    ) {\n                        return undefined;\n                    }\n\n                    return onRowClick(item, index, event);\n                };\n            },\n        );\n    };\n}\n"]}