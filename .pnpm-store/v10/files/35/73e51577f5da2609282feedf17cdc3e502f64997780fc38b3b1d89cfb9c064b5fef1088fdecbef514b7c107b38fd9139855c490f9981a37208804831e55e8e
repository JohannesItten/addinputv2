{"version":3,"file":"Button.js","sourceRoot":"../../../../src","sources":["components/Button/Button.tsx"],"names":[],"mappings":"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","sourcesContent":["'use client';\n\nimport * as React from 'react';\n\nimport type {DOMProps, QAProps} from '../types';\nimport {block} from '../utils/cn';\nimport {isIcon, isSvg} from '../utils/common';\nimport {eventBroker} from '../utils/event-broker';\nimport {isOfType} from '../utils/isOfType';\n\nimport {ButtonIcon, getIconSide} from './ButtonIcon';\nimport type {BUTTON_VIEWS} from './constants';\n\nimport './Button.scss';\n\nexport type ButtonView = (typeof BUTTON_VIEWS)[number];\n\nexport type ButtonSize = 'xs' | 's' | 'm' | 'l' | 'xl';\n\nexport type ButtonPin =\n    | 'round-round'\n    | 'brick-brick'\n    | 'clear-clear'\n    | 'circle-circle'\n    | 'round-brick'\n    | 'brick-round'\n    | 'round-clear'\n    | 'clear-round'\n    | 'brick-clear'\n    | 'clear-brick'\n    | 'circle-brick'\n    | 'brick-circle'\n    | 'circle-clear'\n    | 'clear-circle';\n\nexport type ButtonWidth = 'auto' | 'max';\n\ninterface ButtonCommonProps extends QAProps, DOMProps {\n    view?: ButtonView;\n    size?: ButtonSize;\n    pin?: ButtonPin;\n    selected?: boolean;\n    disabled?: boolean;\n    loading?: boolean;\n    width?: ButtonWidth;\n    children?: React.ReactNode;\n}\n\nexport interface ButtonButtonProps\n    extends ButtonCommonProps,\n        Omit<React.ButtonHTMLAttributes<HTMLButtonElement>, 'disabled' | 'style'> {\n    component?: never;\n    href?: never;\n    /**\n     * @deprecated Use additional props at the root\n     */\n    extraProps?: React.ButtonHTMLAttributes<HTMLButtonElement>;\n}\n\nexport interface ButtonLinkProps\n    extends ButtonCommonProps,\n        Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, 'style'> {\n    component?: never;\n    href: string;\n    /**\n     * @deprecated Use additional props at the root\n     */\n    extraProps?: React.AnchorHTMLAttributes<HTMLAnchorElement>;\n}\n\nexport type ButtonComponentProps<T extends Exclude<ButtonCustomElementType, undefined>> =\n    ButtonCommonProps &\n        React.ComponentPropsWithoutRef<T> & {\n            component: T;\n            /**\n             * @deprecated Use additional props at the root\n             */\n            extraProps?: React.ComponentPropsWithoutRef<T>;\n        };\n\nfunction isButtonComponentProps<T extends ButtonCustomElementType>(\n    p: ButtonProps<T>,\n): p is ButtonComponentProps<Exclude<T, undefined>> {\n    return p.component !== undefined;\n}\n\nexport type ButtonCustomElementType = Exclude<React.ElementType, 'a' | 'button'> | undefined;\n\nexport type ButtonProps<T extends ButtonCustomElementType = undefined> =\n    | ButtonLinkProps\n    | ButtonButtonProps\n    | ButtonComponentProps<Exclude<T, undefined>>;\n\nconst b = block('button');\n\nconst _Button = React.forwardRef(function Button<T extends ButtonCustomElementType>(\n    props: ButtonProps<T>,\n    ref:\n        | React.Ref<HTMLButtonElement>\n        | React.Ref<HTMLAnchorElement>\n        | React.Ref<T extends string ? React.ComponentRef<T> : T>,\n) {\n    const {\n        view = 'normal',\n        size = 'm',\n        pin = 'round-round',\n        selected,\n        disabled = false,\n        loading = false,\n        width,\n        children,\n        extraProps,\n        qa,\n        onClickCapture,\n        ...rest\n    } = props;\n\n    const handleClickCapture = React.useCallback(\n        (event: React.MouseEvent<any>) => {\n            eventBroker.publish({\n                componentId: 'Button',\n                eventId: 'click',\n                domEvent: event,\n                meta: {\n                    content: event.currentTarget.textContent,\n                    view: view,\n                },\n            });\n\n            if (onClickCapture) {\n                onClickCapture(event);\n            }\n        },\n        [view, onClickCapture],\n    );\n\n    const commonProps = {\n        onClickCapture: handleClickCapture,\n        className: b(\n            {\n                view: view,\n                size: size,\n                pin: pin,\n                selected: selected,\n                disabled: disabled || loading,\n                loading: loading,\n                width: width,\n            },\n            rest.className,\n        ),\n        'data-qa': qa,\n    };\n\n    if (isButtonComponentProps(props)) {\n        return React.createElement(\n            props.component,\n            {\n                ...rest,\n                ...extraProps,\n                ...commonProps,\n                ref: ref,\n                'aria-disabled': disabled ?? undefined,\n            },\n            prepareChildren(children),\n        );\n    }\n\n    if (typeof props.href !== 'undefined') {\n        return (\n            <a\n                {...(rest as Pick<typeof props, keyof typeof rest>)}\n                {...(extraProps as (typeof props)['extraProps'])}\n                {...commonProps}\n                ref={ref as React.Ref<HTMLAnchorElement>}\n                rel={props.target === '_blank' && !rest.rel ? 'noopener noreferrer' : rest.rel}\n                aria-disabled={disabled ?? undefined}\n            >\n                {prepareChildren(children)}\n            </a>\n        );\n    }\n\n    return (\n        <button\n            {...(rest as Pick<typeof props, keyof typeof rest>)}\n            {...(extraProps as (typeof props)['extraProps'])}\n            {...commonProps}\n            ref={ref as React.Ref<HTMLButtonElement>}\n            type={props.type || 'button'}\n            disabled={disabled || loading}\n            aria-pressed={selected}\n        >\n            {prepareChildren(children)}\n        </button>\n    );\n}) as <T extends ButtonCustomElementType, P extends ButtonProps<T>>(\n    props: P extends {component: Exclude<T, undefined>}\n        ? ButtonComponentProps<Exclude<T, undefined>> & {\n              ref?: React.Ref<T extends string ? React.ComponentRef<T> : T>;\n          }\n        : P extends {href: string}\n          ? ButtonLinkProps & {ref?: React.Ref<HTMLAnchorElement>}\n          : ButtonButtonProps & {ref?: React.Ref<HTMLButtonElement>},\n) => React.ReactElement;\n\nexport const Button = Object.assign(_Button, {Icon: ButtonIcon});\n\nconst isButtonIconComponent = isOfType(ButtonIcon);\nconst isSpan = isOfType<{className?: string}>('span');\nconst buttonIconClassRe = RegExp(`^${b('icon')}($|\\\\s+\\\\w)`);\n\nfunction prepareChildren(children: React.ReactNode) {\n    const items = React.Children.toArray(children);\n\n    if (items.length === 1) {\n        const onlyItem = items[0];\n        const isButtonIconElement =\n            isButtonIconComponent(onlyItem) ||\n            (isSpan(onlyItem) && buttonIconClassRe.test(onlyItem.props.className || ''));\n\n        if (isButtonIconElement) {\n            return onlyItem;\n        } else if (isIcon(onlyItem) || isSvg(onlyItem)) {\n            return <Button.Icon key=\"icon\">{onlyItem}</Button.Icon>;\n        } else {\n            return (\n                <span key=\"text\" className={b('text')}>\n                    {onlyItem}\n                </span>\n            );\n        }\n    } else {\n        let startIcon, endIcon, text;\n        const content = [];\n\n        for (const item of items) {\n            const isIconElement = isIcon(item) || isSvg(item);\n            const isButtonIconElement = isButtonIconComponent(item);\n            const isRenderedButtonIconElement =\n                isSpan(item) && buttonIconClassRe.test(item.props.className || '');\n\n            if (isIconElement || isButtonIconElement || isRenderedButtonIconElement) {\n                if (!startIcon && content.length === 0) {\n                    const key = 'icon-start';\n                    const side = 'start';\n                    if (isIconElement) {\n                        startIcon = (\n                            <Button.Icon key={key} side={side}>\n                                {item}\n                            </Button.Icon>\n                        );\n                    } else if (isButtonIconElement) {\n                        startIcon = React.cloneElement(item, {\n                            side,\n                        });\n                    } else {\n                        startIcon = React.cloneElement(item, {\n                            className: b('icon', {side: getIconSide(side)}, item.props.className),\n                        });\n                    }\n                } else if (!endIcon && content.length !== 0) {\n                    const key = 'icon-end';\n                    const side = 'end';\n                    if (isIconElement) {\n                        endIcon = (\n                            <Button.Icon key={key} side={side}>\n                                {item}\n                            </Button.Icon>\n                        );\n                    } else if (isButtonIconElement) {\n                        endIcon = React.cloneElement(item, {\n                            side,\n                        });\n                    } else {\n                        endIcon = React.cloneElement(item, {\n                            className: b('icon', {side: getIconSide(side)}, item.props.className),\n                        });\n                    }\n                }\n            } else {\n                content.push(item);\n            }\n        }\n\n        if (content.length > 0) {\n            text = (\n                <span key=\"text\" className={b('text')}>\n                    {content}\n                </span>\n            );\n        }\n\n        return [startIcon, endIcon, text];\n    }\n}\n"]}