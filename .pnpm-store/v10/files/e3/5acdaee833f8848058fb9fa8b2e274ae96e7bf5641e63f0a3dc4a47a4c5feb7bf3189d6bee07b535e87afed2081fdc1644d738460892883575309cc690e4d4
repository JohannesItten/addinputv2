{"version":3,"file":"useLoadMore.js","sourceRoot":"../../../../../src","sources":["components/lab/Virtualizer/useLoadMore.tsx"],"names":[],"mappings":";;AAmBA,kCAmDC;;AAtED,qDAA+B;AAmB/B,SAAgB,WAAW,CACvB,kBAAuD,EACvD,OAAwB;IAExB,MAAM,EAAC,UAAU,EAAE,OAAO,EAAE,YAAY,GAAG,CAAC,EAAC,GAAG,OAAO,CAAC;IAExD,MAAM,YAAY,GAAG,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAC3C,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACjB,MAAM,OAAO,GAAG,kBAAkB,CAAC,OAAO,CAAC;QAC3C,IAAI,CAAC,OAAO,IAAI,OAAO,UAAU,KAAK,UAAU,EAAE,CAAC;YAC/C,OAAO,SAAS,CAAC;QACrB,CAAC;QAED,MAAM,QAAQ,GAAG,GAAG,EAAE;YAClB,IAAI,YAAY,CAAC,OAAO,EAAE,CAAC;gBACvB,OAAO;YACX,CAAC;YAED,MAAM,cAAc,GAChB,OAAO,CAAC,YAAY,GAAG,OAAO,CAAC,SAAS,GAAG,OAAO,CAAC,YAAY;gBAC/D,OAAO,CAAC,YAAY,GAAG,YAAY,CAAC;YACxC,IAAI,cAAc,EAAE,CAAC;gBACjB,YAAY,CAAC,OAAO,GAAG,IAAI,CAAC;gBAC5B,UAAU,EAAE,CAAC;YACjB,CAAC;QACL,CAAC,CAAC;QACF,OAAO,CAAC,gBAAgB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAC7C,OAAO,GAAG,EAAE;YACR,OAAO,CAAC,mBAAmB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QACpD,CAAC,CAAC;IACN,CAAC,EAAE,CAAC,kBAAkB,EAAE,UAAU,EAAE,YAAY,CAAC,CAAC,CAAC;IAEnD,MAAM,kBAAkB,GAAG,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IACjD,KAAK,CAAC,eAAe,CAAC,GAAG,EAAE;QACvB,IAAI,OAAO,KAAK,kBAAkB,CAAC,OAAO,EAAE,CAAC;YACzC,YAAY,CAAC,OAAO,GAAG,OAAO,CAAC;YAC/B,kBAAkB,CAAC,OAAO,GAAG,OAAO,CAAC;QACzC,CAAC;QAED,MAAM,OAAO,GAAG,kBAAkB,CAAC,OAAO,CAAC;QAC3C,IAAI,CAAC,OAAO,IAAI,OAAO,UAAU,KAAK,UAAU,EAAE,CAAC;YAC/C,OAAO;QACX,CAAC;QAED,MAAM,cAAc,GAChB,CAAC,YAAY,CAAC,OAAO,IAAI,OAAO,CAAC,YAAY,KAAK,OAAO,CAAC,YAAY,CAAC;QAC3E,IAAI,cAAc,EAAE,CAAC;YACjB,YAAY,CAAC,OAAO,GAAG,IAAI,CAAC;YAC5B,UAAU,EAAE,CAAC;QACjB,CAAC;IACL,CAAC,EAAE,CAAC,OAAO,EAAE,UAAU,EAAE,kBAAkB,CAAC,CAAC,CAAC;AAClD,CAAC","sourcesContent":["import * as React from 'react';\n\nexport interface Loadable {\n    /** Whether the items are currently loading. */\n    loading?: boolean;\n    /** Handler that is called when more items should be loaded, e.g. while scrolling near the bottom. */\n    onLoadMore?: () => void;\n}\n\nexport interface LoadMoreOptions extends Loadable {\n    /**\n     * The amount of offset from bottom that should trigger load more.\n     * The value is multiplied to the size of the visible area.\n     *\n     * @default 1\n     */\n    scrollOffset?: number;\n}\n\nexport function useLoadMore(\n    scrollContainerRef: React.RefObject<HTMLElement | null>,\n    options: LoadMoreOptions,\n) {\n    const {onLoadMore, loading, scrollOffset = 1} = options;\n\n    const isLoadingRef = React.useRef(loading);\n    React.useEffect(() => {\n        const element = scrollContainerRef.current;\n        if (!element || typeof onLoadMore !== 'function') {\n            return undefined;\n        }\n\n        const onScroll = () => {\n            if (isLoadingRef.current) {\n                return;\n            }\n\n            const shouldLoadMore =\n                element.scrollHeight - element.scrollTop - element.clientHeight <\n                element.clientHeight * scrollOffset;\n            if (shouldLoadMore) {\n                isLoadingRef.current = true;\n                onLoadMore();\n            }\n        };\n        element.addEventListener('scroll', onScroll);\n        return () => {\n            element.removeEventListener('scroll', onScroll);\n        };\n    }, [scrollContainerRef, onLoadMore, scrollOffset]);\n\n    const prevLoadingPropRef = React.useRef(loading);\n    React.useLayoutEffect(() => {\n        if (loading !== prevLoadingPropRef.current) {\n            isLoadingRef.current = loading;\n            prevLoadingPropRef.current = loading;\n        }\n\n        const element = scrollContainerRef.current;\n        if (!element || typeof onLoadMore !== 'function') {\n            return;\n        }\n\n        const shouldLoadMore =\n            !isLoadingRef.current && element.scrollHeight === element.clientHeight;\n        if (shouldLoadMore) {\n            isLoadingRef.current = true;\n            onLoadMore();\n        }\n    }, [loading, onLoadMore, scrollContainerRef]);\n}\n"]}