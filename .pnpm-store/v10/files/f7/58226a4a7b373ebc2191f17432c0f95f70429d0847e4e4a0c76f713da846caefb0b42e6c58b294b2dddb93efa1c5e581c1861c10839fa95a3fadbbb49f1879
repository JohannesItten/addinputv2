{"version":3,"file":"Stepper.js","sourceRoot":"../../../../src","sources":["components/Stepper/Stepper.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAG/B,OAAO,EAAC,cAAc,EAAC,mCAAgC;AAEvD,OAAO,EAAC,WAAW,EAAC,yBAAsB;AAC1C,OAAO,EAAC,gBAAgB,EAAC,8BAA2B;AACpD,OAAO,EAAC,cAAc,EAAC,qBAAkB;AAEzC,OAAO,EAAC,CAAC,EAAC,mBAAgB;AAE1B,uBAAwB;AAUxB,MAAM,CAAC,MAAM,OAAO,GAAG,CAAC,KAAmB,EAAE,EAAE;IAC3C,MAAM,EAAC,QAAQ,EAAE,KAAK,EAAE,IAAI,GAAG,GAAG,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAC,GAAG,KAAK,CAAC;IAE5E,MAAM,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE;QACjC,OAAO,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;YACjD,MAAM,MAAM,GAAG,KAAK,CAAC,KAAK,EAAE,EAAE,IAAI,KAAK,CAAC;YACxC,MAAM,WAAW,GAAG,KAAK,CAAC,YAAY,CAAC,KAAK,EAAE,EAAC,EAAE,EAAE,MAAM,EAAC,CAAC,CAAC;YAE5D,OAAO,CACH,cAAiB,SAAS,EAAE,CAAC,CAAC,WAAW,CAAC,aACrC,WAAW,EACX,OAAO,CAAC,KAAK,KAAK,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,IAAI,CACtD,KAAC,gBAAgB,IAAC,SAAS,EAAE,SAAS,GAAI,CAC7C,KAJI,MAAM,CAKV,CACR,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC,EAAE,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,CAAC;IAE1B,OAAO,CACH,KAAC,cAAc,CAAC,QAAQ,IAAC,KAAK,EAAE,EAAC,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAC,YACnD,gBACQ,cAAc,CAAC,KAAK,EAAE,EAAC,SAAS,EAAE,IAAI,EAAC,CAAC,EAC5C,SAAS,EAAE,CAAC,CAAC,IAAI,EAAE,SAAS,CAAC,EAC7B,KAAK,EAAE,KAAK,CAAC,KAAK,aACT,KAAK,CAAC,EAAE,YAEhB,SAAS,GACT,GACiB,CAC7B,CAAC;AACN,CAAC,CAAC;AAEF,OAAO,CAAC,IAAI,GAAG,WAAW,CAAC;AAC3B,OAAO,CAAC,WAAW,GAAG,SAAS,CAAC","sourcesContent":["'use client';\n\nimport * as React from 'react';\n\nimport type {AriaLabelingProps, DOMProps, QAProps} from '../types';\nimport {filterDOMProps} from '../utils/filterDOMProps';\n\nimport {StepperItem} from './StepperItem';\nimport {StepperSeparator} from './StepperSeparator';\nimport {StepperContext} from './context';\nimport type {StepperSize} from './types';\nimport {b} from './utils';\n\nimport './Stepper.scss';\n\nexport interface StepperProps extends DOMProps, AriaLabelingProps, QAProps {\n    children: React.ReactElement | React.ReactElement[];\n    value?: number | string;\n    onUpdate?: (id?: number | string) => void;\n    size?: StepperSize;\n    separator?: React.ReactNode;\n}\n\nexport const Stepper = (props: StepperProps) => {\n    const {children, value, size = 's', className, onUpdate, separator} = props;\n\n    const stepItems = React.useMemo(() => {\n        return React.Children.map(children, (child, index) => {\n            const itemId = child.props?.id || index;\n            const clonedChild = React.cloneElement(child, {id: itemId});\n\n            return (\n                <li key={itemId} className={b('list-item')}>\n                    {clonedChild}\n                    {Boolean(index !== React.Children.count(children) - 1) && (\n                        <StepperSeparator separator={separator} />\n                    )}\n                </li>\n            );\n        });\n    }, [children, separator]);\n\n    return (\n        <StepperContext.Provider value={{size, onUpdate, value}}>\n            <ol\n                {...filterDOMProps(props, {labelable: true})}\n                className={b(null, className)}\n                style={props.style}\n                data-qa={props.qa}\n            >\n                {stepItems}\n            </ol>\n        </StepperContext.Provider>\n    );\n};\n\nStepper.Item = StepperItem;\nStepper.displayName = 'Stepper';\n"]}