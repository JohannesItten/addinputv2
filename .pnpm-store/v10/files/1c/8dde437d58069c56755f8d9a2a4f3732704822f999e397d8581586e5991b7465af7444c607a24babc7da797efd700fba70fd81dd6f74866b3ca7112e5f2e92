{"version":3,"file":"HandleWithTooltip.js","sourceRoot":"../../../../../src","sources":["components/Slider/HandleWithTooltip/HandleWithTooltip.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport {SliderTooltip} from '../SliderTooltip/SliderTooltip';\nimport type {HandleWithTooltipProps} from '../types';\n\nexport const HandleWithTooltip = ({\n    originHandle,\n    originHandleProps,\n    stateModifiers,\n    tooltipFormat,\n    className,\n}: HandleWithTooltipProps) => {\n    const autoVisible = stateModifiers['tooltip-display'] === 'auto';\n    const alwaysVisible = stateModifiers['tooltip-display'] === 'on';\n    const [tooltipVisible, setTooltipVisible] = React.useState(false);\n    const [focused, setFocused] = React.useState(false);\n    const [hovered, setHovered] = React.useState(false);\n\n    if (alwaysVisible && !tooltipVisible) {\n        setTooltipVisible(true);\n    }\n\n    //to show tooltip on mobile devices on touch\n    if (autoVisible && !tooltipVisible && originHandleProps.dragging) {\n        setTooltipVisible(true);\n    }\n\n    const styleProp = stateModifiers.rtl ? 'right' : 'left';\n    const tooltipContent = tooltipFormat\n        ? tooltipFormat(originHandleProps.value)\n        : originHandleProps.value;\n\n    const handleTooltipVisibility = ({\n        currentHovered,\n        currentFocused,\n    }: {\n        currentHovered?: boolean;\n        currentFocused?: boolean;\n    }) => {\n        if (autoVisible) {\n            const handleHovered = currentHovered === undefined ? hovered : currentHovered;\n            const handleFocused = currentFocused === undefined ? focused : currentFocused;\n            setTooltipVisible(handleHovered || handleFocused);\n        }\n    };\n\n    const handle = alwaysVisible\n        ? originHandle\n        : React.cloneElement(originHandle, {\n              onMouseEnter: (event: React.MouseEvent<HTMLDivElement>) => {\n                  originHandle.props.onMouseEnter?.(event);\n                  setHovered(true);\n                  handleTooltipVisibility({currentHovered: true});\n              },\n              onMouseLeave: (event: React.MouseEvent<HTMLDivElement>) => {\n                  originHandle.props.onMouseLeave?.(event);\n                  setHovered(false);\n                  handleTooltipVisibility({currentHovered: false});\n              },\n              onFocus: (event: React.FocusEvent<HTMLDivElement>) => {\n                  originHandle.props.onFocus?.(event);\n                  setFocused(true);\n                  handleTooltipVisibility({currentFocused: true});\n              },\n              onBlur: (event: React.FocusEvent<HTMLDivElement>) => {\n                  originHandle.props.onBlur?.(event);\n                  setFocused(false);\n                  handleTooltipVisibility({currentFocused: false});\n              },\n          });\n\n    return (\n        <React.Fragment>\n            {handle}\n            {tooltipVisible && (\n                <SliderTooltip\n                    className={className}\n                    style={{\n                        insetInlineStart: originHandle.props.style?.[styleProp],\n                    }}\n                    stateModifiers={stateModifiers}\n                >\n                    {tooltipContent}\n                </SliderTooltip>\n            )}\n        </React.Fragment>\n    );\n};\n"]}