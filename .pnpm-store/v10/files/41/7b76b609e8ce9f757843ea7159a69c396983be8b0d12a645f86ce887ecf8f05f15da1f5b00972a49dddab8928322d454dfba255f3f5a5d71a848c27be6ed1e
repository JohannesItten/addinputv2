{"version":3,"file":"useHover.js","sourceRoot":"../../../../../src","sources":["hooks/private/useHover/useHover.ts"],"names":[],"mappings":";;AAIA,4BAUC;;AAdD,qDAA+B;AAI/B,SAAgB,QAAQ;IACpB,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC1D,MAAM,YAAY,GAA+B,KAAK,CAAC,WAAW,CAAC,GAAG,EAAE;QACpE,aAAa,CAAC,IAAI,CAAC,CAAC;IACxB,CAAC,EAAE,EAAE,CAAC,CAAC;IACP,MAAM,YAAY,GAA+B,KAAK,CAAC,WAAW,CAAC,GAAG,EAAE;QACpE,aAAa,CAAC,KAAK,CAAC,CAAC;IACzB,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,OAAO,CAAC,YAAY,EAAE,YAAY,EAAE,UAAU,CAAC,CAAC;AACpD,CAAC","sourcesContent":["import * as React from 'react';\n\nexport type UseHoverResult<T> = [React.MouseEventHandler<T>, React.MouseEventHandler<T>, boolean];\n\nexport function useHover<T = Element>(): UseHoverResult<T> {\n    const [isHovering, setIsHovering] = React.useState(false);\n    const onMouseEnter: React.MouseEventHandler<T> = React.useCallback(() => {\n        setIsHovering(true);\n    }, []);\n    const onMouseLeave: React.MouseEventHandler<T> = React.useCallback(() => {\n        setIsHovering(false);\n    }, []);\n\n    return [onMouseEnter, onMouseLeave, isHovering];\n}\n"]}