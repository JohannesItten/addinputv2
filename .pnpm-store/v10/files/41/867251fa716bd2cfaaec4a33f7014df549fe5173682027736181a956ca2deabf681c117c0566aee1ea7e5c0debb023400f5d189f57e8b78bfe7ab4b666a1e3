{"version":3,"file":"Table.js","sourceRoot":"../../../../src","sources":["components/Table/Table.tsx"],"names":[],"mappings":"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","sourcesContent":["'use client';\n\nimport * as React from 'react';\n\nimport get from 'lodash/get';\nimport has from 'lodash/has';\n\nimport type {AriaLabelingProps, QAProps} from '../types';\nimport {block} from '../utils/cn';\nimport {filterDOMProps} from '../utils/filterDOMProps';\nimport {warnOnce} from '../utils/warn';\n\nimport i18n from './i18n';\n\nimport './Table.scss';\n\nconst DASH = '\\u2014';\n\nexport interface TableDataItem {\n    [key: string]: any;\n}\n\ntype ActiveScrollElementType = 'scrollBar' | 'scrollContainer';\n\nfunction warnAboutPhysicalValues(propName: string) {\n    warnOnce(\n        `[Table] Physical values (left, right) of \"${propName}\" property are deprecated. Use logical values (start, end) instead.`,\n    );\n}\n\nfunction normalizeSides(\n    side: TableColumnConfig<any>['align'] | TableColumnConfig<any>['sticky'],\n    propName: string,\n) {\n    if (side === 'left') {\n        warnAboutPhysicalValues(propName);\n        return 'start';\n    }\n    if (side === 'right') {\n        warnAboutPhysicalValues(propName);\n        return 'end';\n    }\n    return side;\n}\n\ninterface TableState {\n    // activeScrollElement is required so listener on table scroll won't fire when scrollbar will appear (and vice-versa)\n    // without that page will wobble on scrolling\n    activeScrollElement: ActiveScrollElementType;\n    columnsStyles: React.CSSProperties[];\n    columnHeaderRefs: React.RefObject<HTMLTableCellElement>[];\n}\n\nexport interface TableColumnConfig<I> {\n    /** Column ID */\n    id: string;\n    /** Column name (header). By default: column ID */\n    name?: string | (() => React.ReactNode);\n    /** CSS-class that will be added to all cells in the column. */\n    className?: string;\n    /** Stub in the event there is no data in a cell. By default: — (&mdash;) */\n    placeholder?: string | ((item: I, index: number) => React.ReactNode);\n    /** Cell contents. If you pass a row, the cell contents will be the value of the field named the same as this row. By default: The value of the field with the name equal to the column ID */\n    template?: string | ((item: I, index: number) => React.ReactNode);\n    /** Content alignment. */\n    align?: 'start' | 'end' | 'center' | 'left' | 'right';\n    /** Sticky column. */\n    sticky?: 'start' | 'end' | 'left' | 'right';\n    /** Distinguishes a column among other. */\n    primary?: boolean;\n    /** Column width in px or in %. Width can behave unexpectedly (it's more like min-width in block-elements). Sometimes you want to use `table-layout: fixed` */\n    width?: number | string;\n    /** Various data, HOC settings. */\n    meta?: Record<string, any>;\n}\n\nexport interface DescriptorType {\n    /**\n     * Row ID.\n     * Used when selecting and sorting rows.\n     */\n    id?: string;\n\n    /**\n     * Row CSS classes.\n     */\n    classNames?: string[];\n\n    /**\n     * Condition for disabling columns.\n     */\n    disabled?: boolean;\n    /** Show row hover */\n    interactive?: boolean;\n}\n\nexport type TableWidth = 'auto' | 'max';\n\n// TODO: Replace @default in props description with defaultProps in order to work with Storybook.\nexport interface TableProps<I> extends AriaLabelingProps, QAProps {\n    /** Data */\n    data: I[];\n    /** Column parameters */\n    columns: TableColumnConfig<I>[];\n    /** Vertical alignment of contents  */\n    verticalAlign?: 'top' | 'middle';\n    /** Break long text to lines instead of cutting with hellip */\n    wordWrap?: boolean;\n    /**\n     * Horizontal sticky scroll.\n     * Note: table cannot be with fixed height and with sticky scroll at the same time.\n     * Sticky scroll wont work if table has overflow.\n     * @default false\n     */\n    stickyHorizontalScroll?: boolean;\n    /**\n     * Threshold when sticky scroll is enabled.\n     *  @default 0\n     */\n    stickyHorizontalScrollBreakpoint?: number;\n    /**\n     * @deprecated Use getRowDescriptor instead\n     *\n     * Row ID.\n     * Used when selecting and sorting rows. If you pass a row,\n     * its ID will be the value of the field in the row data named the same as the column ID.\n     */\n    getRowId?: string | ((item: I, index: number) => string);\n    /**\n     * @deprecated Use getRowDescriptor instead\n     *\n     * Row CSS classes.\n     */\n    getRowClassNames?: (item: I, index: number) => string[];\n    /**\n     * @deprecated Use getRowDescriptor instead\n     *\n     * Condition for disabling columns.\n     */\n    isRowDisabled?: (item: I, index: number) => boolean;\n\n    /**\n     *\n     * @returns {DescriptorType} {@link DescriptorType}\n     */\n    getRowDescriptor?: (item: I, index: number) => DescriptorType | undefined;\n\n    /** Row click handler. When passed row's hover is visible. */\n    onRowClick?: (item: I, index: number, event: React.MouseEvent<HTMLTableRowElement>) => void;\n    /** Row mouseenter handler. */\n    onRowMouseEnter?: (\n        item: I,\n        index: number,\n        event: React.MouseEvent<HTMLTableRowElement>,\n    ) => void;\n    /** Row mouseleave handler. */\n    onRowMouseLeave?: (\n        item: I,\n        index: number,\n        event: React.MouseEvent<HTMLTableRowElement>,\n    ) => void;\n    /** Row mousedown handler. */\n    onRowMouseDown?: (item: I, index: number, event: React.MouseEvent<HTMLTableRowElement>) => void;\n    /** Message returned if data is missing. By default: \"No data\". */\n    emptyMessage?: string;\n    /** Table CSS-class. */\n    className?: string;\n    /** Adds horizontal padding for edge cells. */\n    edgePadding?: boolean;\n    width?: TableWidth;\n}\n\ninterface TableDefaultProps {\n    edgePadding: boolean;\n}\n\nconst b = block('table');\n\nconst EMPTY_VALUES = [undefined, null, ''];\n\nexport class Table<I extends TableDataItem = Record<string, string>> extends React.Component<\n    TableProps<I>,\n    TableState\n> {\n    static defaultProps: TableDefaultProps = {\n        edgePadding: true,\n    };\n\n    // Static methods may be used by HOCs\n    static getRowId<I extends TableDataItem>(props: TableProps<I>, item: I, rowIndex?: number) {\n        const {data, getRowId, getRowDescriptor} = props;\n        const index = rowIndex ?? data.indexOf(item);\n\n        const descriptor = getRowDescriptor?.(item, index);\n\n        if (descriptor?.id !== undefined) {\n            return descriptor.id;\n        }\n\n        if (typeof getRowId === 'function') {\n            return getRowId(item, index);\n        }\n\n        if (getRowId && getRowId in item) {\n            return String(item[getRowId]);\n        }\n\n        return String(index);\n    }\n\n    static getHeadCellContent<I extends TableDataItem>(\n        column: TableColumnConfig<I>,\n    ): React.ReactNode {\n        const {id, name} = column;\n\n        let content;\n        if (typeof name === 'function') {\n            content = name();\n        } else if (typeof name === 'string') {\n            content = name;\n        } else {\n            content = id;\n        }\n\n        return content;\n    }\n\n    static getBodyCellContent<I extends TableDataItem>(\n        column: TableColumnConfig<I>,\n        item: I,\n        rowIndex: number,\n    ): React.ReactNode {\n        const {id, template, placeholder} = column;\n\n        let placeholderValue;\n        if (typeof placeholder === 'function') {\n            placeholderValue = placeholder(item, rowIndex);\n        } else {\n            placeholderValue = placeholder ?? DASH;\n        }\n\n        let value;\n        if (typeof template === 'function') {\n            value = template(item, rowIndex);\n        } else if (typeof template === 'string') {\n            value = get(item, template);\n        } else if (has(item, id)) {\n            value = get(item, id);\n        }\n        if (EMPTY_VALUES.includes(value as any) && placeholderValue) {\n            return placeholderValue;\n        }\n\n        return value;\n    }\n\n    static getDerivedStateFromProps<I extends TableDataItem>(\n        props: Readonly<TableProps<I>>,\n        state: Readonly<TableState>,\n    ): Partial<typeof state> | null {\n        if (props.columns.length === state.columnHeaderRefs.length) {\n            return null;\n        }\n\n        return {\n            columnHeaderRefs: Array.from(props.columns, () => React.createRef()),\n        };\n    }\n\n    state: TableState = {\n        activeScrollElement: 'scrollContainer',\n        columnsStyles: Array.from(this.props.columns, () => ({})),\n        columnHeaderRefs: Array.from(this.props.columns, () => React.createRef()),\n    };\n\n    private tableRef = React.createRef<HTMLTableElement>();\n    private scrollContainerRef = React.createRef<HTMLDivElement>();\n    private horizontalScrollBarRef = React.createRef<HTMLDivElement>();\n    private horizontalScrollBarInnerRef = React.createRef<HTMLDivElement>();\n\n    private tableResizeObserver: ResizeObserver | undefined;\n    private columnsResizeObserver: ResizeObserver | undefined;\n\n    componentDidMount() {\n        if (this.props.stickyHorizontalScroll) {\n            this.tableResizeObserver = new ResizeObserver((entries: ResizeObserverEntry[]) => {\n                const {contentRect} = entries[0];\n\n                // Sync scrollbar width with table width\n                this.horizontalScrollBarInnerRef.current?.style.setProperty(\n                    'width',\n                    `${contentRect.width}px`,\n                );\n            });\n\n            if (this.tableRef.current) {\n                this.tableResizeObserver.observe(this.tableRef.current);\n            }\n\n            if (this.scrollContainerRef.current) {\n                this.scrollContainerRef.current.addEventListener(\n                    'scroll',\n                    this.handleScrollContainerScroll,\n                );\n                this.scrollContainerRef.current.addEventListener(\n                    'mouseenter',\n                    this.handleScrollContainerMouseenter,\n                );\n            }\n\n            if (this.horizontalScrollBarRef.current) {\n                this.horizontalScrollBarRef.current.addEventListener(\n                    'scroll',\n                    this.handleHorizontalScrollBarScroll,\n                );\n                this.horizontalScrollBarRef.current.addEventListener(\n                    'mouseenter',\n                    this.handleHorizontalScrollBarMouseenter,\n                );\n            }\n        }\n\n        this.columnsResizeObserver = new ResizeObserver((entries) => {\n            // fix ResizeObserver loop error\n            window.requestAnimationFrame(() => {\n                if (!Array.isArray(entries) || !entries.length) {\n                    return;\n                }\n                this.updateColumnStyles();\n            });\n        });\n\n        if (this.tableRef.current) {\n            this.columnsResizeObserver.observe(this.tableRef.current);\n        }\n\n        this.updateColumnStyles();\n    }\n\n    componentDidUpdate(prevProps: TableProps<I>) {\n        if (this.props.columns !== prevProps.columns) {\n            this.updateColumnStyles();\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.props.stickyHorizontalScroll) {\n            if (this.tableResizeObserver) {\n                this.tableResizeObserver.disconnect();\n            }\n\n            if (this.scrollContainerRef.current) {\n                this.scrollContainerRef.current.removeEventListener(\n                    'scroll',\n                    this.handleScrollContainerScroll,\n                );\n                this.scrollContainerRef.current.removeEventListener(\n                    'mouseenter',\n                    this.handleScrollContainerMouseenter,\n                );\n            }\n\n            if (this.horizontalScrollBarRef.current) {\n                this.horizontalScrollBarRef.current.removeEventListener(\n                    'scroll',\n                    this.handleHorizontalScrollBarScroll,\n                );\n                this.horizontalScrollBarRef.current.removeEventListener(\n                    'mouseenter',\n                    this.handleHorizontalScrollBarMouseenter,\n                );\n            }\n        }\n\n        if (this.columnsResizeObserver) {\n            this.columnsResizeObserver.disconnect();\n        }\n    }\n\n    render() {\n        const {columns, stickyHorizontalScroll, className, qa} = this.props;\n        const withPrimary = columns.some(({primary}) => primary);\n\n        return (\n            <div\n                className={b(\n                    {\n                        'with-primary': withPrimary,\n                        'with-sticky-scroll': stickyHorizontalScroll,\n                    },\n                    className,\n                )}\n                data-qa={qa}\n            >\n                {stickyHorizontalScroll ? (\n                    <React.Fragment>\n                        <div ref={this.scrollContainerRef} className={b('scroll-container')}>\n                            {this.renderTable()}\n                        </div>\n                        {this.renderHorizontalScrollBar()}\n                    </React.Fragment>\n                ) : (\n                    this.renderTable()\n                )}\n            </div>\n        );\n    }\n\n    private renderHead() {\n        const {columns, edgePadding, wordWrap} = this.props;\n        const {columnsStyles} = this.state;\n\n        return (\n            <thead className={b('head')}>\n                <tr className={b('row')}>\n                    {columns.map((column, index) => {\n                        const {id, align: rawAlign, primary, sticky: rawSticky, className} = column;\n                        const align = normalizeSides(rawAlign, 'column.align');\n                        const sticky = normalizeSides(rawSticky, 'column.sticky');\n                        const content = Table.getHeadCellContent(column);\n\n                        return (\n                            <th\n                                key={id}\n                                ref={this.state.columnHeaderRefs[index]}\n                                style={columnsStyles[index]}\n                                className={b(\n                                    'cell',\n                                    {\n                                        align,\n                                        primary,\n                                        sticky,\n                                        ['edge-padding']: edgePadding,\n                                        ['word-wrap']: wordWrap,\n                                    },\n                                    className,\n                                )}\n                            >\n                                {content}\n                            </th>\n                        );\n                    })}\n                </tr>\n            </thead>\n        );\n    }\n\n    private renderBody() {\n        const {data} = this.props;\n\n        return (\n            <tbody className={b('body')}>\n                {data.length > 0 ? data.map(this.renderRow) : this.renderEmptyRow()}\n            </tbody>\n        );\n    }\n\n    private renderTable() {\n        const {width = 'auto'} = this.props;\n        return (\n            <table\n                {...filterDOMProps(this.props, {labelable: true})}\n                ref={this.tableRef}\n                className={b('table', {width})}\n            >\n                {this.renderHead()}\n                {this.renderBody()}\n            </table>\n        );\n    }\n\n    private renderRow = (item: I, rowIndex: number) => {\n        const {\n            columns,\n            isRowDisabled,\n            onRowClick,\n            onRowMouseEnter,\n            onRowMouseLeave,\n            onRowMouseDown,\n            getRowClassNames,\n            verticalAlign,\n            edgePadding,\n            wordWrap,\n            getRowDescriptor,\n            qa,\n        } = this.props;\n        const {columnsStyles} = this.state;\n\n        const descriptor = getRowDescriptor?.(item, rowIndex);\n\n        const disabled = descriptor?.disabled || isRowDisabled?.(item, rowIndex) || false;\n\n        const additionalClassNames =\n            descriptor?.classNames || getRowClassNames?.(item, rowIndex) || [];\n\n        const interactive = Boolean(!disabled && (descriptor?.interactive || onRowClick));\n\n        return (\n            <tr\n                key={Table.getRowId(this.props, item, rowIndex)}\n                onClick={\n                    !disabled && onRowClick ? onRowClick.bind(null, item, rowIndex) : undefined\n                }\n                onMouseEnter={\n                    !disabled && onRowMouseEnter\n                        ? onRowMouseEnter.bind(null, item, rowIndex)\n                        : undefined\n                }\n                onMouseLeave={\n                    !disabled && onRowMouseLeave\n                        ? onRowMouseLeave.bind(null, item, rowIndex)\n                        : undefined\n                }\n                onMouseDown={\n                    !disabled && onRowMouseDown\n                        ? onRowMouseDown.bind(null, item, rowIndex)\n                        : undefined\n                }\n                className={b(\n                    'row',\n                    {disabled, interactive, 'vertical-align': verticalAlign},\n                    additionalClassNames.join(' '),\n                )}\n                data-qa={qa && `${qa}-row-${rowIndex}`}\n            >\n                {columns.map((column, colIndex) => {\n                    const {id, align: rawAlign, primary, className, sticky: rawSticky} = column;\n                    const content = Table.getBodyCellContent(column, item, rowIndex);\n                    const align = normalizeSides(rawAlign, 'column.align');\n                    const sticky = normalizeSides(rawSticky, 'column.sticky');\n                    return (\n                        <td\n                            key={id}\n                            style={columnsStyles[colIndex]}\n                            className={b(\n                                'cell',\n                                {\n                                    align,\n                                    primary,\n                                    sticky,\n                                    ['edge-padding']: edgePadding,\n                                    ['word-wrap']: wordWrap,\n                                },\n                                className,\n                            )}\n                        >\n                            {content}\n                        </td>\n                    );\n                })}\n            </tr>\n        );\n    };\n\n    private renderEmptyRow() {\n        const {columns, emptyMessage} = this.props;\n\n        return (\n            <tr className={b('row', {empty: true})}>\n                <td className={b('cell')} colSpan={columns.length}>\n                    {emptyMessage ? emptyMessage : i18n('label_empty')}\n                </td>\n            </tr>\n        );\n    }\n\n    private renderHorizontalScrollBar() {\n        const {stickyHorizontalScroll, stickyHorizontalScrollBreakpoint = 0} = this.props;\n        return (\n            <div\n                ref={this.horizontalScrollBarRef}\n                className={b('horizontal-scroll-bar', {\n                    'sticky-horizontal-scroll': stickyHorizontalScroll,\n                })}\n                style={{bottom: `${stickyHorizontalScrollBreakpoint}px`}}\n                data-qa=\"sticky-horizontal-scroll-breakpoint-qa\"\n            >\n                <div\n                    ref={this.horizontalScrollBarInnerRef}\n                    className={b('horizontal-scroll-bar-inner')}\n                />\n            </div>\n        );\n    }\n\n    private updateColumnStyles() {\n        this.setState((prevState) => {\n            const columnsWidth = prevState.columnHeaderRefs.map((ref) =>\n                ref.current === null ? undefined : ref.current.getBoundingClientRect().width,\n            );\n\n            const columnsStyles = this.props.columns.map((_, index) =>\n                this.getColumnStyles(index, columnsWidth),\n            );\n\n            return {columnsStyles};\n        });\n    }\n\n    private getColumnStyles(index: number, columnsWidth: (number | undefined)[]) {\n        const {columns} = this.props;\n\n        const column = columns[index];\n        const style: React.CSSProperties = {};\n        if (typeof column.width === 'string') {\n            return {maxWidth: 0, width: column.width};\n        }\n        if (typeof column.width !== 'undefined') {\n            style.width = column.width;\n        }\n        if (!column.sticky) {\n            return style;\n        }\n\n        const filteredColumns =\n            column.sticky === 'left' || column.sticky === 'start'\n                ? columnsWidth.slice(0, index)\n                : columnsWidth.slice(index + 1);\n        const styleName: keyof React.CSSProperties =\n            column.sticky === 'left' || column.sticky === 'start'\n                ? 'insetInlineStart'\n                : 'insetInlineEnd';\n        style[styleName] = filteredColumns.reduce<number>((start, width) => {\n            return typeof width === 'number' ? start + width : start;\n        }, 0);\n\n        return style;\n    }\n\n    private handleScrollContainerMouseenter = () => {\n        this.setState({activeScrollElement: 'scrollContainer'});\n    };\n\n    private handleScrollContainerScroll = () => {\n        if (\n            this.state.activeScrollElement === 'scrollContainer' &&\n            this.horizontalScrollBarRef.current &&\n            this.scrollContainerRef.current\n        ) {\n            this.horizontalScrollBarRef.current.scrollLeft =\n                this.scrollContainerRef.current.scrollLeft;\n        }\n    };\n\n    private handleHorizontalScrollBarMouseenter = () => {\n        this.setState({activeScrollElement: 'scrollBar'});\n    };\n\n    private handleHorizontalScrollBarScroll = () => {\n        if (\n            this.state.activeScrollElement === 'scrollBar' &&\n            this.horizontalScrollBarRef.current &&\n            this.scrollContainerRef.current\n        ) {\n            this.scrollContainerRef.current.scrollLeft =\n                this.horizontalScrollBarRef.current.scrollLeft;\n        }\n    };\n}\n"]}