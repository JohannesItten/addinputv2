{"version":3,"file":"usePagination.js","sourceRoot":"../../../../../src","sources":["components/Pagination/hooks/usePagination.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,gBAAgB,EAAE,iBAAiB,EAAC,oBAAiB;AAW7D,MAAM,UAAU,aAAa,CAAC,EAC1B,IAAI,EACJ,QAAQ,EACR,KAAK,EACL,MAAM,GACU;IAChB,MAAM,aAAa,GAAG,gBAAgB,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;IACxD,MAAM,QAAQ,GAAG,aAAa,KAAK,CAAC,CAAC;IACrC,MAAM,cAAc,GAAG,CAAC,QAAQ,IAAI,IAAI,KAAK,aAAa,CAAC,IAAI,KAAK,KAAK,CAAC,CAAC;IAE3E,IAAI,KAAuB,CAAC;IAE5B,IAAI,QAAQ,EAAE,CAAC;QACX,MAAM,cAAc,GAAG,iBAAiB,CAAC,EAAC,IAAI,EAAE,aAAa,EAAE,MAAM,EAAC,CAAC,CAAC;QAExE,KAAK,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;YACvC,IAAI,IAAI,KAAK,UAAU,EAAE,CAAC;gBACtB,OAAO,EAAC,IAAI,EAAE,UAAU,EAAC,CAAC;YAC9B,CAAC;YACD,IAAI,IAAI,KAAK,QAAQ,EAAE,CAAC;gBACpB,OAAO,EAAC,IAAI,EAAE,QAAQ,EAAC,CAAC;YAC5B,CAAC;YACD,MAAM,OAAO,GAAG,IAAI,KAAK,IAAI,CAAC;YAC9B,OAAO;gBACH,IAAI,EAAE,MAAM;gBACZ,OAAO;gBACP,IAAI,EAAE,IAAI;gBACV,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK;gBAChC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,IAAI;aACpC,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC;SAAM,CAAC;QACJ,KAAK,GAAG,CAAC,EAAC,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAC,CAAC,CAAC;IAC3E,CAAC;IAED,KAAK,CAAC,OAAO,CAAC;QACV,IAAI,EAAE,QAAQ;QACd,MAAM,EAAE,UAAU;QAClB,QAAQ,EAAE,IAAI,IAAI,CAAC;KACtB,CAAC,CAAC;IAEH,KAAK,CAAC,OAAO,CAAC;QACV,IAAI,EAAE,QAAQ;QACd,MAAM,EAAE,OAAO;QACf,QAAQ,EAAE,IAAI,IAAI,CAAC;KACtB,CAAC,CAAC;IAEH,KAAK,CAAC,IAAI,CAAC;QACP,IAAI,EAAE,QAAQ;QACd,MAAM,EAAE,MAAM;QACd,QAAQ,EAAE,cAAc;KAC3B,CAAC,CAAC;IAEH,OAAO,EAAC,KAAK,EAAE,aAAa,EAAC,CAAC;AAClC,CAAC","sourcesContent":["import type {PaginationItem, PaginationProps} from '../types';\nimport {getNumberOfPages, getNumerationList} from '../utils';\n\ntype UsePaginationArgs = Pick<PaginationProps, 'page' | 'pageSize' | 'total'> & {\n    mobile: boolean;\n};\n\ntype UsePaginationReturn = {\n    items: PaginationItem[];\n    numberOfPages: number;\n};\n\nexport function usePagination({\n    page,\n    pageSize,\n    total,\n    mobile,\n}: UsePaginationArgs): UsePaginationReturn {\n    const numberOfPages = getNumberOfPages(pageSize, total);\n    const hasTotal = numberOfPages !== 0;\n    const isNextDisabled = (hasTotal && page === numberOfPages) || total === 0;\n\n    let items: PaginationItem[];\n\n    if (hasTotal) {\n        const numerationList = getNumerationList({page, numberOfPages, mobile});\n\n        items = numerationList.map((item, index) => {\n            if (item === 'ellipsis') {\n                return {type: 'ellipsis'};\n            }\n            if (item === 'pageOf') {\n                return {type: 'pageOf'};\n            }\n            const current = item === page;\n            return {\n                type: 'page',\n                current,\n                page: item,\n                simple: mobile ? current : false,\n                key: mobile ? item + index : item,\n            };\n        });\n    } else {\n        items = [{type: 'page', current: true, page, simple: true, key: page}];\n    }\n\n    items.unshift({\n        type: 'button',\n        action: 'previous',\n        disabled: page <= 1,\n    });\n\n    items.unshift({\n        type: 'button',\n        action: 'first',\n        disabled: page <= 1,\n    });\n\n    items.push({\n        type: 'button',\n        action: 'next',\n        disabled: isNextDisabled,\n    });\n\n    return {items, numberOfPages};\n}\n"]}