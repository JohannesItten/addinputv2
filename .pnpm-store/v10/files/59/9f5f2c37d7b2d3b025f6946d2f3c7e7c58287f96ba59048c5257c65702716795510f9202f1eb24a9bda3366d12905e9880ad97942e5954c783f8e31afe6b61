{"version":3,"file":"Content.js","sourceRoot":"../../../../../../../src","sources":["components/legacy/Popover/components/Content/Content.tsx"],"names":[],"mappings":";AAEA,OAAO,EAAC,SAAS,EAAC,mCAAgC;AAalD,MAAM,CAAC,MAAM,OAAO,GAAG,CAAC,EAAC,SAAS,EAAE,WAAW,EAAE,OAAO,EAAE,SAAS,EAAe,EAAE,EAAE;IAClF,IAAI,CAAC,WAAW,IAAI,CAAC,OAAO,EAAE,CAAC;QAC3B,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,IAAI,WAAW,EAAE,CAAC;QACd,OAAO,CACH,cACI,SAAS,EAAE,SAAS,CAAC,iBAAiB,EAAE,EAAC,SAAS,EAAC,EAAE,SAAS,CAAC,EAC/D,uBAAuB,EAAE;gBACrB,MAAM,EAAE,WAAW;aACtB,GACH,CACL,CAAC;IACN,CAAC;IAED,IAAI,OAAO,EAAE,CAAC;QACV,OAAO,CACH,cAAK,SAAS,EAAE,SAAS,CAAC,iBAAiB,EAAE,EAAC,SAAS,EAAC,EAAE,SAAS,CAAC,YAAG,OAAO,GAAO,CACxF,CAAC;IACN,CAAC;IAED,OAAO,IAAI,CAAC;AAChB,CAAC,CAAC","sourcesContent":["import type * as React from 'react';\n\nimport {cnPopover} from '../../Popover.classname';\n\nexport type ContentProps = {\n    /** Tooltip's content */\n    content?: React.ReactNode;\n    /** Tooltip's html content to be rendered via `dangerouslySetInnerHTML` */\n    htmlContent?: string;\n    /** Tooltip's content className */\n    className?: string;\n    /** Apply secondary text styles for the content */\n    secondary: boolean;\n};\n\nexport const Content = ({secondary, htmlContent, content, className}: ContentProps) => {\n    if (!htmlContent && !content) {\n        return null;\n    }\n\n    if (htmlContent) {\n        return (\n            <div\n                className={cnPopover('tooltip-content', {secondary}, className)}\n                dangerouslySetInnerHTML={{\n                    __html: htmlContent,\n                }}\n            />\n        );\n    }\n\n    if (content) {\n        return (\n            <div className={cnPopover('tooltip-content', {secondary}, className)}>{content}</div>\n        );\n    }\n\n    return null;\n};\n"]}