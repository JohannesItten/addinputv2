{"version":3,"file":"useListParsedState.js","sourceRoot":"../../../../../src","sources":["components/useList/hooks/useListParsedState.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,EAAC,kBAAkB,EAAC,uCAAoC;AAK/D;;;GAGG;AACH,MAAM,UAAU,kBAAkB,CAAI,EAClC,KAAK,EACL,SAAS,EAAE,cAAc,EACzB,oBAAoB,GACK;IACzB,MAAM,SAAS,GAAG,KAAK,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC;IAEvD,MAAM,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE;QAC9B,OAAO,kBAAkB,CAAI,EAAC,KAAK,EAAE,SAAS,EAAE,oBAAoB,EAAC,CAAC,CAAC;IAC3E,CAAC,EAAE,CAAC,SAAS,EAAE,oBAAoB,EAAE,KAAK,CAAC,CAAC,CAAC;IAE7C,OAAO,MAAM,CAAC;AAClB,CAAC","sourcesContent":["import * as React from 'react';\n\nimport {getListParsedState} from '../utils/getListParsedState';\nimport type {GetListParsedStateProps} from '../utils/getListParsedState';\n\nexport interface UseListParsedStateProps<T> extends GetListParsedStateProps<T> {}\n\n/**\n * From the tree structure of list items we get meta information and\n * flatten list in right order without taking elements that hidden in expanded groups\n */\nexport function useListParsedState<T>({\n    items,\n    getItemId: propsGetItemId,\n    defaultExpandedState,\n}: UseListParsedStateProps<T>) {\n    const getItemId = React.useRef(propsGetItemId).current;\n\n    const result = React.useMemo(() => {\n        return getListParsedState<T>({items, getItemId, defaultExpandedState});\n    }, [getItemId, defaultExpandedState, items]);\n\n    return result;\n}\n"]}