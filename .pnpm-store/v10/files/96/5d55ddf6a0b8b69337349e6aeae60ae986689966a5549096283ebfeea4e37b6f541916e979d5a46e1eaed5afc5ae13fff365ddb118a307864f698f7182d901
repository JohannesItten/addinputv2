{"version":3,"file":"TreeSelect.js","sourceRoot":"../../../../src","sources":["components/TreeSelect/TreeSelect.tsx"],"names":[],"mappings":"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","sourcesContent":["'use client';\n\nimport * as React from 'react';\n\nimport {useFocusWithin, useForkRef, useUniqId} from '../../hooks';\nimport {useOpenState} from '../../hooks/useSelect/useOpenState';\nimport {SelectControl} from '../Select/components';\nimport {SelectPopup} from '../Select/components/SelectPopup/SelectPopup';\nimport {TreeList} from '../TreeList';\nimport type {TreeListRenderItem} from '../TreeList/types';\nimport {OuterAdditionalContent} from '../controls/common/OuterAdditionalContent/OuterAdditionalContent';\nimport {errorPropsMapper} from '../controls/utils';\nimport {useMobile} from '../mobile';\nimport {ListItemView, getListItemClickHandler, useList} from '../useList';\nimport type {ListOnItemClick} from '../useList';\nimport {block} from '../utils/cn';\nimport type {CnMods} from '../utils/cn';\n\nimport {useControlledValue} from './hooks/useControlledValue';\nimport type {TreeSelectProps, TreeSelectRenderControlProps} from './types';\n\nimport './TreeSelect.scss';\n\nconst b = block('tree-select');\n\nconst defaultItemRenderer: TreeListRenderItem<unknown> = (renderState) => {\n    return <ListItemView {...renderState.props} {...renderState.renderContainerProps} />;\n};\n\nexport const TreeSelect = React.forwardRef(function TreeSelect<T, P extends {} = {}>(\n    {\n        id,\n        qa,\n        title,\n        placement,\n        slotBeforeListBody,\n        slotAfterListBody,\n        size = 'm',\n        defaultOpen,\n        width,\n        containerRef: propsContainerRef,\n        className,\n        containerClassName,\n        popupClassName,\n        open: propsOpen,\n        multiple,\n        popupWidth,\n        popupDisablePortal,\n        items,\n        value: propsValue,\n        defaultValue,\n        placeholder,\n        disabled = false,\n        withExpandedState = true,\n        defaultExpandedState = 'expanded',\n        hasClear,\n        errorMessage: propsErrorMessage,\n        errorPlacement: propsErrorPlacement,\n        validationState: propsValidationState,\n        onClose,\n        onOpenChange,\n        onUpdate,\n        renderControl,\n        renderItem = defaultItemRenderer as TreeListRenderItem<T, P>,\n        renderContainer,\n        mapItemDataToContentProps,\n        onFocus,\n        onBlur,\n        getItemId,\n        onItemClick,\n    }: TreeSelectProps<T, P>,\n    ref: React.Ref<HTMLButtonElement>,\n) {\n    const mobile = useMobile();\n    const uniqId = useUniqId();\n    const treeSelectId = id ?? uniqId;\n    const popupId = `tree-select-popup-${treeSelectId}`;\n\n    const controlWrapRef = React.useRef<HTMLDivElement>(null);\n    const controlRef = React.useRef<HTMLElement>(null);\n    const containerRefLocal = React.useRef<HTMLDivElement>(null);\n    const containerRef = propsContainerRef ?? containerRefLocal;\n\n    const {errorMessage, errorPlacement, validationState} = errorPropsMapper({\n        errorMessage: propsErrorMessage,\n        errorPlacement: propsErrorPlacement || 'outside',\n        validationState: propsValidationState,\n    });\n    const errorMessageId = useUniqId();\n\n    const isErrorStateVisible = validationState === 'invalid';\n    const isErrorMsgVisible =\n        isErrorStateVisible && Boolean(errorMessage) && errorPlacement === 'outside';\n    const isErrorIconVisible =\n        isErrorStateVisible && Boolean(errorMessage) && errorPlacement === 'inside';\n\n    const handleControlRef = useForkRef(ref, controlRef);\n\n    const {toggleOpen, open} = useOpenState({\n        defaultOpen,\n        onClose,\n        onOpenChange,\n        open: propsOpen,\n    });\n\n    const {value, selectedById, setSelected} = useControlledValue({\n        value: propsValue,\n        defaultValue,\n        onUpdate,\n    });\n\n    const list = useList({\n        controlledState: {\n            selectedById,\n            setSelected,\n        },\n        items,\n        getItemId,\n        defaultExpandedState,\n        withExpandedState,\n    });\n\n    const handleItemClick = React.useMemo(() => {\n        if (onItemClick === null) {\n            return undefined;\n        }\n\n        const handler: ListOnItemClick = (arg, e) => {\n            const payload = {id: arg.id, list};\n\n            if (onItemClick) {\n                onItemClick?.(payload, e);\n            } else {\n                const baseOnClick = getListItemClickHandler({list, multiple});\n\n                baseOnClick(payload, e);\n\n                const isGroup = list.state.expandedById && arg.id in list.state.expandedById;\n\n                if (!multiple && !isGroup) {\n                    toggleOpen(false);\n                }\n            }\n        };\n\n        return handler;\n    }, [onItemClick, list, multiple, toggleOpen]);\n\n    // restoring focus when popup opens\n    React.useLayoutEffect(() => {\n        if (open) {\n            // for some reason popup position on page may be wrong calculated. `preventScroll` prevent page gap in that cases\n            containerRef.current?.focus({preventScroll: true});\n        }\n\n        return () => list.state.setActiveItemId(undefined); // reset active item on popup close\n        // subscribe only in open event\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [open]);\n\n    const handleClose = React.useCallback(() => toggleOpen(false), [toggleOpen]);\n\n    const {focusWithinProps} = useFocusWithin({\n        onFocusWithin: onFocus,\n        onBlurWithin: React.useCallback(\n            (e: React.FocusEvent) => {\n                onBlur?.(e);\n                handleClose();\n            },\n            [handleClose, onBlur],\n        ),\n    });\n\n    const controlProps: TreeSelectRenderControlProps<T> = {\n        list,\n        open,\n        placeholder,\n        toggleOpen,\n        clearValue: () => list.state.setSelected({}),\n        ref: handleControlRef,\n        size,\n        value,\n        disabled,\n        id: treeSelectId,\n        activeItemId: list.state.activeItemId,\n        title,\n        errorMessage: isErrorIconVisible ? errorMessage : undefined,\n        errorPlacement,\n        validationState,\n        hasClear,\n        isErrorVisible: isErrorStateVisible,\n    };\n\n    const togglerNode = renderControl ? (\n        renderControl(controlProps)\n    ) : (\n        <SelectControl\n            {...controlProps}\n            selectedOptionsContent={React.Children.toArray(\n                value.map((itemId) =>\n                    itemId in list.structure.itemsById\n                        ? mapItemDataToContentProps(list.structure.itemsById[itemId]).title\n                        : '',\n                ),\n            ).join(', ')}\n            view=\"normal\"\n            pin=\"round-round\"\n            popupId={popupId}\n            selectId={treeSelectId}\n        />\n    );\n\n    const mods: CnMods = {\n        ...(width === 'max' && {width}),\n    };\n\n    const inlineStyles: React.CSSProperties = {};\n\n    if (typeof width === 'number') {\n        inlineStyles.width = width;\n    }\n\n    return (\n        <div\n            ref={controlWrapRef}\n            {...focusWithinProps}\n            className={b(mods, className)}\n            style={inlineStyles}\n        >\n            {togglerNode}\n            <SelectPopup\n                ref={controlWrapRef}\n                className={b('popup', {size}, popupClassName)}\n                controlRef={controlRef}\n                width={popupWidth}\n                placement={placement}\n                open={open}\n                handleClose={handleClose}\n                disablePortal={popupDisablePortal}\n                mobile={mobile}\n                id={popupId}\n            >\n                {slotBeforeListBody}\n\n                <TreeList<T, P>\n                    list={list}\n                    size={size}\n                    className={b('list', containerClassName)}\n                    qa={qa}\n                    multiple={multiple}\n                    id={`list-${treeSelectId}`}\n                    containerRef={containerRef}\n                    onItemClick={handleItemClick}\n                    renderContainer={renderContainer}\n                    mapItemDataToContentProps={mapItemDataToContentProps}\n                    renderItem={renderItem ?? defaultItemRenderer}\n                />\n\n                {slotAfterListBody}\n            </SelectPopup>\n            <OuterAdditionalContent\n                errorMessage={isErrorMsgVisible ? errorMessage : null}\n                errorMessageId={errorMessageId}\n            />\n        </div>\n    );\n}) as <T, P extends {} = {}>(\n    props: TreeSelectProps<T, P> & {ref?: React.Ref<HTMLDivElement>},\n) => React.ReactElement;\n"]}