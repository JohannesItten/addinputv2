{"version":3,"file":"Icon.js","sourceRoot":"../../../../src","sources":["components/Icon/Icon.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport type {QAProps} from '../types';\nimport {block} from '../utils/cn';\nimport {a11yHiddenSvgProps} from '../utils/svg';\n\nimport type {SVGIconData} from './types';\nimport {\n    getStringViewBox,\n    isComponentSvgData,\n    isSpriteData,\n    isStringSvgData,\n    isSvgrData,\n    prepareStringData,\n} from './utils';\n\nimport './Icon.scss';\n\nexport type IconData = SVGIconData;\n\ninterface IconComposition {\n    prefix?: string;\n}\n\nexport interface IconProps extends QAProps {\n    data: IconData;\n    width?: number | string;\n    height?: number | string;\n    size?: number | string;\n    fill?: string;\n    stroke?: string;\n    className?: string;\n}\n\nconst b = block('icon');\n\nexport const Icon: React.ForwardRefExoticComponent<IconProps & React.RefAttributes<SVGSVGElement>> &\n    IconComposition = React.forwardRef<SVGSVGElement, IconProps>(\n    ({data, width, height, size, className, fill = 'currentColor', stroke = 'none', qa}, ref) => {\n        // This component supports four different ways to load and use icons:\n        // - svg-react-loader\n        // - svg-sprite-loader\n        // - @svgr/webpack\n        // - string with raw svg\n\n        let w, h;\n\n        if (size) {\n            w = size;\n            h = size;\n        }\n\n        if (width) {\n            w = width;\n        }\n\n        if (height) {\n            h = height;\n        }\n\n        // Parsing viewBox to get width and height in case they were not specified\n        // For svg-react-loader svg attributes are available in component defaultProps\n        // In case with @svgr/webpack svg attributes can be fetched from the react element\n        // after calling svgr-component without any propses\n        let viewBox: string | undefined;\n\n        if (isSpriteData(data)) {\n            ({viewBox} = data);\n        } else if (isStringSvgData(data)) {\n            viewBox = getStringViewBox(data);\n        } else if (isComponentSvgData(data)) {\n            ({viewBox} = data.defaultProps);\n        } else if (isSvgrData(data)) {\n            const el = data({}) as React.ReactElement;\n\n            if (el) {\n                ({viewBox} = el.props);\n            }\n        }\n\n        if (viewBox && (!w || !h)) {\n            const values = viewBox.split(/\\s+|\\s*,\\s*/);\n\n            if (!w) {\n                w = values[2];\n            }\n            if (!h) {\n                h = values[3];\n            }\n        }\n\n        const props = {\n            xmlns: 'http://www.w3.org/2000/svg',\n            xmlnsXlink: 'http://www.w3.org/1999/xlink',\n            width: w,\n            height: h,\n            className: b(null, className),\n            fill,\n            stroke,\n            'data-qa': qa,\n            ...a11yHiddenSvgProps,\n        };\n\n        if (isStringSvgData(data)) {\n            const preparedData = prepareStringData(data);\n\n            return <svg {...props} ref={ref} dangerouslySetInnerHTML={{__html: preparedData}} />;\n        }\n\n        if (isSpriteData(data)) {\n            const href = Icon.prefix + (data.url || `#${data.id}`);\n\n            return (\n                <svg {...props} viewBox={viewBox} ref={ref}>\n                    <use href={href} xlinkHref={href} />\n                </svg>\n            );\n        }\n\n        // SVG wrapping is needed for compability with sprite-loader\n        // So we removing width and height for internal component so only external one is specifying them\n\n        const IconComponent = data;\n        if (IconComponent.defaultProps) {\n            IconComponent.defaultProps.width = IconComponent.defaultProps.height = undefined;\n        }\n\n        return (\n            <svg {...props} ref={ref}>\n                <IconComponent width={undefined} height={undefined} />\n            </svg>\n        );\n    },\n);\n\nIcon.displayName = 'Icon';\nIcon.prefix = '';\n"]}