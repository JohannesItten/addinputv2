{"version":3,"file":"utils.js","sourceRoot":"../../../../src","sources":["components/NumberInput/utils.ts"],"names":[],"mappings":"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","sourcesContent":["export const INCREMENT_BUTTON_QA = 'increment-button-qa';\nexport const DECREMENT_BUTTON_QA = 'decrement-button-qa';\nexport const CONTROL_BUTTONS_QA = 'control-buttons-qa';\n\nexport function getInputPattern(withoutFraction: boolean, positiveOnly = false) {\n    return `^([${positiveOnly ? '' : '\\\\-'}\\\\+]?\\\\d+${withoutFraction ? '' : '(?:(?:.|,)?\\\\d+)?'})+$`;\n}\n\n/* For parsing paste with units as \"- $123.45k\"\n * Other strings with mixed numbers and letters/signs would be considered as invalid\n * -------------------------------(  $1 )-------($2 )( $3 ) ($4 )------ */\nconst pastedInputParsingRegex = /^([-+]?)(?:\\D*)(\\d*)(\\.|,)?(\\d*)(?:\\D*)$/;\n\nexport function prepareStringValue(value: string): string {\n    return value\n        .replace(',', '.')\n        .replace(/\\s/g, '')\n        .replace(/[^\\d.+-]/g, '');\n}\n\nexport function getPossibleNumberSubstring(\n    value: string,\n    allowDecimal: boolean,\n): string | undefined {\n    const preparedString = prepareStringValue(value);\n    const match = pastedInputParsingRegex.exec(preparedString);\n    if (!match || (value.length > 0 && preparedString.length === 0)) {\n        return undefined;\n    }\n\n    const possibleNumberString = [\n        match[1], // sign\n        match[2], // integer part\n        allowDecimal ? match[3] : undefined, // dot\n        match[4], // fraction\n    ]\n        .filter(Boolean)\n        .join('');\n\n    return possibleNumberString;\n}\n\nexport function getParsedValue(value: string | undefined): {valid: boolean; value: number | null} {\n    if (value === undefined || value === '') {\n        return {valid: true, value: null};\n    }\n    const parsedValueOrNaN = Number(value);\n\n    const isValidValue = !Number.isNaN(parsedValueOrNaN);\n    const parsedValue = isValidValue ? parsedValueOrNaN : null;\n\n    return {valid: isValidValue, value: parsedValue};\n}\n\nfunction roundIfNecessary(value: number, allowDecimal: boolean) {\n    return allowDecimal ? value : Math.floor(value);\n}\n\ninterface VariablesProps {\n    min: number | undefined;\n    max: number | undefined;\n    step: number | undefined;\n    shiftMultiplier: number;\n    value: number | null | undefined;\n    defaultValue: number | null | undefined;\n    allowDecimal: boolean;\n}\nexport function getInternalState(props: VariablesProps): {\n    min: number | undefined;\n    max: number | undefined;\n    step: number;\n    shiftMultiplier: number;\n    value: number | null | undefined;\n    defaultValue: number | null | undefined;\n} {\n    const {\n        min: externalMin,\n        max: externalMax,\n        step: externalStep = 1,\n        shiftMultiplier: externalShiftMultiplier,\n        value: externalValue,\n        allowDecimal,\n        defaultValue: externalDefaultValue,\n    } = props;\n\n    const {min: rangedMin, max: rangedMax} =\n        externalMin && externalMax && externalMin > externalMax\n            ? {\n                  min: externalMax,\n                  max: externalMin,\n              }\n            : {min: externalMin, max: externalMax};\n\n    const min =\n        rangedMin !== undefined && rangedMin >= Number.MIN_SAFE_INTEGER ? rangedMin : undefined;\n    const max =\n        rangedMax !== undefined && rangedMax <= Number.MAX_SAFE_INTEGER ? rangedMax : undefined;\n\n    const step = roundIfNecessary(Math.abs(externalStep), allowDecimal) || 1;\n    const shiftMultiplier = roundIfNecessary(externalShiftMultiplier, allowDecimal) || 10;\n    const value = externalValue ? roundIfNecessary(externalValue, allowDecimal) : externalValue;\n    const defaultValue = externalDefaultValue\n        ? roundIfNecessary(externalDefaultValue, allowDecimal)\n        : externalDefaultValue;\n\n    return {min, max, step, shiftMultiplier, value, defaultValue};\n}\n\nexport function clampToNearestStepValue({\n    value,\n    step,\n    min: originalMin,\n    max = Number.MAX_SAFE_INTEGER,\n    direction,\n}: {\n    value: number;\n    step: number;\n    min: number | undefined;\n    max: number | undefined;\n    direction?: 'up' | 'down';\n}) {\n    const base = originalMin || 0;\n    const min = originalMin ?? Number.MIN_SAFE_INTEGER;\n    let clampedValue = toFixedNumber(value, step);\n\n    if (clampedValue > max) {\n        clampedValue = max;\n    } else if (clampedValue < min) {\n        clampedValue = min;\n    }\n    if (!Number.isInteger(value) || !Number.isInteger(step)) {\n        // calculations with decimal values can bring inaccuracy with lots of zeros\n        return clampedValue;\n    }\n    const amountOfStepsDiff = Math.floor((clampedValue - base) / step);\n    const stepDeviation = clampedValue - base - step * amountOfStepsDiff;\n\n    if (stepDeviation !== 0) {\n        const smallerPossibleValue = base + amountOfStepsDiff * step;\n        const greaterPossibleValue = base + (amountOfStepsDiff + 1) * step;\n\n        const smallerValueIsPreferrable = direction\n            ? direction === 'up'\n            : greaterPossibleValue - clampedValue > clampedValue - smallerPossibleValue;\n\n        if (\n            (greaterPossibleValue > max || smallerValueIsPreferrable) &&\n            smallerPossibleValue >= min\n        ) {\n            return smallerPossibleValue;\n        }\n        if (greaterPossibleValue <= max) {\n            return greaterPossibleValue;\n        }\n    }\n\n    return toFixedNumber(clampedValue, step);\n}\n\nexport function updateCursorPosition(\n    inputRef: React.RefObject<HTMLInputElement>,\n    eventRawValue: string | undefined = '',\n    computedEventValue: string | undefined = '',\n) {\n    const currentSelectionEndPosition = inputRef.current?.selectionEnd ?? eventRawValue.length;\n    if (eventRawValue !== computedEventValue) {\n        const startingPossiblyChangedPart = eventRawValue.slice(0, currentSelectionEndPosition);\n        const trailingUnchangedLength = eventRawValue.length - startingPossiblyChangedPart.length;\n\n        const newStartingPart = computedEventValue.slice(\n            0,\n            computedEventValue.length - trailingUnchangedLength,\n        );\n\n        inputRef.current?.setRangeText(\n            newStartingPart,\n            0,\n            startingPossiblyChangedPart.length,\n            'end',\n        );\n    }\n}\n\n// Useful when in input string '-1.' is typed and value={-1} prop passed.\n// In this case we leave input string without replacing it by '-1'.\n// Means that where is no need for replacing current input value with external value\nexport function areStringRepresentationOfNumbersEqual(v1: string, v2: string) {\n    if (v1 === v2) {\n        return true;\n    }\n\n    const {valid: v1Valid, value: v1Value} = getParsedValue(v1);\n    const {valid: v2Valid, value: v2Value} = getParsedValue(v2);\n\n    if (v1Valid && v2Valid) {\n        return v1Value === v2Value;\n    }\n\n    const v1OnlyNumbers = v1.replace(/\\D/g, '');\n    const v2OnlyNumbers = v2.replace(/\\D/g, '');\n\n    if (v1OnlyNumbers.length === v2OnlyNumbers.length && v1OnlyNumbers.length === 0) {\n        // exmpl, when just '-' typed and '' (equivalent for undefined) value passed\n        return true;\n    }\n    return false;\n}\n\nfunction toFixedNumber(value: number, baseStep: number): number {\n    const stepDecimalDigits = baseStep.toString().split('.')[1]?.length || 0;\n    return parseFloat(value.toFixed(stepDecimalDigits));\n}\n"]}