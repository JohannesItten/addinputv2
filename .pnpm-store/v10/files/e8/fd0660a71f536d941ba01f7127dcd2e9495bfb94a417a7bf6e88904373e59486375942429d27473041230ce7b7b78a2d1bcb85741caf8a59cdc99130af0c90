{"version":3,"file":"useIntersection.js","sourceRoot":"../../../../src","sources":["hooks/useIntersection/useIntersection.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAQ/B,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,EAAC,OAAO,EAAE,OAAO,EAAE,WAAW,EAAuB,EAAE,EAAE;IACrF,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACjB,MAAM,QAAQ,GAAG,IAAI,oBAAoB,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,EAAE;YAClD,IAAI,KAAK,CAAC,cAAc,EAAE,CAAC;gBACvB,WAAW,EAAE,EAAE,CAAC;YACpB,CAAC;QACL,CAAC,EAAE,OAAO,CAAC,CAAC;QAEZ,IAAI,OAAO,EAAE,CAAC;YACV,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAC9B,CAAC;QAED,OAAO,GAAG,EAAE,CAAC,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;IAC9E,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,WAAW,CAAC,CAAC,CAAC;AACxC,CAAC,CAAC","sourcesContent":["import * as React from 'react';\n\nexport type UseIntersectionProps = {\n    element: Element | null;\n    options?: IntersectionObserverInit;\n    onIntersect?: () => void;\n};\n\nexport const useIntersection = ({element, options, onIntersect}: UseIntersectionProps) => {\n    React.useEffect(() => {\n        const observer = new IntersectionObserver(([entry]) => {\n            if (entry.isIntersecting) {\n                onIntersect?.();\n            }\n        }, options);\n\n        if (element) {\n            observer.observe(element);\n        }\n\n        return () => (element === null ? undefined : observer.unobserve(element));\n    }, [element, options, onIntersect]);\n};\n"]}