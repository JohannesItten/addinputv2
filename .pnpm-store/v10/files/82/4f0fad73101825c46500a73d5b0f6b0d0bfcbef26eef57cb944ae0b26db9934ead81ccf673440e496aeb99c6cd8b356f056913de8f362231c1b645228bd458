{"version":3,"file":"withTheme.js","sourceRoot":"../../../../src","sources":["components/theme/withTheme.tsx"],"names":[],"mappings":";AAEA,OAAO,EAAC,gBAAgB,EAAC,qCAAkC;AAG3D,OAAO,EAAC,QAAQ,EAAC,sBAAmB;AAIpC,MAAM,UAAU,SAAS,CACrB,gBAAwC;IAExC,MAAM,aAAa,GAAG,gBAAgB,CAAC,gBAAgB,CAAC,CAAC;IAEzD,MAAM,SAAS,GAAG,SAAS,kBAAkB,CAAC,KAAoC;QAC9E,MAAM,KAAK,GAAG,QAAQ,EAAE,CAAC;QACzB,OAAO,KAAC,gBAAgB,OAAM,KAAW,EAAE,KAAK,EAAE,KAAK,GAAI,CAAC;IAChE,CAAC,CAAC;IAEF,SAAS,CAAC,WAAW,GAAG,aAAa,aAAa,GAAG,CAAC;IAEtD,OAAO,SAAS,CAAC;AACrB,CAAC","sourcesContent":["import type * as React from 'react';\n\nimport {getComponentName} from '../utils/getComponentName';\n\nimport type {ThemeContextProps} from './types';\nimport {useTheme} from './useTheme';\n\nexport interface WithThemeProps extends Pick<ThemeContextProps, 'theme'> {}\n\nexport function withTheme<T extends WithThemeProps>(\n    WrappedComponent: React.ComponentType<T>,\n): React.ComponentType<Omit<T, keyof WithThemeProps>> {\n    const componentName = getComponentName(WrappedComponent);\n\n    const component = function WithThemeComponent(props: Omit<T, keyof WithThemeProps>) {\n        const theme = useTheme();\n        return <WrappedComponent {...(props as T)} theme={theme} />;\n    };\n\n    component.displayName = `withTheme(${componentName})`;\n\n    return component;\n}\n"]}