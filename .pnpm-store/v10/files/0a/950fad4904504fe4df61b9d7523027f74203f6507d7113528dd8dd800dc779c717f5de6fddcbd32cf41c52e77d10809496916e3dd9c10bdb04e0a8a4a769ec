{"version":3,"file":"PasswordInput.js","sourceRoot":"../../../../../src","sources":["components/controls/PasswordInput/PasswordInput.tsx"],"names":[],"mappings":"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","sourcesContent":["'use client';\n\nimport * as React from 'react';\n\nimport {Eye, EyeSlash} from '@gravity-ui/icons';\n\nimport {useControlledState} from '../../../hooks';\nimport {ActionTooltip} from '../../ActionTooltip';\nimport {Button} from '../../Button';\nimport {ClipboardButton} from '../../ClipboardButton';\nimport {Icon} from '../../Icon';\nimport {block} from '../../utils/cn';\nimport {TextInput} from '../TextInput';\nimport type {TextInputProps} from '../TextInput';\n\nimport {PasswordInputQa} from './constants';\nimport {i18n} from './i18n';\nimport {getActionButtonSizeAndIconSize} from './utils';\n\nimport './PasswordInput.scss';\n\nconst b = block('password-input');\n\nexport type PasswordInputProps = Omit<TextInputProps, 'type'> & {\n    /** Hide copy button */\n    hideCopyButton?: boolean;\n    /** Hide reveal button */\n    hideRevealButton?: boolean;\n    /** Determines whether to display the tooltip for the copy button */\n    showCopyTooltip?: boolean;\n    /** Determines whether to display the tooltip for the reveal button */\n    showRevealTooltip?: boolean;\n    /** Determines the visibility state of the password input field */\n    revealValue?: boolean;\n    /** A callback function that is invoked whenever the revealValue state changes */\n    onRevealValueUpdate?: (value: boolean) => void;\n};\n\nexport const PasswordInput = (props: PasswordInputProps) => {\n    const {\n        autoComplete,\n        controlProps,\n        endContent,\n        hideCopyButton = false,\n        hideRevealButton = false,\n        showCopyTooltip = false,\n        showRevealTooltip = false,\n        size = 'm',\n    } = props;\n\n    const [inputValue, setInputValue] = useControlledState(\n        props.value,\n        props.defaultValue ?? '',\n        props.onUpdate,\n    );\n\n    const [revealValue, setRevealValue] = useControlledState(\n        props.revealValue,\n        false,\n        props.onRevealValueUpdate,\n    );\n\n    const {actionButtonSize, iconSize} = getActionButtonSizeAndIconSize(size);\n\n    const additionalEndContent = (\n        <React.Fragment>\n            {endContent}\n            {inputValue && !hideCopyButton && !props.disabled ? (\n                <ClipboardButton\n                    view=\"flat-secondary\"\n                    text={inputValue}\n                    hasTooltip={showCopyTooltip}\n                    size={actionButtonSize}\n                    className={b('copy-button')}\n                    qa={PasswordInputQa.copyButton}\n                />\n            ) : null}\n            {hideRevealButton ? null : (\n                <ActionTooltip\n                    disabled={!showRevealTooltip}\n                    title={revealValue ? i18n('label_hide-password') : i18n('label_show-password')}\n                >\n                    <Button\n                        qa={PasswordInputQa.revealButton}\n                        view=\"flat-secondary\"\n                        disabled={props.disabled}\n                        onClick={() => setRevealValue(!revealValue)}\n                        size={actionButtonSize}\n                        onMouseDown={(event: React.SyntheticEvent) => event.preventDefault()}\n                        aria-label={\n                            revealValue ? i18n('label_hide-password') : i18n('label_show-password')\n                        }\n                    >\n                        <Icon data={revealValue ? EyeSlash : Eye} size={iconSize} />\n                    </Button>\n                </ActionTooltip>\n            )}\n        </React.Fragment>\n    );\n\n    return (\n        <TextInput\n            {...props}\n            type={revealValue ? 'text' : 'password'}\n            endContent={additionalEndContent}\n            autoComplete={autoComplete ? autoComplete : 'new-password'}\n            controlProps={{\n                ...controlProps,\n                className: b('input-control', controlProps?.className),\n            }}\n            value={inputValue}\n            onUpdate={setInputValue}\n        />\n    );\n};\n"]}