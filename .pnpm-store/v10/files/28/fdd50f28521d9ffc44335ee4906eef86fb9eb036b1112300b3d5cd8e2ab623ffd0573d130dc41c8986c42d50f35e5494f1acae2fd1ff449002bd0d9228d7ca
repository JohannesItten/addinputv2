{"version":3,"file":"useActiveItemIndex.js","sourceRoot":"../../../../../src","sources":["components/Select/hooks/useActiveItemIndex.ts"],"names":[],"mappings":";;AAIA,gDAiCC;;AArCD,qDAA+B;AAI/B,SAAgB,kBAAkB,CAAC,EAC/B,OAAO,EACP,KAAK,EACL,IAAI,GAKP;IACG,MAAM,CAAC,WAAW,EAAE,cAAc,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAqB,GAAG,EAAE;QAC1E,IAAI,IAAI,EAAE,CAAC;YACP,OAAO,yBAAyB,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QACrD,CAAC;QACD,OAAO,SAAS,CAAC;IACrB,CAAC,CAAC,CAAC;IACH,MAAM,CAAC,QAAQ,EAAE,WAAW,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IACrD,IAAI,QAAQ,KAAK,IAAI,EAAE,CAAC;QACpB,WAAW,CAAC,IAAI,CAAC,CAAC;QAClB,IAAI,IAAI,EAAE,CAAC;YACP,cAAc,CAAC,yBAAyB,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;QAC9D,CAAC;IACL,CAAC;IAED,iFAAiF;IACjF,MAAM,gBAAgB,GAClB,IAAI;QACJ,WAAW,KAAK,SAAS;QACzB,WAAW,GAAG,OAAO,CAAC,MAAM;QAC5B,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,QAAQ;QAC1B,CAAC,CAAC,WAAW;QACb,CAAC,CAAC,SAAS,CAAC;IAEpB,OAAO,CAAC,gBAAgB,EAAE,cAAc,CAAU,CAAC;AACvD,CAAC;AAED,SAAS,yBAAyB,CAAC,OAAwB,EAAE,KAAe;IACxE,IAAI,SAAS,GAAG,CAAC,CAAC,CAAC;IACnB,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QACnB,SAAS,GAAG,OAAO,CAAC,SAAS,CACzB,CAAC,IAAI,EAAE,EAAE,CAAC,OAAO,IAAI,IAAI,IAAI,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAC5E,CAAC;IACN,CAAC;IACD,IAAI,SAAS,KAAK,CAAC,CAAC,EAAE,CAAC;QACnB,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,OAAO,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC/E,CAAC;IACD,OAAO,SAAS,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC;AACpD,CAAC","sourcesContent":["import * as React from 'react';\n\nimport type {FlattenOption} from '../utils';\n\nexport function useActiveItemIndex({\n    options,\n    value,\n    open,\n}: {\n    options: FlattenOption[];\n    open: boolean;\n    value: string[];\n}) {\n    const [activeIndex, setActiveIndex] = React.useState<number | undefined>(() => {\n        if (open) {\n            return getInitialActiveItemIndex(options, value);\n        }\n        return undefined;\n    });\n    const [prevOpen, setPrevOpen] = React.useState(open);\n    if (prevOpen !== open) {\n        setPrevOpen(open);\n        if (open) {\n            setActiveIndex(getInitialActiveItemIndex(options, value));\n        }\n    }\n\n    // TODO: save active item if options are changed (e.g. when options are filtered)\n    const activeIndexFinal =\n        open &&\n        activeIndex !== undefined &&\n        activeIndex < options.length &&\n        !options[activeIndex].disabled\n            ? activeIndex\n            : undefined;\n\n    return [activeIndexFinal, setActiveIndex] as const;\n}\n\nfunction getInitialActiveItemIndex(options: FlattenOption[], value: string[]) {\n    let itemIndex = -1;\n    if (value.length > 0) {\n        itemIndex = options.findIndex(\n            (item) => 'value' in item && value.includes(item.value) && !item.disabled,\n        );\n    }\n    if (itemIndex === -1) {\n        itemIndex = options.findIndex((item) => 'value' in item && !item.disabled);\n    }\n    return itemIndex === -1 ? undefined : itemIndex;\n}\n"]}