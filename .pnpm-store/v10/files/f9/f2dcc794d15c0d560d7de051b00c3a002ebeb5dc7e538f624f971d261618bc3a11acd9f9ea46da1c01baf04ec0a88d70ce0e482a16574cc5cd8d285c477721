{"version":3,"file":"ListItemView.js","sourceRoot":"../../../../../../src","sources":["components/useList/components/ListItemView/ListItemView.tsx"],"names":[],"mappings":";;;;;AAAA,qDAA+B;AAE/B,qDAAwC;AAExC,kDAAgE;AAGhE,kEAAuF;AACvF,wCAA2B;AAiDd,QAAA,YAAY,GAAG,KAAK,CAAC,UAAU,CAAC,SAAS,YAAY,CAG9D,EACI,EAAE,EACF,EAAE,EAAE,OAAO,EACX,IAAI,GAAG,GAAG,EACV,MAAM,EACN,QAAQ,EACR,QAAQ,EACR,iBAAiB,GAAG,UAAU,EAC9B,aAAa,EAAE,kBAAkB,EACjC,SAAS,EACT,MAAM,EACN,QAAQ,EACR,KAAK,EAAE,UAAU,EACjB,OAAO,EACP,IAAI,GAAG,QAAQ,EACf,OAAO,EAAE,QAAQ,EACjB,GAAG,IAAI,EACY,EACvB,GAAwB;IAExB,MAAM,GAAG,GAAsB,OAAO,IAAI,IAAI,CAAC;IAC/C,MAAM,OAAO,GAAG,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,QAAQ,CAAC;IAChD,MAAM,aAAa,GACf,OAAO,kBAAkB,KAAK,SAAS,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IACpF,MAAM,KAAK,GAAG;QACV,SAAS,EAAE,6BACP,MAAM;YACN,uBAAW,CAAC,IAAI,CAAC,CACb,MAAM,CAAC,OAAO,CAAC,IAAA,iDAA2B,EAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAEzF,KAAK;QACL,GAAG,UAAU;KAChB,CAAC;IAEF,OAAO,CACH,uBAAC,GAAG,IACK,CAAC,8BAAkB,CAAC,EAAE,EAAE,EAC7B,IAAI,EAAE,IAAI,mBACK,QAAQ,EACvB,OAAO,EAAE,OAAO,EAChB,SAAS,EAAE,IAAA,UAAC,EACR;YACI,MAAM,EAAE,QAAQ,IAAI,MAAM;YAC1B,QAAQ,EAAE,QAAQ,IAAI,iBAAiB,KAAK,QAAQ;YACpD,aAAa;YACb,MAAM,EAAE,IAAI;YACZ,IAAI;YACJ,QAAQ;YACR,SAAS,EAAE,OAAO,CAAC,OAAO,CAAC;SAC9B,EACD,IAAA,gBAAO,EAAC,EAAC,EAAE,EAAE,CAAC,EAAC,EAAE,SAAS,CAAC,CAC9B,EACD,KAAK,EAAE,KAAK,EACZ,GAAG,EAAE,GAAG,KACJ,IAAI,YAEP,IAAA,iDAA2B,EAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CACpC,uBAAC,yCAAmB,OACZ,OAAO,EACX,gBAAgB,EAAE,iBAAiB,KAAK,UAAU,EAClD,QAAQ,EAAE,QAAQ,EAClB,QAAQ,EAAE,QAAQ,GACpB,CACL,CAAC,CAAC,CAAC,CACA,OAAO,CACV,GACC,CACT,CAAC;AACN,CAAC,CAGwF,CAAC","sourcesContent":["import * as React from 'react';\n\nimport {spacing} from '../../../layout';\nimport type {QAProps} from '../../../types';\nimport {LIST_ITEM_DATA_ATR, modToHeight} from '../../constants';\nimport type {ListItemId, ListItemSize, ListItemViewContentType} from '../../types';\n\nimport {ListItemViewContent, isListItemContentPropsGuard} from './ListItemViewContent';\nimport {b} from './styles';\n\nexport interface ListItemViewCommonProps<T extends React.ElementType = 'li'> extends QAProps {\n    /**\n     * @default `m`\n     */\n    size?: ListItemSize;\n    /**\n     * `[${LIST_ITEM_DATA_ATR}=\"${id}\"]` data attribute to find element.\n     * For example for scroll to\n     */\n    id: ListItemId;\n    /**\n     * Note: if passed and `disabled` option is `true` click will not be appear\n     */\n    onClick?: React.ComponentPropsWithoutRef<T>['onClick'];\n    selected?: boolean;\n    disabled?: boolean;\n    active?: boolean;\n    selectionViewType?: 'single' | 'multiple';\n    content: ListItemViewContentType;\n}\n\nexport interface ListItemViewProps<T extends React.ElementType = 'li'>\n    extends Omit<ListItemViewCommonProps<T>, 'content'> {\n    /**\n     * Ability to override default html tag\n     */\n    as?: T;\n    height?: number;\n    /**\n     * By default hovered elements has active styles. You can disable this behavior\n     */\n    activeOnHover?: boolean;\n    style?: React.CSSProperties;\n    className?: string;\n    role?: React.AriaRole;\n    /**\n     * Add active styles and change selection behavior during dnd is performing\n     */\n    dragging?: boolean;\n    content: ListItemViewContentType | React.ReactNode;\n}\n\ntype ListItemViewRef<C extends React.ElementType> = React.ComponentPropsWithRef<C>['ref'];\n\ntype ListItemViewPropsWithTypedAttrs<T extends React.ElementType> = ListItemViewProps<T> &\n    Omit<React.ComponentPropsWithoutRef<T>, keyof ListItemViewProps<T>>;\n\nexport const ListItemView = React.forwardRef(function ListItemView<\n    T extends React.ElementType = 'li',\n>(\n    {\n        id,\n        as: asProps,\n        size = 'm',\n        active,\n        selected,\n        disabled,\n        selectionViewType = 'multiple',\n        activeOnHover: propsActiveOnHover,\n        className,\n        height,\n        dragging,\n        style: propsStyle,\n        content,\n        role = 'option',\n        onClick: _onClick,\n        ...rest\n    }: ListItemViewProps<T>,\n    ref?: ListItemViewRef<T>,\n) {\n    const Tag: React.ElementType = asProps || 'li';\n    const onClick = disabled ? undefined : _onClick;\n    const activeOnHover =\n        typeof propsActiveOnHover === 'boolean' ? propsActiveOnHover : Boolean(onClick);\n    const style = {\n        minHeight: `var(--g-list-item-height, ${\n            height ??\n            modToHeight[size][\n                Number(Boolean(isListItemContentPropsGuard(content) ? content?.subtitle : false))\n            ]\n        }px)`,\n        ...propsStyle,\n    };\n\n    return (\n        <Tag\n            {...{[LIST_ITEM_DATA_ATR]: id}}\n            role={role}\n            aria-selected={selected}\n            onClick={onClick}\n            className={b(\n                {\n                    active: dragging || active,\n                    selected: selected && selectionViewType === 'single',\n                    activeOnHover,\n                    radius: size,\n                    size,\n                    dragging,\n                    clickable: Boolean(onClick),\n                },\n                spacing({px: 2}, className),\n            )}\n            style={style}\n            ref={ref}\n            {...rest}\n        >\n            {isListItemContentPropsGuard(content) ? (\n                <ListItemViewContent\n                    {...content}\n                    hasSelectionIcon={selectionViewType === 'multiple'}\n                    selected={selected}\n                    disabled={disabled}\n                />\n            ) : (\n                content\n            )}\n        </Tag>\n    );\n}) as <C extends React.ElementType = 'li'>({\n    ref,\n    ...props\n}: ListItemViewPropsWithTypedAttrs<C> & {ref?: ListItemViewRef<C>}) => React.ReactElement;\n"]}