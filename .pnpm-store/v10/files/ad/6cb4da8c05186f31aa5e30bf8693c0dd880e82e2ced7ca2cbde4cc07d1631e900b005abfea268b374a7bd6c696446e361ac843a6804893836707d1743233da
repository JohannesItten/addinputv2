{"version":3,"file":"hooks.js","sourceRoot":"../../../../src","sources":["components/Popup/hooks.ts"],"names":[],"mappings":";;AAIA,8BAmBC;;AAvBD,qDAA+B;AAI/B,SAAgB,SAAS,CACrB,aAAoD,EACpD,SAAqC;IAKrC,MAAM,gBAAgB,GAAG,KAAK,CAAC,MAAM,CAAC,aAAa,IAAI,IAAI,CAAC,CAAC;IAC7D,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACjB,gBAAgB,CAAC,OAAO,GAAG,aAAa,IAAI,IAAI,CAAC;IACrD,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC;IAEpB,IAAI,aAAa,KAAK,SAAS,EAAE,CAAC;QAC9B,OAAO,EAAC,OAAO,EAAE,aAAa,EAAE,GAAG,EAAE,gBAAgB,EAAC,CAAC;IAC3D,CAAC;SAAM,IAAI,SAAS,EAAE,CAAC;QACnB,OAAO,EAAC,OAAO,EAAE,SAAS,CAAC,OAAO,EAAE,GAAG,EAAE,SAAS,EAAC,CAAC;IACxD,CAAC;IAED,OAAO,EAAC,OAAO,EAAE,SAAS,EAAE,GAAG,EAAE,SAAS,EAAC,CAAC;AAChD,CAAC","sourcesContent":["import * as React from 'react';\n\nimport type {PopupAnchorElement, PopupAnchorRef} from './types';\n\nexport function useAnchor(\n    anchorElement: PopupAnchorElement | null | undefined,\n    anchorRef: PopupAnchorRef | undefined,\n): {\n    element: PopupAnchorElement | null | undefined;\n    ref: PopupAnchorRef | undefined;\n} {\n    const anchorElementRef = React.useRef(anchorElement ?? null);\n    React.useEffect(() => {\n        anchorElementRef.current = anchorElement ?? null;\n    }, [anchorElement]);\n\n    if (anchorElement !== undefined) {\n        return {element: anchorElement, ref: anchorElementRef};\n    } else if (anchorRef) {\n        return {element: anchorRef.current, ref: anchorRef};\n    }\n\n    return {element: undefined, ref: undefined};\n}\n"]}