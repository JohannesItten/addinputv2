{"version":3,"file":"utils.js","sourceRoot":"../../../../src","sources":["components/FilePreview/utils.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,UAAU,EAAC,mBAAgB;AAEnC,MAAM,qBAAqB,GAAG,CAAC,GAAW,EAAmB,EAAE,CAC3D,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,WAAW,EAAc,CAAC,CAAC;AAEvD,MAAM,wBAAwB,GAA6B;IACvD,0BAA0B,EAAE,SAAS;IACrC,6BAA6B,EAAE,OAAO;IACtC,uBAAuB,EAAE,MAAM;IAC/B,wBAAwB,EAAE,MAAM;IAChC,sBAAsB,EAAE,MAAM;IAC9B,yBAAyB,EAAE,MAAM;IACjC,iBAAiB,EAAE,OAAO;IAC1B,mBAAmB,EAAE,OAAO;IAC5B,0BAA0B,EAAE,OAAO;IACnC,yBAAyB,EAAE,OAAO;IAClC,yEAAyE,EAAE,MAAM;IACjF,0BAA0B,EAAE,MAAM;IAClC,oBAAoB,EAAE,SAAS;IAC/B,0BAA0B,EAAE,MAAM;IAClC,gCAAgC,EAAE,MAAM;IACxC,mBAAmB,EAAE,MAAM;IAC3B,0BAA0B,EAAE,MAAM;IAClC,kBAAkB,EAAE,MAAM;IAC1B,iBAAiB,EAAE,OAAO;IAC1B,iBAAiB,EAAE,KAAK;IACxB,0BAA0B,EAAE,KAAK;IACjC,yBAAyB,EAAE,MAAM;IACjC,iBAAiB,EAAE,MAAM;IACzB,mBAAmB,EAAE,MAAM;IAC3B,gCAAgC,EAAE,MAAM;IACxC,oBAAoB,EAAE,MAAM;IAC5B,mBAAmB,EAAE,SAAS;IAC9B,iBAAiB,EAAE,SAAS;IAC5B,8BAA8B,EAAE,SAAS;IACzC,mBAAmB,EAAE,SAAS;IAC9B,+BAA+B,EAAE,SAAS;IAC1C,uBAAuB,EAAE,MAAM;IAC/B,mBAAmB,EAAE,OAAO;IAC5B,qBAAqB,EAAE,OAAO;IAC9B,uBAAuB,EAAE,OAAO;IAChC,wBAAwB,EAAE,OAAO;IACjC,qBAAqB,EAAE,OAAO;IAC9B,4BAA4B,EAAE,OAAO;IACrC,iBAAiB,EAAE,OAAO;IAC1B,mBAAmB,EAAE,OAAO;IAC5B,mEAAmE,EAAE,OAAO;IAC5E,0BAA0B,EAAE,OAAO;IACnC,iBAAiB,EAAE,MAAM;IACzB,mBAAmB,EAAE,SAAS;IAC9B,iBAAiB,EAAE,SAAS;IAC5B,8BAA8B,EAAE,SAAS;IACzC,0BAA0B,EAAE,SAAS;IACrC,iBAAiB,EAAE,SAAS;CAC/B,CAAC;AAKF,MAAM,UAAU,WAAW,CAAC,GAAwB;IAChD,MAAM,QAAQ,GAAiB,OAAO,GAAG,KAAK,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC;IAExE,IAAI,qBAAqB,CAAC,QAAQ,CAAC,EAAE,CAAC;QAClC,OAAO,QAAQ,CAAC;IACpB,CAAC;IAED,MAAM,gBAAgB,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAEhD,IAAI,qBAAqB,CAAC,gBAAgB,CAAC,EAAE,CAAC;QAC1C,OAAO,gBAAgB,CAAC;IAC5B,CAAC;IAED,OAAO,wBAAwB,CAAC,QAAQ,CAAC,IAAI,SAAS,CAAC;AAC3D,CAAC","sourcesContent":["import type {FileType} from './types';\nimport {FILE_TYPES} from './types';\n\nconst isFilePreviewFileType = (str: string): str is FileType =>\n    FILE_TYPES.includes(str.toLowerCase() as FileType);\n\nconst APPLICATION_MIME_TO_TYPE: Record<string, FileType> = {\n    'application/x-compressed': 'archive',\n    'application/x-troff-msvideo': 'video',\n    'application/macbinary': 'code',\n    'application/mac-binary': 'code',\n    'application/x-binary': 'code',\n    'application/x-macbinary': 'code',\n    'application/bmp': 'image',\n    'application/x-bmp': 'image',\n    'application/x-win-bitmap': 'image',\n    'application/vnd.msexcel': 'image',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document': 'text',\n    'application/x-msdownload': 'code',\n    'application/x-gzip': 'archive',\n    'application/java-archive': 'code',\n    'application/x-java-application': 'code',\n    'application/x-jar': 'code',\n    'application/x-javascript': 'code',\n    'application/json': 'code',\n    'application/ogg': 'audio',\n    'application/pdf': 'pdf',\n    'application/octet-stream': 'pdf',\n    'application/x-httpd-php': 'code',\n    'application/php': 'code',\n    'application/x-php': 'code',\n    'application/x-httpd-php-source': 'code',\n    'application/msword': 'text',\n    'application/x-rar': 'archive',\n    'application/rar': 'archive',\n    'application/x-rar-compressed': 'archive',\n    'application/x-tar': 'archive',\n    'application/x-gzip-compressed': 'archive',\n    'application/xhtml+xml': 'code',\n    'application/excel': 'table',\n    'application/msexcel': 'table',\n    'application/x-msexcel': 'table',\n    'application/x-ms-excel': 'table',\n    'application/x-excel': 'table',\n    'application/x-dos_ms_excel': 'table',\n    'application/xls': 'table',\n    'application/x-xls': 'table',\n    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': 'table',\n    'application/vnd.ms-excel': 'table',\n    'application/xml': 'code',\n    'application/x-zip': 'archive',\n    'application/zip': 'archive',\n    'application/x-zip-compressed': 'archive',\n    'application/s-compressed': 'archive',\n    'multipart/x-zip': 'archive',\n};\n\nexport function getFileType(fileType: File['type']): FileType;\nexport function getFileType(file: File): FileType;\n\nexport function getFileType(arg: File | File['type']): FileType {\n    const fileType: File['type'] = typeof arg === 'string' ? arg : arg.type;\n\n    if (isFilePreviewFileType(fileType)) {\n        return fileType;\n    }\n\n    const splittedFileType = fileType.split('/')[0];\n\n    if (isFilePreviewFileType(splittedFileType)) {\n        return splittedFileType;\n    }\n\n    return APPLICATION_MIME_TO_TYPE[fileType] || 'default';\n}\n"]}