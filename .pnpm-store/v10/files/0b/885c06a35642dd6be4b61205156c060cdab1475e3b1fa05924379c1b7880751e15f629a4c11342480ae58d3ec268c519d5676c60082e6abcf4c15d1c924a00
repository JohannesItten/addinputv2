{"version":3,"file":"useElementSize.js","sourceRoot":"../../../../../src","sources":["hooks/private/useElementSize/useElementSize.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,KAAK,wBAAqB;AACjC,OAAO,QAAQ,2BAAwB;AAEvC,MAAM,eAAe,GAAG,EAAE,CAAC;AAC3B,MAAM,eAAe,GAAG,CAAC,CAAC;AAO1B,MAAM,UAAU,cAAc,CAC1B,GAA4C;AAC5C,uEAAuE;AACvE,8DAA8D;AAC9D,oDAAoD;AACpD,GAAY;IAEZ,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAuB;QACzD,KAAK,EAAE,CAAC;QACR,MAAM,EAAE,CAAC;KACZ,CAAC,CAAC;IAEH,KAAK,CAAC,eAAe,CAAC,GAAG,EAAE;QACvB,MAAM,OAAO,GAAG,GAAG,EAAE,OAAO,CAAC;QAC7B,IAAI,CAAC,OAAO,EAAE,CAAC;YACX,OAAO,SAAS,CAAC;QACrB,CAAC;QAED,OAAO,CAAC;YACJ,KAAK,EAAE,KAAK,CAAC,OAAO,CAAC,WAAW,EAAE,eAAe,CAAC;YAClD,MAAM,EAAE,KAAK,CAAC,OAAO,CAAC,YAAY,EAAE,eAAe,CAAC;SACvD,CAAC,CAAC;QAEH,MAAM,YAAY,GAA2B,CAAC,OAAO,EAAE,EAAE;YACrD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC;gBAC1B,OAAO;YACX,CAAC;YAED,MAAM,KAAK,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;YACzB,IAAI,KAAK,CAAC,aAAa,EAAE,CAAC;gBACtB,MAAM,aAAa,GAAG,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC;oBACxC,CAAC,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC;oBACxB,CAAC,CAAE,KAAK,CAAC,aAA+C,CAAC;gBAC7D,2DAA2D;gBAC3D,8FAA8F;gBAE9F,OAAO,CAAC;oBACJ,KAAK,EAAE,KAAK,CAAC,aAAa,CAAC,UAAU,EAAE,eAAe,CAAC;oBACvD,MAAM,EAAE,KAAK,CAAC,aAAa,CAAC,SAAS,EAAE,eAAe,CAAC;iBAC1D,CAAC,CAAC;YACP,CAAC;iBAAM,CAAC;gBACJ,MAAM,MAAM,GAAG,KAAK,CAAC,MAAqB,CAAC;gBAC3C,OAAO,CAAC;oBACJ,KAAK,EAAE,KAAK,CAAC,MAAM,CAAC,WAAW,EAAE,eAAe,CAAC;oBACjD,MAAM,EAAE,KAAK,CAAC,MAAM,CAAC,YAAY,EAAE,eAAe,CAAC;iBACtD,CAAC,CAAC;YACP,CAAC;QACL,CAAC,CAAC;QAEF,MAAM,QAAQ,GAAG,IAAI,cAAc,CAAC,QAAQ,CAAC,YAAY,EAAE,eAAe,CAAC,CAAC,CAAC;QAC7E,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAE1B,OAAO,GAAG,EAAE;YACR,QAAQ,CAAC,UAAU,EAAE,CAAC;QAC1B,CAAC,CAAC;IACN,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;IAEf,OAAO,IAAI,CAAC;AAChB,CAAC","sourcesContent":["import * as React from 'react';\n\nimport round from 'lodash/round';\nimport throttle from 'lodash/throttle';\n\nconst RESIZE_THROTTLE = 16;\nconst ROUND_PRECISION = 2;\n\nexport interface UseElementSizeResult {\n    width: number;\n    height: number;\n}\n\nexport function useElementSize<T extends HTMLElement = HTMLDivElement>(\n    ref: React.MutableRefObject<T | null> | null,\n    // can be used, when it is needed to force reassign observer to element\n    // in order to get correct measures. might be related to below\n    // https://github.com/WICG/resize-observer/issues/65\n    key?: string,\n) {\n    const [size, setSize] = React.useState<UseElementSizeResult>({\n        width: 0,\n        height: 0,\n    });\n\n    React.useLayoutEffect(() => {\n        const element = ref?.current;\n        if (!element) {\n            return undefined;\n        }\n\n        setSize({\n            width: round(element.offsetWidth, ROUND_PRECISION),\n            height: round(element.offsetHeight, ROUND_PRECISION),\n        });\n\n        const handleResize: ResizeObserverCallback = (entries) => {\n            if (!Array.isArray(entries)) {\n                return;\n            }\n\n            const entry = entries[0];\n            if (entry.borderBoxSize) {\n                const borderBoxSize = entry.borderBoxSize[0]\n                    ? entry.borderBoxSize[0]\n                    : (entry.borderBoxSize as unknown as ResizeObserverSize);\n                // ...but old versions of Firefox treat it as a single item\n                // https://github.com/mdn/dom-examples/blob/main/resize-observer/resize-observer-text.html#L88\n\n                setSize({\n                    width: round(borderBoxSize.inlineSize, ROUND_PRECISION),\n                    height: round(borderBoxSize.blockSize, ROUND_PRECISION),\n                });\n            } else {\n                const target = entry.target as HTMLElement;\n                setSize({\n                    width: round(target.offsetWidth, ROUND_PRECISION),\n                    height: round(target.offsetHeight, ROUND_PRECISION),\n                });\n            }\n        };\n\n        const observer = new ResizeObserver(throttle(handleResize, RESIZE_THROTTLE));\n        observer.observe(element);\n\n        return () => {\n            observer.disconnect();\n        };\n    }, [ref, key]);\n\n    return size;\n}\n"]}