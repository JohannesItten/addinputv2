{"version":3,"file":"types.js","sourceRoot":"../../../../../src","sources":["components/legacy/Popover/types.ts"],"names":[],"mappings":"","sourcesContent":["import type {PopupAnchorElement, PopupAnchorRef, PopupOffset, PopupProps} from '../../Popup';\n\nimport type {ButtonsProps} from './components/Buttons/Buttons';\nimport type {ContentProps} from './components/Content/Content';\nimport type {LinksProps} from './components/Links/Links';\nimport type {TriggerProps} from './components/Trigger/Trigger';\nimport type {PopoverBehavior} from './config';\n\nexport type PopoverButtonProps = {\n    /**\n     * Button's text\n     */\n    text: string;\n    /**\n     * Button's click handler\n     */\n    onClick: (event: React.MouseEvent<HTMLButtonElement>) => void;\n};\n\nexport interface PopoverExternalProps {\n    /** Tooltip's trigger content over which the tooltip is shown */\n    children?: TriggerProps['children'];\n    /** Tooltip's title */\n    title?: string;\n    /** Tooltip's content */\n    content?: ContentProps['content'];\n    /** Tooltip's html content to be rendered via `dangerouslySetInnerHTML` */\n    htmlContent?: ContentProps['htmlContent'];\n    /** css class for `content` */\n    contentClassName?: string;\n    /** Links under the content */\n    links?: LinksProps['links'];\n    /**\n     * Action button properties\n     * The button won't be rendered without it\n     */\n    tooltipActionButton?: ButtonsProps['tooltipActionButton'];\n    /**\n     * Cancel button properties\n     * The button won't be rendered without it\n     */\n    tooltipCancelButton?: ButtonsProps['tooltipCancelButton'];\n    /** Tooltip's offset relative to the control */\n    tooltipOffset?: PopupOffset;\n    /** Tooltip's css class */\n    tooltipClassName?: string;\n    /** css class for the control */\n    className?: string;\n    /**\n     * Anchor click callback.\n     * If the function returns `true', the tooltip will be open, otherwise it won't be opened.\n     */\n    onClick?: TriggerProps['onClick'];\n    /**\n     * Open state change handler\n     * Might be useful for the delayed rendering of the tooltip's content.\n     */\n    onOpenChange?: (open: boolean) => void;\n    /** Close button click handler */\n    onCloseClick?: (event: React.MouseEvent<HTMLButtonElement>) => void;\n    /** Disable rendering of the popover in a portal */\n    disablePortal?: boolean;\n    /** The html id attribute of the popover */\n    tooltipId?: string;\n    /** Prevent focus from leaving the popover while open */\n    focusTrap?: boolean;\n    /** If true, focus will be transferred to the first element when the popover opens */\n    autoFocus?: boolean;\n    /** Focused element when the popover closes */\n    restoreFocusRef?: React.RefObject<HTMLElement>;\n}\n\nexport type PopoverBehaviorProps = {\n    /** Tooltip open/close behaviour when `openOnHover`\n     * Immediate - without any delay\n     * Delayed - with 300ms delay for opening and closing\n     * DelayedClosing - with 300ms delay only for closing\n     * Won't be applied if `delayOpening` or `delayClosing` are passed\n     */\n    behavior?: `${PopoverBehavior}`;\n    /**\n     * Custom delay for opening if openOnHover\n     */\n    delayOpening?: number;\n    /**\n     * Custom delay for closing if autoclosable\n     */\n    delayClosing?: number;\n};\n\nexport type PopoverTheme = 'info' | 'special' | 'announcement';\nexport type PopoverAnchorRef = PopupAnchorRef;\nexport type PopoverAnchorElement = PopupAnchorElement;\n\nexport type PopoverDefaultProps = {\n    /** Whether the tooltip initially opened */\n    initialOpen: boolean;\n    /** Disables open state changes */\n    disabled: boolean;\n    /** Whether the tooltip automatically closes when cursor moves outside it */\n    autoclosable: boolean;\n    /** Whether the tooltip opens when hovered */\n    openOnHover: boolean;\n    /** Control's offset */\n    offset: {\n        top?: number;\n        left?: number;\n        block?: number;\n        inline?: number;\n    };\n    /** Whether the tooltip has a tail */\n    hasArrow: boolean;\n    /** Whether the tooltip has a close button */\n    hasClose: boolean;\n    /** Force styles for links */\n    forceLinksAppearance: boolean;\n    /** Tooltip's theme */\n    theme: PopoverTheme;\n    /** Tooltip's size */\n    size: 's' | 'l';\n};\n\nexport type PopoverProps = Pick<\n    PopupProps,\n    'anchorElement' | 'anchorRef' | 'strategy' | 'placement'\n> &\n    PopoverExternalProps &\n    PopoverBehaviorProps &\n    Partial<PopoverDefaultProps>;\n\nexport type PopoverInstanceProps = {\n    /**\n     * Opens tooltip\n     */\n    openTooltip: () => void;\n    /**\n     * Closes tooltip\n     */\n    closeTooltip: () => void;\n};\n"]}