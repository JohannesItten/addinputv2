{"version":3,"file":"DropdownMenu.js","sourceRoot":"../../../../src","sources":["components/DropdownMenu/DropdownMenu.tsx"],"names":[],"mappings":"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","sourcesContent":["'use client';\n\nimport * as React from 'react';\n\nimport {Ellipsis} from '@gravity-ui/icons';\n\nimport {useActionHandlers} from '../../hooks/useActionHandlers';\nimport {Button} from '../Button';\nimport type {ButtonProps} from '../Button';\nimport {Icon} from '../Icon';\nimport type {MenuProps} from '../Menu';\nimport type {PopupProps} from '../Popup';\n\nimport {cnDropdownMenu} from './DropdownMenu.classname';\nimport {DropdownMenuContext} from './DropdownMenuContext';\nimport {DropdownMenuItem as DropdownMenuItemComponent} from './DropdownMenuItem';\nimport {DropdownMenuNavigationContextProvider} from './DropdownMenuNavigationContext';\nimport {DropdownMenuPopup} from './DropdownMenuPopup';\nimport {dropdownMenuSeparator} from './constants';\nimport {usePopupVisibility} from './hooks/usePopupVisibility';\nimport {useScrollHandler} from './hooks/useScrollHandler';\nimport type {\n    DropdownMenuItem,\n    DropdownMenuItemAction,\n    DropdownMenuItemMixed,\n    DropdownMenuListItem,\n    DropdownMenuSize,\n} from './types';\nimport {toItemList} from './utils/toItemList';\n\nimport './DropdownMenu.scss';\n\ntype SwitcherProps = {\n    onKeyDown: React.KeyboardEventHandler<HTMLElement>;\n    onClick: React.MouseEventHandler<HTMLElement>;\n};\n\nexport type DropdownMenuProps<T> = {\n    /**\n     * Array of items.\n     * Nested arrays of items represent visually separated groups.\n     */\n    items?: (DropdownMenuItem<T> | DropdownMenuItem<T>[])[];\n    /**\n     * Switcher icon.\n     */\n    icon?: React.ReactNode;\n    open?: boolean;\n    onOpenToggle?: (open: boolean) => void;\n    hideOnScroll?: boolean;\n    /**\n     * Applied for the switcher and the menu.\n     */\n    size?: DropdownMenuSize;\n    /**\n     * A payload passed to the actions called from the menu.\n     * (Can be useful for context menus.)\n     */\n    data?: T;\n    /**\n     * Setting this prop to `true` disables the switcher button\n     * and prevents the menu from being opened.\n     */\n    disabled?: boolean;\n    /**\n     * Menu toggle control.\n     * @deprecated Use renderSwitcher instead\n     */\n    switcher?: React.ReactNode;\n    /**\n     * Menu toggle control.\n     */\n    renderSwitcher?: (props: SwitcherProps) => React.ReactNode;\n    switcherWrapperClassName?: string;\n    /**\n     * Overrides the default switcher button props.\n     */\n    defaultSwitcherProps?: ButtonProps;\n    defaultSwitcherClassName?: string;\n    onSwitcherClick?: React.MouseEventHandler<HTMLElement>;\n    /**\n     * Overrides the default dropdown menu props.\n     */\n    menuProps?: Partial<MenuProps>;\n    /**\n     * Overrides the default dropdown popup props.\n     */\n    popupProps?: Partial<PopupProps>;\n    /**\n     * Custom content inside the menu popup.\n     */\n    children?: React.ReactNode;\n};\n\nexport type ControlledDropdownMenuProps<T> = DropdownMenuProps<T> & {\n    open: boolean;\n    onOpenToggle: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\nconst DropdownMenu = <T,>({\n    items = [],\n    size = 'm',\n    icon = <Icon data={Ellipsis} />,\n    open,\n    onOpenToggle,\n    hideOnScroll = true,\n    data,\n    disabled,\n    switcher,\n    renderSwitcher,\n    switcherWrapperClassName,\n    defaultSwitcherProps,\n    defaultSwitcherClassName,\n    onSwitcherClick,\n    menuProps,\n    popupProps,\n    children,\n}: DropdownMenuProps<T> | ControlledDropdownMenuProps<T>) => {\n    const anchorRef = React.useRef<HTMLDivElement | null>(null);\n\n    const {isPopupShown, togglePopup, closePopup} = usePopupVisibility(\n        open,\n        onOpenToggle,\n        disabled,\n    );\n\n    useScrollHandler(closePopup, anchorRef, !isPopupShown || !hideOnScroll);\n\n    const contextValue = React.useMemo(\n        () => ({\n            toggle: togglePopup,\n            data,\n        }),\n        [data, togglePopup],\n    );\n\n    const itemsList = React.useMemo(\n        () =>\n            toItemList<DropdownMenuItem<T>, DropdownMenuListItem<T>>(items, dropdownMenuSeparator),\n        [items],\n    );\n\n    const handleSwitcherClick = React.useCallback<React.MouseEventHandler<HTMLElement>>(\n        (event) => {\n            if (disabled) {\n                return;\n            }\n\n            onSwitcherClick?.(event);\n\n            togglePopup();\n        },\n        [disabled, onSwitcherClick, togglePopup],\n    );\n\n    const {onKeyDown: handleSwitcherKeyDown} = useActionHandlers(handleSwitcherClick);\n\n    const switcherProps = React.useMemo<SwitcherProps>(\n        () => ({\n            onClick: handleSwitcherClick,\n            onKeyDown: handleSwitcherKeyDown,\n        }),\n        [handleSwitcherClick, handleSwitcherKeyDown],\n    );\n\n    return (\n        <DropdownMenuContext.Provider value={contextValue}>\n            {/* FIXME remove switcher prop and this wrapper */}\n            <div\n                ref={anchorRef}\n                className={cnDropdownMenu('switcher-wrapper', switcherWrapperClassName)}\n                {...(renderSwitcher ? {} : switcherProps)}\n            >\n                {renderSwitcher?.(switcherProps) || switcher || (\n                    <Button\n                        view=\"flat\"\n                        size={size}\n                        // FIXME remove switcher prop and uncomment onClick handler\n                        // onClick={handleSwitcherClick}\n                        {...defaultSwitcherProps}\n                        className={cnDropdownMenu('switcher-button', defaultSwitcherClassName)}\n                        disabled={disabled}\n                    >\n                        {icon}\n                    </Button>\n                )}\n            </div>\n            <DropdownMenuNavigationContextProvider anchorRef={anchorRef} disabled={!isPopupShown}>\n                <DropdownMenuPopup\n                    items={itemsList}\n                    open={isPopupShown}\n                    size={size}\n                    menuProps={menuProps}\n                    anchorRef={anchorRef}\n                    onClose={closePopup}\n                    popupProps={popupProps}\n                >\n                    {children}\n                </DropdownMenuPopup>\n            </DropdownMenuNavigationContextProvider>\n        </DropdownMenuContext.Provider>\n    );\n};\n\nconst DropdownMenuExport = Object.assign(DropdownMenu, {Item: DropdownMenuItemComponent});\nexport {DropdownMenuExport as DropdownMenu};\n\nexport type {DropdownMenuItem, DropdownMenuItemMixed, DropdownMenuItemAction};\n"]}