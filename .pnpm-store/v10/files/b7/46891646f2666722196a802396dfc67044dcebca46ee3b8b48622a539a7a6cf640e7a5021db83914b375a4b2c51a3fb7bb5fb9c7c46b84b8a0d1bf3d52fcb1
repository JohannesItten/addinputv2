{"version":3,"file":"AlertIcon.js","sourceRoot":"../../../../src","sources":["components/Alert/AlertIcon.tsx"],"names":[],"mappings":";AAEA,OAAO,EACH,WAAW,EACX,eAAe,EACf,UAAU,EACV,cAAc,EACd,WAAW,EACX,eAAe,EACf,WAAW,EACX,eAAe,EACf,mBAAmB,EACnB,uBAAuB,GAC1B,MAAM,mBAAmB,CAAC;AAE3B,OAAO,EAAC,IAAI,EAAC,yBAAgB;AAE7B,OAAO,EAAC,SAAS,EAAC,uCAAoC;AAGtD,OAAO,EAAC,iBAAiB,EAAE,MAAM,EAAC,uBAAoB;AAGtD,MAAM,UAAU,GAGZ;IACA,MAAM,EAAE;QACJ,MAAM,EAAE,eAAe;QACvB,QAAQ,EAAE,WAAW;KACxB;IACD,IAAI,EAAE;QACF,MAAM,EAAE,cAAc;QACtB,QAAQ,EAAE,UAAU;KACvB;IACD,OAAO,EAAE;QACL,MAAM,EAAE,eAAe;QACvB,QAAQ,EAAE,WAAW;KACxB;IACD,OAAO,EAAE;QACL,MAAM,EAAE,uBAAuB;QAC/B,QAAQ,EAAE,mBAAmB;KAChC;IACD,OAAO,EAAE;QACL,MAAM,EAAE,eAAe;QACvB,QAAQ,EAAE,WAAW;KACxB;IACD,MAAM,EAAE,IAAI;IACZ,KAAK,EAAE,IAAI;CACd,CAAC;AAEF,MAAM,CAAC,MAAM,SAAS,GAAG,CAAC,EACtB,SAAS,EACT,KAAK,EACL,IAAI,GAAG,QAAQ,EACf,IAAI,GAAG,iBAAiB,GACX,EAAE,EAAE;IACjB,MAAM,WAAW,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;IAEtC,IAAI,CAAC,WAAW,EAAE,CAAC;QACf,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,IAAI,KAAkC,CAAC;IAEvC,IAAI,KAAK,KAAK,SAAS,EAAE,CAAC;QACtB,KAAK,GAAG,UAAU,CAAC;IACvB,CAAC;SAAM,IAAI,KAAK,KAAK,QAAQ,IAAI,KAAK,KAAK,OAAO,EAAE,CAAC;QACjD,KAAK,GAAG,KAAK,CAAC;IAClB,CAAC;IAED,OAAO,CACH,cAAK,SAAS,EAAE,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,EAAC,KAAK,EAAC,EAAE,SAAS,CAAC,CAAC,YACzD,KAAC,IAAI,IAAC,IAAI,EAAE,WAAW,CAAC,IAAI,CAAa,EAAE,IAAI,EAAE,IAAI,GAAI,GACvD,CACT,CAAC;AACN,CAAC,CAAC","sourcesContent":["import type * as React from 'react';\n\nimport {\n    CircleCheck,\n    CircleCheckFill,\n    CircleInfo,\n    CircleInfoFill,\n    CircleXmark,\n    CircleXmarkFill,\n    Thunderbolt,\n    ThunderboltFill,\n    TriangleExclamation,\n    TriangleExclamationFill,\n} from '@gravity-ui/icons';\n\nimport {Icon} from '../Icon';\nimport type {IconData} from '../Icon';\nimport {colorText} from '../Text/colorText/colorText';\nimport type {ColorTextBaseProps} from '../Text/colorText/colorText';\n\nimport {DEFAULT_ICON_SIZE, bAlert} from './constants';\nimport type {AlertIconProps, AlertTheme} from './types';\n\nconst typeToIcon: Record<\n    AlertTheme,\n    {filled: React.ElementType; outlined: React.ElementType} | null\n> = {\n    danger: {\n        filled: CircleXmarkFill,\n        outlined: CircleXmark,\n    },\n    info: {\n        filled: CircleInfoFill,\n        outlined: CircleInfo,\n    },\n    success: {\n        filled: CircleCheckFill,\n        outlined: CircleCheck,\n    },\n    warning: {\n        filled: TriangleExclamationFill,\n        outlined: TriangleExclamation,\n    },\n    utility: {\n        filled: ThunderboltFill,\n        outlined: Thunderbolt,\n    },\n    normal: null,\n    clear: null,\n};\n\nexport const AlertIcon = ({\n    className,\n    theme,\n    view = 'filled',\n    size = DEFAULT_ICON_SIZE,\n}: AlertIconProps) => {\n    const iconByTheme = typeToIcon[theme];\n\n    if (!iconByTheme) {\n        return null;\n    }\n\n    let color: ColorTextBaseProps['color'];\n\n    if (theme === 'success') {\n        color = 'positive';\n    } else if (theme !== 'normal' && theme !== 'clear') {\n        color = theme;\n    }\n\n    return (\n        <div className={bAlert('icon', colorText({color}, className))}>\n            <Icon data={iconByTheme[view] as IconData} size={size} />\n        </div>\n    );\n};\n"]}