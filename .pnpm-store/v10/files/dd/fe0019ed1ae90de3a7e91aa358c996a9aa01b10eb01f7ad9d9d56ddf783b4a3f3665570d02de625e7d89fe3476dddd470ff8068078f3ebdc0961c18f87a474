{"version":3,"file":"useAsyncActionHandler.js","sourceRoot":"../../../../src","sources":["hooks/useAsyncActionHandler/useAsyncActionHandler.ts"],"names":[],"mappings":";;AAaA,sDAsBC;;AAnCD,qDAA+B;AAa/B,SAAgB,qBAAqB,CAAgC,EACjE,OAAO,GAC0B;IACjC,MAAM,CAAC,SAAS,EAAE,UAAU,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAEtD,MAAM,YAAY,GAAG,KAAK,CAAC,WAAW,CAClC,KAAK,EAAE,GAAG,IAAI,EAAE,EAAE;QACd,UAAU,CAAC,IAAI,CAAC,CAAC;QAEjB,IAAI,CAAC;YACD,OAAO,MAAM,OAAO,CAAC,GAAG,IAAI,CAAC,CAAC;QAClC,CAAC;gBAAS,CAAC;YACP,UAAU,CAAC,KAAK,CAAC,CAAC;QACtB,CAAC;IACL,CAAC,EACD,CAAC,OAAO,CAAC,CACZ,CAAC;IAEF,OAAO;QACH,SAAS;QACT,OAAO,EAAE,YAAY;KACxB,CAAC;AACN,CAAC","sourcesContent":["import * as React from 'react';\n\ntype AnyAsyncAction = (...args: any[]) => PromiseLike<any>;\n\nexport interface UseAsyncActionHandlerProps<Action extends AnyAsyncAction> {\n    handler: Action;\n}\n\nexport interface UseAsyncActionHandlerResult<Action extends AnyAsyncAction> {\n    isLoading: boolean;\n    handler: (...args: Parameters<Action>) => Promise<Awaited<ReturnType<Action>>>;\n}\n\nexport function useAsyncActionHandler<Action extends AnyAsyncAction>({\n    handler,\n}: UseAsyncActionHandlerProps<Action>): UseAsyncActionHandlerResult<Action> {\n    const [isLoading, setLoading] = React.useState(false);\n\n    const handleAction = React.useCallback<UseAsyncActionHandlerResult<Action>['handler']>(\n        async (...args) => {\n            setLoading(true);\n\n            try {\n                return await handler(...args);\n            } finally {\n                setLoading(false);\n            }\n        },\n        [handler],\n    );\n\n    return {\n        isLoading,\n        handler: handleAction,\n    };\n}\n"]}