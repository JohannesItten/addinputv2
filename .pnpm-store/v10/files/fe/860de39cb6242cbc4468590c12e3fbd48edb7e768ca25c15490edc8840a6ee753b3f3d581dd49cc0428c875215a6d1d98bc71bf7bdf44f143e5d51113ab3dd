{"version":3,"file":"ClipboardButton.js","sourceRoot":"../../../../src","sources":["components/ClipboardButton/ClipboardButton.tsx"],"names":[],"mappings":"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","sourcesContent":["'use client';\n\nimport * as React from 'react';\n\nimport {ActionTooltip} from '../ActionTooltip';\nimport {Button} from '../Button';\nimport type {ButtonButtonProps, ButtonSize} from '../Button';\nimport {ClipboardIcon} from '../ClipboardIcon';\nimport {CopyToClipboard} from '../CopyToClipboard';\nimport type {\n    CopyToClipboardProps,\n    CopyToClipboardStatus,\n    OnCopyHandler,\n} from '../CopyToClipboard/types';\nimport {block} from '../utils/cn';\n\nimport i18n from './i18n';\n\nimport './ClipboardButton.scss';\n\nconst b = block('clipboard-button');\n\nexport interface ClipboardButtonProps\n    extends Omit<CopyToClipboardProps, 'children'>,\n        Omit<ClipboardButtonComponentProps, 'status' | 'closeDelay'> {}\n\ninterface ClipboardButtonComponentProps extends Omit<ButtonButtonProps, 'onCopy'> {\n    status: CopyToClipboardStatus;\n    closeDelay: number | undefined;\n    /** Disable tooltip. Tooltip won't be shown */\n    hasTooltip?: boolean;\n    /** Text shown before copy */\n    tooltipInitialText?: string;\n    /** Text shown after copy */\n    tooltipSuccessText?: string;\n    /** Position of clipboard icon */\n    iconPosition?: 'start' | 'end';\n    /** Custom icon */\n    icon?: React.ReactNode;\n}\n\nconst DEFAULT_TIMEOUT = 1200;\n\nconst ButtonSizeToIconSize: Record<ButtonSize, number> = {xs: 12, s: 16, m: 16, l: 16, xl: 20};\n\nconst ClipboardButtonComponent = (props: ClipboardButtonComponentProps) => {\n    const {\n        size = 'm',\n        hasTooltip = true,\n        tooltipInitialText = i18n('startCopy'),\n        tooltipSuccessText = i18n('endCopy'),\n        status,\n        view = 'flat',\n        children,\n        iconPosition = 'start',\n        closeDelay,\n        icon,\n        ...rest\n    } = props;\n\n    const buttonIcon = (\n        <Button.Icon className={b('icon')}>\n            {icon ?? <ClipboardIcon size={ButtonSizeToIconSize[size]} status={status} />}\n        </Button.Icon>\n    );\n\n    return (\n        <ActionTooltip\n            title={status === 'success' ? tooltipSuccessText : tooltipInitialText}\n            disabled={!hasTooltip}\n            closeDelay={closeDelay}\n        >\n            <Button view={view} size={size} aria-label={tooltipInitialText} {...rest}>\n                {iconPosition === 'start' ? buttonIcon : null}\n                {children}\n                {iconPosition === 'end' ? buttonIcon : null}\n            </Button>\n        </ActionTooltip>\n    );\n};\n\nexport function ClipboardButton(props: ClipboardButtonProps) {\n    const {\n        text,\n        timeout = DEFAULT_TIMEOUT,\n        onCopy,\n        hasTooltip = true,\n        onMouseEnter,\n        onFocus,\n        ...buttonProps\n    } = props;\n\n    const timerIdRef = React.useRef<number>();\n    const [tooltipCloseDelay, setTooltipCloseDelay] = React.useState<number | undefined>(undefined);\n    const [tooltipDisabled, setTooltipDisabled] = React.useState(false);\n\n    React.useEffect(() => window.clearTimeout(timerIdRef.current), []);\n\n    const handleCopy: OnCopyHandler = React.useCallback(\n        (text, result) => {\n            onCopy?.(text, result);\n            setTooltipDisabled(false);\n            setTooltipCloseDelay(timeout);\n\n            window.clearTimeout(timerIdRef.current);\n\n            timerIdRef.current = window.setTimeout(() => {\n                setTooltipDisabled(true);\n            }, timeout);\n        },\n        [onCopy, timeout],\n    );\n\n    const resetTooltip = React.useCallback(() => {\n        if (tooltipDisabled) {\n            setTooltipDisabled(false);\n            setTooltipCloseDelay(undefined);\n        }\n    }, [tooltipDisabled]);\n\n    const handleMouseEnter: React.MouseEventHandler<HTMLButtonElement> = React.useCallback(\n        (event) => {\n            onMouseEnter?.(event);\n            resetTooltip();\n        },\n        [onMouseEnter, resetTooltip],\n    );\n\n    const handleFocus: React.FocusEventHandler<HTMLButtonElement> = React.useCallback(\n        (event) => {\n            onFocus?.(event);\n            resetTooltip();\n        },\n        [onFocus, resetTooltip],\n    );\n\n    return (\n        <CopyToClipboard text={text} timeout={timeout} onCopy={handleCopy}>\n            {(status) => (\n                <ClipboardButtonComponent\n                    {...buttonProps}\n                    closeDelay={tooltipCloseDelay}\n                    hasTooltip={hasTooltip && !tooltipDisabled}\n                    status={status}\n                    onMouseEnter={handleMouseEnter}\n                    onFocus={handleFocus}\n                />\n            )}\n        </CopyToClipboard>\n    );\n}\n"]}